
lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057e0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08005990  08005990  00015990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bb0  08005bb0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005bb0  08005bb0  00015bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bb8  08005bb8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bb8  08005bb8  00015bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bbc  08005bbc  00015bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005bc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004990  20000074  08005c34  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a04  08005c34  00024a04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001250b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002618  00000000  00000000  000325af  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c40  00000000  00000000  00034bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b28  00000000  00000000  00035808  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004071  00000000  00000000  00036330  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b453  00000000  00000000  0003a3a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d933a  00000000  00000000  000457f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011eb2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000381c  00000000  00000000  0011ebac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005978 	.word	0x08005978

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08005978 	.word	0x08005978

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f000 fb3e 	bl	8000c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f87e 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f000 f8dc 	bl	8000758 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005a0:	f001 fa7e 	bl	8001aa0 <osKernelInitialize>
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 80005a4:	2200      	movs	r2, #0
 80005a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005aa:	482c      	ldr	r0, [pc, #176]	; (800065c <main+0xcc>)
 80005ac:	f000 fe34 	bl	8001218 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2180      	movs	r1, #128	; 0x80
 80005b4:	4829      	ldr	r0, [pc, #164]	; (800065c <main+0xcc>)
 80005b6:	f000 fe2f 	bl	8001218 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2101      	movs	r1, #1
 80005be:	4827      	ldr	r0, [pc, #156]	; (800065c <main+0xcc>)
 80005c0:	f000 fe2a 	bl	8001218 <HAL_GPIO_WritePin>
  //Create two queue capable of containing 5 int values.
  xQueue1=xQueueCreate(5,sizeof(int32_t));
 80005c4:	2200      	movs	r2, #0
 80005c6:	2104      	movs	r1, #4
 80005c8:	2005      	movs	r0, #5
 80005ca:	f001 fd6a 	bl	80020a2 <xQueueGenericCreate>
 80005ce:	4602      	mov	r2, r0
 80005d0:	4b23      	ldr	r3, [pc, #140]	; (8000660 <main+0xd0>)
 80005d2:	601a      	str	r2, [r3, #0]
  xQueue2=xQueueCreate(5,sizeof(int32_t));
 80005d4:	2200      	movs	r2, #0
 80005d6:	2104      	movs	r1, #4
 80005d8:	2005      	movs	r0, #5
 80005da:	f001 fd62 	bl	80020a2 <xQueueGenericCreate>
 80005de:	4602      	mov	r2, r0
 80005e0:	4b20      	ldr	r3, [pc, #128]	; (8000664 <main+0xd4>)
 80005e2:	601a      	str	r2, [r3, #0]
  if(xQueue1 == NULL || xQueue2 == NULL)
 80005e4:	4b1e      	ldr	r3, [pc, #120]	; (8000660 <main+0xd0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d003      	beq.n	80005f4 <main+0x64>
 80005ec:	4b1d      	ldr	r3, [pc, #116]	; (8000664 <main+0xd4>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d103      	bne.n	80005fc <main+0x6c>
  {
	  /* Queue was not created and must not be used. */
	  printf("Queue was not created and must not be used.\n");
 80005f4:	481c      	ldr	r0, [pc, #112]	; (8000668 <main+0xd8>)
 80005f6:	f004 faeb 	bl	8004bd0 <puts>
 80005fa:	e02c      	b.n	8000656 <main+0xc6>
  }
  else
  {
	  //create Muxtext
	  xSemaphore=xSemaphoreCreateMutex();
 80005fc:	2001      	movs	r0, #1
 80005fe:	f001 fdcc 	bl	800219a <xQueueCreateMutex>
 8000602:	4602      	mov	r2, r0
 8000604:	4b19      	ldr	r3, [pc, #100]	; (800066c <main+0xdc>)
 8000606:	601a      	str	r2, [r3, #0]
	  if(xSemaphore == NULL)
 8000608:	4b18      	ldr	r3, [pc, #96]	; (800066c <main+0xdc>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d103      	bne.n	8000618 <main+0x88>
	  {
		  printf("Mutex was not created");
 8000610:	4817      	ldr	r0, [pc, #92]	; (8000670 <main+0xe0>)
 8000612:	f004 fa69 	bl	8004ae8 <iprintf>
 8000616:	e01e      	b.n	8000656 <main+0xc6>
	  else
	  {

			  /* Create the thread(s) */
			  /* creation of Task1 */
			  Task1Handle = osThreadNew(StartTask01, NULL, &Task1_attributes);
 8000618:	4a16      	ldr	r2, [pc, #88]	; (8000674 <main+0xe4>)
 800061a:	2100      	movs	r1, #0
 800061c:	4816      	ldr	r0, [pc, #88]	; (8000678 <main+0xe8>)
 800061e:	f001 faa9 	bl	8001b74 <osThreadNew>
 8000622:	4602      	mov	r2, r0
 8000624:	4b15      	ldr	r3, [pc, #84]	; (800067c <main+0xec>)
 8000626:	601a      	str	r2, [r3, #0]

			  /* creation of Task02 */
			  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 8000628:	4a15      	ldr	r2, [pc, #84]	; (8000680 <main+0xf0>)
 800062a:	2100      	movs	r1, #0
 800062c:	4815      	ldr	r0, [pc, #84]	; (8000684 <main+0xf4>)
 800062e:	f001 faa1 	bl	8001b74 <osThreadNew>
 8000632:	4602      	mov	r2, r0
 8000634:	4b14      	ldr	r3, [pc, #80]	; (8000688 <main+0xf8>)
 8000636:	601a      	str	r2, [r3, #0]

			  /* creation of myTask03 */
			  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000638:	4a14      	ldr	r2, [pc, #80]	; (800068c <main+0xfc>)
 800063a:	2100      	movs	r1, #0
 800063c:	4814      	ldr	r0, [pc, #80]	; (8000690 <main+0x100>)
 800063e:	f001 fa99 	bl	8001b74 <osThreadNew>
 8000642:	4602      	mov	r2, r0
 8000644:	4b13      	ldr	r3, [pc, #76]	; (8000694 <main+0x104>)
 8000646:	601a      	str	r2, [r3, #0]

			  xSemaphoreGive(xSemaphore);
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <main+0xdc>)
 800064a:	6818      	ldr	r0, [r3, #0]
 800064c:	2300      	movs	r3, #0
 800064e:	2200      	movs	r2, #0
 8000650:	2100      	movs	r1, #0
 8000652:	f001 fdbb 	bl	80021cc <xQueueGenericSend>
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000656:	f001 fa57 	bl	8001b08 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065a:	e7fe      	b.n	800065a <main+0xca>
 800065c:	40020400 	.word	0x40020400
 8000660:	200049b8 	.word	0x200049b8
 8000664:	200049ac 	.word	0x200049ac
 8000668:	080059ac 	.word	0x080059ac
 800066c:	20000090 	.word	0x20000090
 8000670:	080059d8 	.word	0x080059d8
 8000674:	08005a9c 	.word	0x08005a9c
 8000678:	080007c1 	.word	0x080007c1
 800067c:	200049b0 	.word	0x200049b0
 8000680:	08005ac0 	.word	0x08005ac0
 8000684:	08000869 	.word	0x08000869
 8000688:	200049a8 	.word	0x200049a8
 800068c:	08005ae4 	.word	0x08005ae4
 8000690:	08000909 	.word	0x08000909
 8000694:	200049b4 	.word	0x200049b4

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	; 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	2230      	movs	r2, #48	; 0x30
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f004 fa15 	bl	8004ad6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	4b23      	ldr	r3, [pc, #140]	; (8000750 <SystemClock_Config+0xb8>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	4a22      	ldr	r2, [pc, #136]	; (8000750 <SystemClock_Config+0xb8>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	; 0x40
 80006cc:	4b20      	ldr	r3, [pc, #128]	; (8000750 <SystemClock_Config+0xb8>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <SystemClock_Config+0xbc>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006e4:	4a1b      	ldr	r2, [pc, #108]	; (8000754 <SystemClock_Config+0xbc>)
 80006e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b19      	ldr	r3, [pc, #100]	; (8000754 <SystemClock_Config+0xbc>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f8:	2302      	movs	r3, #2
 80006fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fc:	2301      	movs	r3, #1
 80006fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000700:	2310      	movs	r3, #16
 8000702:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000704:	2300      	movs	r3, #0
 8000706:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 0320 	add.w	r3, r7, #32
 800070c:	4618      	mov	r0, r3
 800070e:	f000 fdb7 	bl	8001280 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000718:	f000 f948 	bl	80009ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	230f      	movs	r3, #15
 800071e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000720:	2300      	movs	r3, #0
 8000722:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f001 f812 	bl	8001760 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000742:	f000 f933 	bl	80009ac <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	3750      	adds	r7, #80	; 0x50
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800
 8000754:	40007000 	.word	0x40007000

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076c:	2300      	movs	r3, #0
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_GPIO_Init+0x60>)
 8000772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000774:	4a10      	ldr	r2, [pc, #64]	; (80007b8 <MX_GPIO_Init+0x60>)
 8000776:	f043 0302 	orr.w	r3, r3, #2
 800077a:	6313      	str	r3, [r2, #48]	; 0x30
 800077c:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_GPIO_Init+0x60>)
 800077e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000780:	f003 0302 	and.w	r3, r3, #2
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	f244 0181 	movw	r1, #16513	; 0x4081
 800078e:	480b      	ldr	r0, [pc, #44]	; (80007bc <MX_GPIO_Init+0x64>)
 8000790:	f000 fd42 	bl	8001218 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8000794:	f244 0381 	movw	r3, #16513	; 0x4081
 8000798:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079a:	2301      	movs	r3, #1
 800079c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	4619      	mov	r1, r3
 80007aa:	4804      	ldr	r0, [pc, #16]	; (80007bc <MX_GPIO_Init+0x64>)
 80007ac:	f000 fb8a 	bl	8000ec4 <HAL_GPIO_Init>

}
 80007b0:	bf00      	nop
 80007b2:	3718      	adds	r7, #24
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40020400 	.word	0x40020400

080007c0 <StartTask01>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	  int32_t counter=1; //value to write
 80007c8:	2301      	movs	r3, #1
 80007ca:	60fb      	str	r3, [r7, #12]
	  BaseType_t xStatus1;
	  BaseType_t xStatus2;
	  const TickType_t xTicksToWait = pdMS_TO_TICKS( 1000 );
 80007cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d0:	61bb      	str	r3, [r7, #24]
	  int flag=2;
 80007d2:	2302      	movs	r3, #2
 80007d4:	61fb      	str	r3, [r7, #28]
	  /* USER CODE BEGIN 5 */
	  /* Infinite loop */
	  for(;;)
	  {
		//sends the “counter” value to Task 2 once per second
		xStatus1=xQueueSend( xQueue1,( void * ) &counter, xTicksToWait);
 80007d6:	4b20      	ldr	r3, [pc, #128]	; (8000858 <StartTask01+0x98>)
 80007d8:	6818      	ldr	r0, [r3, #0]
 80007da:	f107 010c 	add.w	r1, r7, #12
 80007de:	2300      	movs	r3, #0
 80007e0:	69ba      	ldr	r2, [r7, #24]
 80007e2:	f001 fcf3 	bl	80021cc <xQueueGenericSend>
 80007e6:	6178      	str	r0, [r7, #20]
		if(xStatus1!=pdPASS)
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d002      	beq.n	80007f4 <StartTask01+0x34>
		{
			printf("xQueue1 Failed to post the message, even after 1000 ms.");
 80007ee:	481b      	ldr	r0, [pc, #108]	; (800085c <StartTask01+0x9c>)
 80007f0:	f004 f97a 	bl	8004ae8 <iprintf>
		}

		//sends the “counter” value to Task 3 once per two seconds
		if(flag>=2)
 80007f4:	69fb      	ldr	r3, [r7, #28]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	dd10      	ble.n	800081c <StartTask01+0x5c>
		{
			xStatus2=xQueueSend( xQueue2,( void * ) &counter, xTicksToWait);
 80007fa:	4b19      	ldr	r3, [pc, #100]	; (8000860 <StartTask01+0xa0>)
 80007fc:	6818      	ldr	r0, [r3, #0]
 80007fe:	f107 010c 	add.w	r1, r7, #12
 8000802:	2300      	movs	r3, #0
 8000804:	69ba      	ldr	r2, [r7, #24]
 8000806:	f001 fce1 	bl	80021cc <xQueueGenericSend>
 800080a:	6138      	str	r0, [r7, #16]
			if(xStatus2!=pdPASS)
 800080c:	693b      	ldr	r3, [r7, #16]
 800080e:	2b01      	cmp	r3, #1
 8000810:	d002      	beq.n	8000818 <StartTask01+0x58>
			{
				printf("xQueue2 Failed to post the message, even after 1000 ms.");
 8000812:	4814      	ldr	r0, [pc, #80]	; (8000864 <StartTask01+0xa4>)
 8000814:	f004 f968 	bl	8004ae8 <iprintf>
			}
			flag=0;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
		}

		//The incrementing of “counter” variable should be paused if the corresponding queue is full and resumed if the corresponding queue is not full.
		if(uxQueueMessagesWaiting(xQueue1)==5 || uxQueueMessagesWaiting(xQueue2)==5)
 800081c:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <StartTask01+0x98>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4618      	mov	r0, r3
 8000822:	f002 f845 	bl	80028b0 <uxQueueMessagesWaiting>
 8000826:	4603      	mov	r3, r0
 8000828:	2b05      	cmp	r3, #5
 800082a:	d007      	beq.n	800083c <StartTask01+0x7c>
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <StartTask01+0xa0>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4618      	mov	r0, r3
 8000832:	f002 f83d 	bl	80028b0 <uxQueueMessagesWaiting>
 8000836:	4603      	mov	r3, r0
 8000838:	2b05      	cmp	r3, #5
 800083a:	d102      	bne.n	8000842 <StartTask01+0x82>
		{
			counter=counter;
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	e002      	b.n	8000848 <StartTask01+0x88>
		}
		else
			counter=counter+1;
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	3301      	adds	r3, #1
 8000846:	60fb      	str	r3, [r7, #12]

		flag=flag+1;
 8000848:	69fb      	ldr	r3, [r7, #28]
 800084a:	3301      	adds	r3, #1
 800084c:	61fb      	str	r3, [r7, #28]
		osDelay(1000);
 800084e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000852:	f001 fa35 	bl	8001cc0 <osDelay>
		xStatus1=xQueueSend( xQueue1,( void * ) &counter, xTicksToWait);
 8000856:	e7be      	b.n	80007d6 <StartTask01+0x16>
 8000858:	200049b8 	.word	0x200049b8
 800085c:	080059f0 	.word	0x080059f0
 8000860:	200049ac 	.word	0x200049ac
 8000864:	08005a28 	.word	0x08005a28

08000868 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	  int32_t xReceivedValue;
	  BaseType_t xStatus;
	  const TickType_t xTicksToWait = pdMS_TO_TICKS( 1000 );
 8000870:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000874:	613b      	str	r3, [r7, #16]
	  /* USER CODE BEGIN StartTask02 */
	  /* Infinite loop */
	  for(;;)
	  {
		if(uxQueueMessagesWaiting(xQueue1) != 0)
 8000876:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <StartTask02+0x90>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4618      	mov	r0, r3
 800087c:	f002 f818 	bl	80028b0 <uxQueueMessagesWaiting>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d0f7      	beq.n	8000876 <StartTask02+0xe>
		{
			xStatus = xQueueReceive( xQueue1, &xReceivedValue, xTicksToWait );
 8000886:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <StartTask02+0x90>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f107 0108 	add.w	r1, r7, #8
 800088e:	693a      	ldr	r2, [r7, #16]
 8000890:	4618      	mov	r0, r3
 8000892:	f001 fe29 	bl	80024e8 <xQueueReceive>
 8000896:	60f8      	str	r0, [r7, #12]
			if( xStatus == pdPASS )
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d128      	bne.n	80008f0 <StartTask02+0x88>
			 {
				xSemaphoreTake(xSemaphore, portMAX_DELAY);//Realize mutual exclusive access to resources through binary mutually exclusive semaphores, and wait forever until resources are available
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <StartTask02+0x94>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f04f 31ff 	mov.w	r1, #4294967295
 80008a6:	4618      	mov	r0, r3
 80008a8:	f001 fefa 	bl	80026a0 <xQueueSemaphoreTake>
				for(int32_t i=0;i<xReceivedValue;i++)
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
 80008b0:	e00e      	b.n	80008d0 <StartTask02+0x68>
				{
					 /* After the data is successfully acquired, flip the LED2 light level, the number of flips is the number read*/
					 HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);//led2 Flashing
 80008b2:	2180      	movs	r1, #128	; 0x80
 80008b4:	4812      	ldr	r0, [pc, #72]	; (8000900 <StartTask02+0x98>)
 80008b6:	f000 fcc8 	bl	800124a <HAL_GPIO_TogglePin>
					 HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);//led1 Flashing,LED1 is used to check if LED2 flashes and conflicts with task 3
 80008ba:	2101      	movs	r1, #1
 80008bc:	4810      	ldr	r0, [pc, #64]	; (8000900 <StartTask02+0x98>)
 80008be:	f000 fcc4 	bl	800124a <HAL_GPIO_TogglePin>
					 osDelay(550);
 80008c2:	f240 2026 	movw	r0, #550	; 0x226
 80008c6:	f001 f9fb 	bl	8001cc0 <osDelay>
				for(int32_t i=0;i<xReceivedValue;i++)
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	3301      	adds	r3, #1
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	697a      	ldr	r2, [r7, #20]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	dbec      	blt.n	80008b2 <StartTask02+0x4a>
				}
				xSemaphoreGive(xSemaphore);//freed
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <StartTask02+0x94>)
 80008da:	6818      	ldr	r0, [r3, #0]
 80008dc:	2300      	movs	r3, #0
 80008de:	2200      	movs	r2, #0
 80008e0:	2100      	movs	r1, #0
 80008e2:	f001 fc73 	bl	80021cc <xQueueGenericSend>
				osDelay(550);//Free for a certain period of time for task 3 using LED2
 80008e6:	f240 2026 	movw	r0, #550	; 0x226
 80008ea:	f001 f9e9 	bl	8001cc0 <osDelay>
 80008ee:	e7c2      	b.n	8000876 <StartTask02+0xe>
			 }
			 else
			 {
				 /* Data was not received from the queue even after waiting for 1000ms. */
				 printf( "Could not receive from the queue.\r\n" );
 80008f0:	4804      	ldr	r0, [pc, #16]	; (8000904 <StartTask02+0x9c>)
 80008f2:	f004 f96d 	bl	8004bd0 <puts>
		if(uxQueueMessagesWaiting(xQueue1) != 0)
 80008f6:	e7be      	b.n	8000876 <StartTask02+0xe>
 80008f8:	200049b8 	.word	0x200049b8
 80008fc:	20000090 	.word	0x20000090
 8000900:	40020400 	.word	0x40020400
 8000904:	08005a60 	.word	0x08005a60

08000908 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	  int32_t xReceivedValue;
	  BaseType_t xStatus;
	  const TickType_t xTicksToWait = pdMS_TO_TICKS( 1000 );
 8000910:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000914:	613b      	str	r3, [r7, #16]
	  /* USER CODE BEGIN StartTask03 */
	  /* Infinite loop */
	  for(;;)
	  {
		if(uxQueueMessagesWaiting(xQueue2) != 0)
 8000916:	4b21      	ldr	r3, [pc, #132]	; (800099c <StartTask03+0x94>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4618      	mov	r0, r3
 800091c:	f001 ffc8 	bl	80028b0 <uxQueueMessagesWaiting>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d0f7      	beq.n	8000916 <StartTask03+0xe>
		{
			xStatus = xQueueReceive( xQueue2, &xReceivedValue, xTicksToWait );
 8000926:	4b1d      	ldr	r3, [pc, #116]	; (800099c <StartTask03+0x94>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f107 0108 	add.w	r1, r7, #8
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	4618      	mov	r0, r3
 8000932:	f001 fdd9 	bl	80024e8 <xQueueReceive>
 8000936:	60f8      	str	r0, [r7, #12]
			if( xStatus == pdPASS )
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d129      	bne.n	8000992 <StartTask03+0x8a>
			 {
				xSemaphoreTake(xSemaphore, portMAX_DELAY) ;
 800093e:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <StartTask03+0x98>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f04f 31ff 	mov.w	r1, #4294967295
 8000946:	4618      	mov	r0, r3
 8000948:	f001 feaa 	bl	80026a0 <xQueueSemaphoreTake>
				for(int32_t i=0;i<xReceivedValue;i++)
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	e00f      	b.n	8000972 <StartTask03+0x6a>
				{
					 /* After the data is successfully acquired, flip the LED2 light level, the number of flips is the number read*/
					 HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);// LED2 flashing
 8000952:	2180      	movs	r1, #128	; 0x80
 8000954:	4813      	ldr	r0, [pc, #76]	; (80009a4 <StartTask03+0x9c>)
 8000956:	f000 fc78 	bl	800124a <HAL_GPIO_TogglePin>
					 HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);//LED3 Flashing,LED3 is used to check if LED2 flashes and conflicts with task 2
 800095a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800095e:	4811      	ldr	r0, [pc, #68]	; (80009a4 <StartTask03+0x9c>)
 8000960:	f000 fc73 	bl	800124a <HAL_GPIO_TogglePin>
					 osDelay(550);
 8000964:	f240 2026 	movw	r0, #550	; 0x226
 8000968:	f001 f9aa 	bl	8001cc0 <osDelay>
				for(int32_t i=0;i<xReceivedValue;i++)
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	3301      	adds	r3, #1
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	697a      	ldr	r2, [r7, #20]
 8000976:	429a      	cmp	r2, r3
 8000978:	dbeb      	blt.n	8000952 <StartTask03+0x4a>
				}
				xSemaphoreGive(xSemaphore);//freed
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <StartTask03+0x98>)
 800097c:	6818      	ldr	r0, [r3, #0]
 800097e:	2300      	movs	r3, #0
 8000980:	2200      	movs	r2, #0
 8000982:	2100      	movs	r1, #0
 8000984:	f001 fc22 	bl	80021cc <xQueueGenericSend>
				osDelay(550);//Free for a certain period of time for task 2 using LED2
 8000988:	f240 2026 	movw	r0, #550	; 0x226
 800098c:	f001 f998 	bl	8001cc0 <osDelay>
 8000990:	e7c1      	b.n	8000916 <StartTask03+0xe>
			 }
			 else
			 {
				 /* Data was not received from the queue even after waiting for 1000ms. */
				 printf( "Could not receive from the queue.\r\n" );
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <StartTask03+0xa0>)
 8000994:	f004 f91c 	bl	8004bd0 <puts>
		if(uxQueueMessagesWaiting(xQueue2) != 0)
 8000998:	e7bd      	b.n	8000916 <StartTask03+0xe>
 800099a:	bf00      	nop
 800099c:	200049ac 	.word	0x200049ac
 80009a0:	20000090 	.word	0x20000090
 80009a4:	40020400 	.word	0x40020400
 80009a8:	08005a60 	.word	0x08005a60

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
	...

080009bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <HAL_MspInit+0x54>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	4a11      	ldr	r2, [pc, #68]	; (8000a10 <HAL_MspInit+0x54>)
 80009cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d0:	6453      	str	r3, [r2, #68]	; 0x44
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <HAL_MspInit+0x54>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <HAL_MspInit+0x54>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <HAL_MspInit+0x54>)
 80009e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ec:	6413      	str	r3, [r2, #64]	; 0x40
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <HAL_MspInit+0x54>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	210f      	movs	r1, #15
 80009fe:	f06f 0001 	mvn.w	r0, #1
 8000a02:	f000 fa36 	bl	8000e72 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800

08000a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <HardFault_Handler+0x4>

08000a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <MemManage_Handler+0x4>

08000a2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <BusFault_Handler+0x4>

08000a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <UsageFault_Handler+0x4>

08000a3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a4c:	f000 f934 	bl	8000cb8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a50:	f002 fed8 	bl	8003804 <xTaskGetSchedulerState>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d001      	beq.n	8000a5e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a5a:	f003 fda5 	bl	80045a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b086      	sub	sp, #24
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	60f8      	str	r0, [r7, #12]
 8000a6a:	60b9      	str	r1, [r7, #8]
 8000a6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
 8000a72:	e00a      	b.n	8000a8a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a74:	f3af 8000 	nop.w
 8000a78:	4601      	mov	r1, r0
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	1c5a      	adds	r2, r3, #1
 8000a7e:	60ba      	str	r2, [r7, #8]
 8000a80:	b2ca      	uxtb	r2, r1
 8000a82:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	3301      	adds	r3, #1
 8000a88:	617b      	str	r3, [r7, #20]
 8000a8a:	697a      	ldr	r2, [r7, #20]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	dbf0      	blt.n	8000a74 <_read+0x12>
	}

return len;
 8000a92:	687b      	ldr	r3, [r7, #4]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3718      	adds	r7, #24
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
 8000aac:	e009      	b.n	8000ac2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	1c5a      	adds	r2, r3, #1
 8000ab2:	60ba      	str	r2, [r7, #8]
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	617b      	str	r3, [r7, #20]
 8000ac2:	697a      	ldr	r2, [r7, #20]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	dbf1      	blt.n	8000aae <_write+0x12>
	}
	return len;
 8000aca:	687b      	ldr	r3, [r7, #4]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3718      	adds	r7, #24
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <_close>:

int _close(int file)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	return -1;
 8000adc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000afc:	605a      	str	r2, [r3, #4]
	return 0;
 8000afe:	2300      	movs	r3, #0
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <_isatty>:

int _isatty(int file)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	return 1;
 8000b14:	2301      	movs	r3, #1
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b22:	b480      	push	{r7}
 8000b24:	b085      	sub	sp, #20
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	60f8      	str	r0, [r7, #12]
 8000b2a:	60b9      	str	r1, [r7, #8]
 8000b2c:	607a      	str	r2, [r7, #4]
	return 0;
 8000b2e:	2300      	movs	r3, #0
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <_sbrk+0x50>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d102      	bne.n	8000b52 <_sbrk+0x16>
		heap_end = &end;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <_sbrk+0x50>)
 8000b4e:	4a10      	ldr	r2, [pc, #64]	; (8000b90 <_sbrk+0x54>)
 8000b50:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <_sbrk+0x50>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <_sbrk+0x50>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4413      	add	r3, r2
 8000b60:	466a      	mov	r2, sp
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d907      	bls.n	8000b76 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000b66:	f003 ff81 	bl	8004a6c <__errno>
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	230c      	movs	r3, #12
 8000b6e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000b70:	f04f 33ff 	mov.w	r3, #4294967295
 8000b74:	e006      	b.n	8000b84 <_sbrk+0x48>
	}

	heap_end += incr;
 8000b76:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <_sbrk+0x50>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	4a03      	ldr	r2, [pc, #12]	; (8000b8c <_sbrk+0x50>)
 8000b80:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000b82:	68fb      	ldr	r3, [r7, #12]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000094 	.word	0x20000094
 8000b90:	20004a08 	.word	0x20004a08

08000b94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <SystemInit+0x28>)
 8000b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b9e:	4a07      	ldr	r2, [pc, #28]	; (8000bbc <SystemInit+0x28>)
 8000ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ba8:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <SystemInit+0x28>)
 8000baa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bae:	609a      	str	r2, [r3, #8]
#endif
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000bc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000bc4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000bc6:	e003      	b.n	8000bd0 <LoopCopyDataInit>

08000bc8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000bca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000bcc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bce:	3104      	adds	r1, #4

08000bd0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bd0:	480b      	ldr	r0, [pc, #44]	; (8000c00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000bd4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bd6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bd8:	d3f6      	bcc.n	8000bc8 <CopyDataInit>
  ldr  r2, =_sbss
 8000bda:	4a0b      	ldr	r2, [pc, #44]	; (8000c08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000bdc:	e002      	b.n	8000be4 <LoopFillZerobss>

08000bde <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000bde:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000be0:	f842 3b04 	str.w	r3, [r2], #4

08000be4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000be4:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000be6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000be8:	d3f9      	bcc.n	8000bde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bea:	f7ff ffd3 	bl	8000b94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bee:	f003 ff43 	bl	8004a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bf2:	f7ff fccd 	bl	8000590 <main>
  bx  lr    
 8000bf6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000bf8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000bfc:	08005bc0 	.word	0x08005bc0
  ldr  r0, =_sdata
 8000c00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c04:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000c08:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000c0c:	20004a04 	.word	0x20004a04

08000c10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC_IRQHandler>
	...

08000c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c18:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <HAL_Init+0x40>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a0d      	ldr	r2, [pc, #52]	; (8000c54 <HAL_Init+0x40>)
 8000c1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c24:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <HAL_Init+0x40>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <HAL_Init+0x40>)
 8000c2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <HAL_Init+0x40>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a07      	ldr	r2, [pc, #28]	; (8000c54 <HAL_Init+0x40>)
 8000c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c3c:	2003      	movs	r0, #3
 8000c3e:	f000 f90d 	bl	8000e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c42:	200f      	movs	r0, #15
 8000c44:	f000 f808 	bl	8000c58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c48:	f7ff feb8 	bl	80009bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40023c00 	.word	0x40023c00

08000c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <HAL_InitTick+0x54>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <HAL_InitTick+0x58>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c76:	4618      	mov	r0, r3
 8000c78:	f000 f917 	bl	8000eaa <HAL_SYSTICK_Config>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e00e      	b.n	8000ca4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2b0f      	cmp	r3, #15
 8000c8a:	d80a      	bhi.n	8000ca2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	f04f 30ff 	mov.w	r0, #4294967295
 8000c94:	f000 f8ed 	bl	8000e72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c98:	4a06      	ldr	r2, [pc, #24]	; (8000cb4 <HAL_InitTick+0x5c>)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	e000      	b.n	8000ca4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000000 	.word	0x20000000
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	20000004 	.word	0x20000004

08000cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_IncTick+0x20>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_IncTick+0x24>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <HAL_IncTick+0x24>)
 8000cca:	6013      	str	r3, [r2, #0]
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	200049bc 	.word	0x200049bc

08000ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce4:	4b03      	ldr	r3, [pc, #12]	; (8000cf4 <HAL_GetTick+0x14>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	200049bc 	.word	0x200049bc

08000cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d0e:	68ba      	ldr	r2, [r7, #8]
 8000d10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d14:	4013      	ands	r3, r2
 8000d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2a:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	60d3      	str	r3, [r2, #12]
}
 8000d30:	bf00      	nop
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <__NVIC_GetPriorityGrouping+0x18>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	0a1b      	lsrs	r3, r3, #8
 8000d4a:	f003 0307 	and.w	r3, r3, #7
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	6039      	str	r1, [r7, #0]
 8000d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	db0a      	blt.n	8000d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	490c      	ldr	r1, [pc, #48]	; (8000da8 <__NVIC_SetPriority+0x4c>)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	0112      	lsls	r2, r2, #4
 8000d7c:	b2d2      	uxtb	r2, r2
 8000d7e:	440b      	add	r3, r1
 8000d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d84:	e00a      	b.n	8000d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4908      	ldr	r1, [pc, #32]	; (8000dac <__NVIC_SetPriority+0x50>)
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	f003 030f 	and.w	r3, r3, #15
 8000d92:	3b04      	subs	r3, #4
 8000d94:	0112      	lsls	r2, r2, #4
 8000d96:	b2d2      	uxtb	r2, r2
 8000d98:	440b      	add	r3, r1
 8000d9a:	761a      	strb	r2, [r3, #24]
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000e100 	.word	0xe000e100
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b089      	sub	sp, #36	; 0x24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f1c3 0307 	rsb	r3, r3, #7
 8000dca:	2b04      	cmp	r3, #4
 8000dcc:	bf28      	it	cs
 8000dce:	2304      	movcs	r3, #4
 8000dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	2b06      	cmp	r3, #6
 8000dd8:	d902      	bls.n	8000de0 <NVIC_EncodePriority+0x30>
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3b03      	subs	r3, #3
 8000dde:	e000      	b.n	8000de2 <NVIC_EncodePriority+0x32>
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	f04f 32ff 	mov.w	r2, #4294967295
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43da      	mvns	r2, r3
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	401a      	ands	r2, r3
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000e02:	43d9      	mvns	r1, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	4313      	orrs	r3, r2
         );
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3724      	adds	r7, #36	; 0x24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e28:	d301      	bcc.n	8000e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e00f      	b.n	8000e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <SysTick_Config+0x40>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e36:	210f      	movs	r1, #15
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3c:	f7ff ff8e 	bl	8000d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e40:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <SysTick_Config+0x40>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e46:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <SysTick_Config+0x40>)
 8000e48:	2207      	movs	r2, #7
 8000e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	e000e010 	.word	0xe000e010

08000e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff ff47 	bl	8000cf8 <__NVIC_SetPriorityGrouping>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b086      	sub	sp, #24
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4603      	mov	r3, r0
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	607a      	str	r2, [r7, #4]
 8000e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e84:	f7ff ff5c 	bl	8000d40 <__NVIC_GetPriorityGrouping>
 8000e88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	68b9      	ldr	r1, [r7, #8]
 8000e8e:	6978      	ldr	r0, [r7, #20]
 8000e90:	f7ff ff8e 	bl	8000db0 <NVIC_EncodePriority>
 8000e94:	4602      	mov	r2, r0
 8000e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9a:	4611      	mov	r1, r2
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ff5d 	bl	8000d5c <__NVIC_SetPriority>
}
 8000ea2:	bf00      	nop
 8000ea4:	3718      	adds	r7, #24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff ffb0 	bl	8000e18 <SysTick_Config>
 8000eb8:	4603      	mov	r3, r0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b089      	sub	sp, #36	; 0x24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
 8000ede:	e177      	b.n	80011d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	697a      	ldr	r2, [r7, #20]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	f040 8166 	bne.w	80011ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d00b      	beq.n	8000f1e <HAL_GPIO_Init+0x5a>
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d007      	beq.n	8000f1e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f12:	2b11      	cmp	r3, #17
 8000f14:	d003      	beq.n	8000f1e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	2b12      	cmp	r3, #18
 8000f1c:	d130      	bne.n	8000f80 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	2203      	movs	r2, #3
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4013      	ands	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	68da      	ldr	r2, [r3, #12]
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f54:	2201      	movs	r2, #1
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	091b      	lsrs	r3, r3, #4
 8000f6a:	f003 0201 	and.w	r2, r3, #1
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	689a      	ldr	r2, [r3, #8]
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d003      	beq.n	8000fc0 <HAL_GPIO_Init+0xfc>
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b12      	cmp	r3, #18
 8000fbe:	d123      	bne.n	8001008 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	08da      	lsrs	r2, r3, #3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3208      	adds	r2, #8
 8000fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	f003 0307 	and.w	r3, r3, #7
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	220f      	movs	r2, #15
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	691a      	ldr	r2, [r3, #16]
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	08da      	lsrs	r2, r3, #3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3208      	adds	r2, #8
 8001002:	69b9      	ldr	r1, [r7, #24]
 8001004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	2203      	movs	r2, #3
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 0203 	and.w	r2, r3, #3
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001044:	2b00      	cmp	r3, #0
 8001046:	f000 80c0 	beq.w	80011ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	4b65      	ldr	r3, [pc, #404]	; (80011e4 <HAL_GPIO_Init+0x320>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	4a64      	ldr	r2, [pc, #400]	; (80011e4 <HAL_GPIO_Init+0x320>)
 8001054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001058:	6453      	str	r3, [r2, #68]	; 0x44
 800105a:	4b62      	ldr	r3, [pc, #392]	; (80011e4 <HAL_GPIO_Init+0x320>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001066:	4a60      	ldr	r2, [pc, #384]	; (80011e8 <HAL_GPIO_Init+0x324>)
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	089b      	lsrs	r3, r3, #2
 800106c:	3302      	adds	r3, #2
 800106e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	f003 0303 	and.w	r3, r3, #3
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	220f      	movs	r2, #15
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4013      	ands	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a57      	ldr	r2, [pc, #348]	; (80011ec <HAL_GPIO_Init+0x328>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d037      	beq.n	8001102 <HAL_GPIO_Init+0x23e>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a56      	ldr	r2, [pc, #344]	; (80011f0 <HAL_GPIO_Init+0x32c>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d031      	beq.n	80010fe <HAL_GPIO_Init+0x23a>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a55      	ldr	r2, [pc, #340]	; (80011f4 <HAL_GPIO_Init+0x330>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d02b      	beq.n	80010fa <HAL_GPIO_Init+0x236>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a54      	ldr	r2, [pc, #336]	; (80011f8 <HAL_GPIO_Init+0x334>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d025      	beq.n	80010f6 <HAL_GPIO_Init+0x232>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a53      	ldr	r2, [pc, #332]	; (80011fc <HAL_GPIO_Init+0x338>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d01f      	beq.n	80010f2 <HAL_GPIO_Init+0x22e>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a52      	ldr	r2, [pc, #328]	; (8001200 <HAL_GPIO_Init+0x33c>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d019      	beq.n	80010ee <HAL_GPIO_Init+0x22a>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a51      	ldr	r2, [pc, #324]	; (8001204 <HAL_GPIO_Init+0x340>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d013      	beq.n	80010ea <HAL_GPIO_Init+0x226>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a50      	ldr	r2, [pc, #320]	; (8001208 <HAL_GPIO_Init+0x344>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d00d      	beq.n	80010e6 <HAL_GPIO_Init+0x222>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a4f      	ldr	r2, [pc, #316]	; (800120c <HAL_GPIO_Init+0x348>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d007      	beq.n	80010e2 <HAL_GPIO_Init+0x21e>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a4e      	ldr	r2, [pc, #312]	; (8001210 <HAL_GPIO_Init+0x34c>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d101      	bne.n	80010de <HAL_GPIO_Init+0x21a>
 80010da:	2309      	movs	r3, #9
 80010dc:	e012      	b.n	8001104 <HAL_GPIO_Init+0x240>
 80010de:	230a      	movs	r3, #10
 80010e0:	e010      	b.n	8001104 <HAL_GPIO_Init+0x240>
 80010e2:	2308      	movs	r3, #8
 80010e4:	e00e      	b.n	8001104 <HAL_GPIO_Init+0x240>
 80010e6:	2307      	movs	r3, #7
 80010e8:	e00c      	b.n	8001104 <HAL_GPIO_Init+0x240>
 80010ea:	2306      	movs	r3, #6
 80010ec:	e00a      	b.n	8001104 <HAL_GPIO_Init+0x240>
 80010ee:	2305      	movs	r3, #5
 80010f0:	e008      	b.n	8001104 <HAL_GPIO_Init+0x240>
 80010f2:	2304      	movs	r3, #4
 80010f4:	e006      	b.n	8001104 <HAL_GPIO_Init+0x240>
 80010f6:	2303      	movs	r3, #3
 80010f8:	e004      	b.n	8001104 <HAL_GPIO_Init+0x240>
 80010fa:	2302      	movs	r3, #2
 80010fc:	e002      	b.n	8001104 <HAL_GPIO_Init+0x240>
 80010fe:	2301      	movs	r3, #1
 8001100:	e000      	b.n	8001104 <HAL_GPIO_Init+0x240>
 8001102:	2300      	movs	r3, #0
 8001104:	69fa      	ldr	r2, [r7, #28]
 8001106:	f002 0203 	and.w	r2, r2, #3
 800110a:	0092      	lsls	r2, r2, #2
 800110c:	4093      	lsls	r3, r2
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4313      	orrs	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001114:	4934      	ldr	r1, [pc, #208]	; (80011e8 <HAL_GPIO_Init+0x324>)
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	089b      	lsrs	r3, r3, #2
 800111a:	3302      	adds	r3, #2
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001122:	4b3c      	ldr	r3, [pc, #240]	; (8001214 <HAL_GPIO_Init+0x350>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	43db      	mvns	r3, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4013      	ands	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001146:	4a33      	ldr	r2, [pc, #204]	; (8001214 <HAL_GPIO_Init+0x350>)
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800114c:	4b31      	ldr	r3, [pc, #196]	; (8001214 <HAL_GPIO_Init+0x350>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001170:	4a28      	ldr	r2, [pc, #160]	; (8001214 <HAL_GPIO_Init+0x350>)
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001176:	4b27      	ldr	r3, [pc, #156]	; (8001214 <HAL_GPIO_Init+0x350>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800119a:	4a1e      	ldr	r2, [pc, #120]	; (8001214 <HAL_GPIO_Init+0x350>)
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a0:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <HAL_GPIO_Init+0x350>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011c4:	4a13      	ldr	r2, [pc, #76]	; (8001214 <HAL_GPIO_Init+0x350>)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	3301      	adds	r3, #1
 80011ce:	61fb      	str	r3, [r7, #28]
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	2b0f      	cmp	r3, #15
 80011d4:	f67f ae84 	bls.w	8000ee0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011d8:	bf00      	nop
 80011da:	3724      	adds	r7, #36	; 0x24
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40013800 	.word	0x40013800
 80011ec:	40020000 	.word	0x40020000
 80011f0:	40020400 	.word	0x40020400
 80011f4:	40020800 	.word	0x40020800
 80011f8:	40020c00 	.word	0x40020c00
 80011fc:	40021000 	.word	0x40021000
 8001200:	40021400 	.word	0x40021400
 8001204:	40021800 	.word	0x40021800
 8001208:	40021c00 	.word	0x40021c00
 800120c:	40022000 	.word	0x40022000
 8001210:	40022400 	.word	0x40022400
 8001214:	40013c00 	.word	0x40013c00

08001218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	807b      	strh	r3, [r7, #2]
 8001224:	4613      	mov	r3, r2
 8001226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001228:	787b      	ldrb	r3, [r7, #1]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800122e:	887a      	ldrh	r2, [r7, #2]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001234:	e003      	b.n	800123e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001236:	887b      	ldrh	r3, [r7, #2]
 8001238:	041a      	lsls	r2, r3, #16
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	619a      	str	r2, [r3, #24]
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
 8001252:	460b      	mov	r3, r1
 8001254:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	695a      	ldr	r2, [r3, #20]
 800125a:	887b      	ldrh	r3, [r7, #2]
 800125c:	401a      	ands	r2, r3
 800125e:	887b      	ldrh	r3, [r7, #2]
 8001260:	429a      	cmp	r2, r3
 8001262:	d104      	bne.n	800126e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001264:	887b      	ldrh	r3, [r7, #2]
 8001266:	041a      	lsls	r2, r3, #16
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800126c:	e002      	b.n	8001274 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800126e:	887a      	ldrh	r2, [r7, #2]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	619a      	str	r2, [r3, #24]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d101      	bne.n	8001292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e25b      	b.n	800174a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b00      	cmp	r3, #0
 800129c:	d075      	beq.n	800138a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800129e:	4ba3      	ldr	r3, [pc, #652]	; (800152c <HAL_RCC_OscConfig+0x2ac>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 030c 	and.w	r3, r3, #12
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	d00c      	beq.n	80012c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012aa:	4ba0      	ldr	r3, [pc, #640]	; (800152c <HAL_RCC_OscConfig+0x2ac>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012b2:	2b08      	cmp	r3, #8
 80012b4:	d112      	bne.n	80012dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012b6:	4b9d      	ldr	r3, [pc, #628]	; (800152c <HAL_RCC_OscConfig+0x2ac>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012c2:	d10b      	bne.n	80012dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c4:	4b99      	ldr	r3, [pc, #612]	; (800152c <HAL_RCC_OscConfig+0x2ac>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d05b      	beq.n	8001388 <HAL_RCC_OscConfig+0x108>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d157      	bne.n	8001388 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e236      	b.n	800174a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012e4:	d106      	bne.n	80012f4 <HAL_RCC_OscConfig+0x74>
 80012e6:	4b91      	ldr	r3, [pc, #580]	; (800152c <HAL_RCC_OscConfig+0x2ac>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a90      	ldr	r2, [pc, #576]	; (800152c <HAL_RCC_OscConfig+0x2ac>)
 80012ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	e01d      	b.n	8001330 <HAL_RCC_OscConfig+0xb0>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012fc:	d10c      	bne.n	8001318 <HAL_RCC_OscConfig+0x98>
 80012fe:	4b8b      	ldr	r3, [pc, #556]	; (800152c <HAL_RCC_OscConfig+0x2ac>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a8a      	ldr	r2, [pc, #552]	; (800152c <HAL_RCC_OscConfig+0x2ac>)
 8001304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	4b88      	ldr	r3, [pc, #544]	; (800152c <HAL_RCC_OscConfig+0x2ac>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a87      	ldr	r2, [pc, #540]	; (800152c <HAL_RCC_OscConfig+0x2ac>)
 8001310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	e00b      	b.n	8001330 <HAL_RCC_OscConfig+0xb0>
 8001318:	4b84      	ldr	r3, [pc, #528]	; (800152c <HAL_RCC_OscConfig+0x2ac>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a83      	ldr	r2, [pc, #524]	; (800152c <HAL_RCC_OscConfig+0x2ac>)
 800131e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001322:	6013      	str	r3, [r2, #0]
 8001324:	4b81      	ldr	r3, [pc, #516]	; (800152c <HAL_RCC_OscConfig+0x2ac>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a80      	ldr	r2, [pc, #512]	; (800152c <HAL_RCC_OscConfig+0x2ac>)
 800132a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800132e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d013      	beq.n	8001360 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001338:	f7ff fcd2 	bl	8000ce0 <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001340:	f7ff fcce 	bl	8000ce0 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b64      	cmp	r3, #100	; 0x64
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e1fb      	b.n	800174a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001352:	4b76      	ldr	r3, [pc, #472]	; (800152c <HAL_RCC_OscConfig+0x2ac>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0f0      	beq.n	8001340 <HAL_RCC_OscConfig+0xc0>
 800135e:	e014      	b.n	800138a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001360:	f7ff fcbe 	bl	8000ce0 <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001368:	f7ff fcba 	bl	8000ce0 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b64      	cmp	r3, #100	; 0x64
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e1e7      	b.n	800174a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800137a:	4b6c      	ldr	r3, [pc, #432]	; (800152c <HAL_RCC_OscConfig+0x2ac>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1f0      	bne.n	8001368 <HAL_RCC_OscConfig+0xe8>
 8001386:	e000      	b.n	800138a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d063      	beq.n	800145e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001396:	4b65      	ldr	r3, [pc, #404]	; (800152c <HAL_RCC_OscConfig+0x2ac>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 030c 	and.w	r3, r3, #12
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d00b      	beq.n	80013ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013a2:	4b62      	ldr	r3, [pc, #392]	; (800152c <HAL_RCC_OscConfig+0x2ac>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013aa:	2b08      	cmp	r3, #8
 80013ac:	d11c      	bne.n	80013e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ae:	4b5f      	ldr	r3, [pc, #380]	; (800152c <HAL_RCC_OscConfig+0x2ac>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d116      	bne.n	80013e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ba:	4b5c      	ldr	r3, [pc, #368]	; (800152c <HAL_RCC_OscConfig+0x2ac>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d005      	beq.n	80013d2 <HAL_RCC_OscConfig+0x152>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d001      	beq.n	80013d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e1bb      	b.n	800174a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d2:	4b56      	ldr	r3, [pc, #344]	; (800152c <HAL_RCC_OscConfig+0x2ac>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	4952      	ldr	r1, [pc, #328]	; (800152c <HAL_RCC_OscConfig+0x2ac>)
 80013e2:	4313      	orrs	r3, r2
 80013e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e6:	e03a      	b.n	800145e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d020      	beq.n	8001432 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013f0:	4b4f      	ldr	r3, [pc, #316]	; (8001530 <HAL_RCC_OscConfig+0x2b0>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f6:	f7ff fc73 	bl	8000ce0 <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013fe:	f7ff fc6f 	bl	8000ce0 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e19c      	b.n	800174a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001410:	4b46      	ldr	r3, [pc, #280]	; (800152c <HAL_RCC_OscConfig+0x2ac>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0f0      	beq.n	80013fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141c:	4b43      	ldr	r3, [pc, #268]	; (800152c <HAL_RCC_OscConfig+0x2ac>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	4940      	ldr	r1, [pc, #256]	; (800152c <HAL_RCC_OscConfig+0x2ac>)
 800142c:	4313      	orrs	r3, r2
 800142e:	600b      	str	r3, [r1, #0]
 8001430:	e015      	b.n	800145e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001432:	4b3f      	ldr	r3, [pc, #252]	; (8001530 <HAL_RCC_OscConfig+0x2b0>)
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001438:	f7ff fc52 	bl	8000ce0 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001440:	f7ff fc4e 	bl	8000ce0 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e17b      	b.n	800174a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001452:	4b36      	ldr	r3, [pc, #216]	; (800152c <HAL_RCC_OscConfig+0x2ac>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f0      	bne.n	8001440 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	2b00      	cmp	r3, #0
 8001468:	d030      	beq.n	80014cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d016      	beq.n	80014a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001472:	4b30      	ldr	r3, [pc, #192]	; (8001534 <HAL_RCC_OscConfig+0x2b4>)
 8001474:	2201      	movs	r2, #1
 8001476:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001478:	f7ff fc32 	bl	8000ce0 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001480:	f7ff fc2e 	bl	8000ce0 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e15b      	b.n	800174a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001492:	4b26      	ldr	r3, [pc, #152]	; (800152c <HAL_RCC_OscConfig+0x2ac>)
 8001494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0f0      	beq.n	8001480 <HAL_RCC_OscConfig+0x200>
 800149e:	e015      	b.n	80014cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014a0:	4b24      	ldr	r3, [pc, #144]	; (8001534 <HAL_RCC_OscConfig+0x2b4>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a6:	f7ff fc1b 	bl	8000ce0 <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ae:	f7ff fc17 	bl	8000ce0 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e144      	b.n	800174a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c0:	4b1a      	ldr	r3, [pc, #104]	; (800152c <HAL_RCC_OscConfig+0x2ac>)
 80014c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1f0      	bne.n	80014ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f000 80a0 	beq.w	800161a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014da:	2300      	movs	r3, #0
 80014dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014de:	4b13      	ldr	r3, [pc, #76]	; (800152c <HAL_RCC_OscConfig+0x2ac>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d10f      	bne.n	800150a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <HAL_RCC_OscConfig+0x2ac>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	4a0e      	ldr	r2, [pc, #56]	; (800152c <HAL_RCC_OscConfig+0x2ac>)
 80014f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f8:	6413      	str	r3, [r2, #64]	; 0x40
 80014fa:	4b0c      	ldr	r3, [pc, #48]	; (800152c <HAL_RCC_OscConfig+0x2ac>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001506:	2301      	movs	r3, #1
 8001508:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <HAL_RCC_OscConfig+0x2b8>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001512:	2b00      	cmp	r3, #0
 8001514:	d121      	bne.n	800155a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <HAL_RCC_OscConfig+0x2b8>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a07      	ldr	r2, [pc, #28]	; (8001538 <HAL_RCC_OscConfig+0x2b8>)
 800151c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001520:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001522:	f7ff fbdd 	bl	8000ce0 <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001528:	e011      	b.n	800154e <HAL_RCC_OscConfig+0x2ce>
 800152a:	bf00      	nop
 800152c:	40023800 	.word	0x40023800
 8001530:	42470000 	.word	0x42470000
 8001534:	42470e80 	.word	0x42470e80
 8001538:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800153c:	f7ff fbd0 	bl	8000ce0 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e0fd      	b.n	800174a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154e:	4b81      	ldr	r3, [pc, #516]	; (8001754 <HAL_RCC_OscConfig+0x4d4>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0f0      	beq.n	800153c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d106      	bne.n	8001570 <HAL_RCC_OscConfig+0x2f0>
 8001562:	4b7d      	ldr	r3, [pc, #500]	; (8001758 <HAL_RCC_OscConfig+0x4d8>)
 8001564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001566:	4a7c      	ldr	r2, [pc, #496]	; (8001758 <HAL_RCC_OscConfig+0x4d8>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6713      	str	r3, [r2, #112]	; 0x70
 800156e:	e01c      	b.n	80015aa <HAL_RCC_OscConfig+0x32a>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	2b05      	cmp	r3, #5
 8001576:	d10c      	bne.n	8001592 <HAL_RCC_OscConfig+0x312>
 8001578:	4b77      	ldr	r3, [pc, #476]	; (8001758 <HAL_RCC_OscConfig+0x4d8>)
 800157a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157c:	4a76      	ldr	r2, [pc, #472]	; (8001758 <HAL_RCC_OscConfig+0x4d8>)
 800157e:	f043 0304 	orr.w	r3, r3, #4
 8001582:	6713      	str	r3, [r2, #112]	; 0x70
 8001584:	4b74      	ldr	r3, [pc, #464]	; (8001758 <HAL_RCC_OscConfig+0x4d8>)
 8001586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001588:	4a73      	ldr	r2, [pc, #460]	; (8001758 <HAL_RCC_OscConfig+0x4d8>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6713      	str	r3, [r2, #112]	; 0x70
 8001590:	e00b      	b.n	80015aa <HAL_RCC_OscConfig+0x32a>
 8001592:	4b71      	ldr	r3, [pc, #452]	; (8001758 <HAL_RCC_OscConfig+0x4d8>)
 8001594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001596:	4a70      	ldr	r2, [pc, #448]	; (8001758 <HAL_RCC_OscConfig+0x4d8>)
 8001598:	f023 0301 	bic.w	r3, r3, #1
 800159c:	6713      	str	r3, [r2, #112]	; 0x70
 800159e:	4b6e      	ldr	r3, [pc, #440]	; (8001758 <HAL_RCC_OscConfig+0x4d8>)
 80015a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a2:	4a6d      	ldr	r2, [pc, #436]	; (8001758 <HAL_RCC_OscConfig+0x4d8>)
 80015a4:	f023 0304 	bic.w	r3, r3, #4
 80015a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d015      	beq.n	80015de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b2:	f7ff fb95 	bl	8000ce0 <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015b8:	e00a      	b.n	80015d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ba:	f7ff fb91 	bl	8000ce0 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e0bc      	b.n	800174a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d0:	4b61      	ldr	r3, [pc, #388]	; (8001758 <HAL_RCC_OscConfig+0x4d8>)
 80015d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0ee      	beq.n	80015ba <HAL_RCC_OscConfig+0x33a>
 80015dc:	e014      	b.n	8001608 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015de:	f7ff fb7f 	bl	8000ce0 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e4:	e00a      	b.n	80015fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015e6:	f7ff fb7b 	bl	8000ce0 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e0a6      	b.n	800174a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015fc:	4b56      	ldr	r3, [pc, #344]	; (8001758 <HAL_RCC_OscConfig+0x4d8>)
 80015fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1ee      	bne.n	80015e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001608:	7dfb      	ldrb	r3, [r7, #23]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d105      	bne.n	800161a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800160e:	4b52      	ldr	r3, [pc, #328]	; (8001758 <HAL_RCC_OscConfig+0x4d8>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	4a51      	ldr	r2, [pc, #324]	; (8001758 <HAL_RCC_OscConfig+0x4d8>)
 8001614:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001618:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 8092 	beq.w	8001748 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001624:	4b4c      	ldr	r3, [pc, #304]	; (8001758 <HAL_RCC_OscConfig+0x4d8>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f003 030c 	and.w	r3, r3, #12
 800162c:	2b08      	cmp	r3, #8
 800162e:	d05c      	beq.n	80016ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	2b02      	cmp	r3, #2
 8001636:	d141      	bne.n	80016bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001638:	4b48      	ldr	r3, [pc, #288]	; (800175c <HAL_RCC_OscConfig+0x4dc>)
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163e:	f7ff fb4f 	bl	8000ce0 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001646:	f7ff fb4b 	bl	8000ce0 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e078      	b.n	800174a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001658:	4b3f      	ldr	r3, [pc, #252]	; (8001758 <HAL_RCC_OscConfig+0x4d8>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1f0      	bne.n	8001646 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69da      	ldr	r2, [r3, #28]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a1b      	ldr	r3, [r3, #32]
 800166c:	431a      	orrs	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001672:	019b      	lsls	r3, r3, #6
 8001674:	431a      	orrs	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167a:	085b      	lsrs	r3, r3, #1
 800167c:	3b01      	subs	r3, #1
 800167e:	041b      	lsls	r3, r3, #16
 8001680:	431a      	orrs	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001686:	061b      	lsls	r3, r3, #24
 8001688:	4933      	ldr	r1, [pc, #204]	; (8001758 <HAL_RCC_OscConfig+0x4d8>)
 800168a:	4313      	orrs	r3, r2
 800168c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800168e:	4b33      	ldr	r3, [pc, #204]	; (800175c <HAL_RCC_OscConfig+0x4dc>)
 8001690:	2201      	movs	r2, #1
 8001692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001694:	f7ff fb24 	bl	8000ce0 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800169c:	f7ff fb20 	bl	8000ce0 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e04d      	b.n	800174a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ae:	4b2a      	ldr	r3, [pc, #168]	; (8001758 <HAL_RCC_OscConfig+0x4d8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0f0      	beq.n	800169c <HAL_RCC_OscConfig+0x41c>
 80016ba:	e045      	b.n	8001748 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016bc:	4b27      	ldr	r3, [pc, #156]	; (800175c <HAL_RCC_OscConfig+0x4dc>)
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c2:	f7ff fb0d 	bl	8000ce0 <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ca:	f7ff fb09 	bl	8000ce0 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e036      	b.n	800174a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016dc:	4b1e      	ldr	r3, [pc, #120]	; (8001758 <HAL_RCC_OscConfig+0x4d8>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1f0      	bne.n	80016ca <HAL_RCC_OscConfig+0x44a>
 80016e8:	e02e      	b.n	8001748 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d101      	bne.n	80016f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e029      	b.n	800174a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016f6:	4b18      	ldr	r3, [pc, #96]	; (8001758 <HAL_RCC_OscConfig+0x4d8>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	429a      	cmp	r2, r3
 8001708:	d11c      	bne.n	8001744 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001714:	429a      	cmp	r2, r3
 8001716:	d115      	bne.n	8001744 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800171e:	4013      	ands	r3, r2
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001724:	4293      	cmp	r3, r2
 8001726:	d10d      	bne.n	8001744 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001732:	429a      	cmp	r2, r3
 8001734:	d106      	bne.n	8001744 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001740:	429a      	cmp	r2, r3
 8001742:	d001      	beq.n	8001748 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e000      	b.n	800174a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40007000 	.word	0x40007000
 8001758:	40023800 	.word	0x40023800
 800175c:	42470060 	.word	0x42470060

08001760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e0cc      	b.n	800190e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001774:	4b68      	ldr	r3, [pc, #416]	; (8001918 <HAL_RCC_ClockConfig+0x1b8>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 030f 	and.w	r3, r3, #15
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	d90c      	bls.n	800179c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001782:	4b65      	ldr	r3, [pc, #404]	; (8001918 <HAL_RCC_ClockConfig+0x1b8>)
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800178a:	4b63      	ldr	r3, [pc, #396]	; (8001918 <HAL_RCC_ClockConfig+0x1b8>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 030f 	and.w	r3, r3, #15
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	429a      	cmp	r2, r3
 8001796:	d001      	beq.n	800179c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e0b8      	b.n	800190e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d020      	beq.n	80017ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d005      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017b4:	4b59      	ldr	r3, [pc, #356]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	4a58      	ldr	r2, [pc, #352]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0308 	and.w	r3, r3, #8
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d005      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017cc:	4b53      	ldr	r3, [pc, #332]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	4a52      	ldr	r2, [pc, #328]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017d8:	4b50      	ldr	r3, [pc, #320]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	494d      	ldr	r1, [pc, #308]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d044      	beq.n	8001880 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d107      	bne.n	800180e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fe:	4b47      	ldr	r3, [pc, #284]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d119      	bne.n	800183e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e07f      	b.n	800190e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b02      	cmp	r3, #2
 8001814:	d003      	beq.n	800181e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800181a:	2b03      	cmp	r3, #3
 800181c:	d107      	bne.n	800182e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800181e:	4b3f      	ldr	r3, [pc, #252]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d109      	bne.n	800183e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e06f      	b.n	800190e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800182e:	4b3b      	ldr	r3, [pc, #236]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e067      	b.n	800190e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800183e:	4b37      	ldr	r3, [pc, #220]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f023 0203 	bic.w	r2, r3, #3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	4934      	ldr	r1, [pc, #208]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	4313      	orrs	r3, r2
 800184e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001850:	f7ff fa46 	bl	8000ce0 <HAL_GetTick>
 8001854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001856:	e00a      	b.n	800186e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001858:	f7ff fa42 	bl	8000ce0 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	f241 3288 	movw	r2, #5000	; 0x1388
 8001866:	4293      	cmp	r3, r2
 8001868:	d901      	bls.n	800186e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e04f      	b.n	800190e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186e:	4b2b      	ldr	r3, [pc, #172]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 020c 	and.w	r2, r3, #12
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	429a      	cmp	r2, r3
 800187e:	d1eb      	bne.n	8001858 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001880:	4b25      	ldr	r3, [pc, #148]	; (8001918 <HAL_RCC_ClockConfig+0x1b8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 030f 	and.w	r3, r3, #15
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	d20c      	bcs.n	80018a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188e:	4b22      	ldr	r3, [pc, #136]	; (8001918 <HAL_RCC_ClockConfig+0x1b8>)
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001896:	4b20      	ldr	r3, [pc, #128]	; (8001918 <HAL_RCC_ClockConfig+0x1b8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d001      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e032      	b.n	800190e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d008      	beq.n	80018c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018b4:	4b19      	ldr	r3, [pc, #100]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	4916      	ldr	r1, [pc, #88]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0308 	and.w	r3, r3, #8
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d009      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018d2:	4b12      	ldr	r3, [pc, #72]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	490e      	ldr	r1, [pc, #56]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018e6:	f000 f821 	bl	800192c <HAL_RCC_GetSysClockFreq>
 80018ea:	4601      	mov	r1, r0
 80018ec:	4b0b      	ldr	r3, [pc, #44]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	091b      	lsrs	r3, r3, #4
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <HAL_RCC_ClockConfig+0x1c0>)
 80018f8:	5cd3      	ldrb	r3, [r2, r3]
 80018fa:	fa21 f303 	lsr.w	r3, r1, r3
 80018fe:	4a09      	ldr	r2, [pc, #36]	; (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 8001900:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001902:	4b09      	ldr	r3, [pc, #36]	; (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff f9a6 	bl	8000c58 <HAL_InitTick>

  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40023c00 	.word	0x40023c00
 800191c:	40023800 	.word	0x40023800
 8001920:	08005b08 	.word	0x08005b08
 8001924:	20000000 	.word	0x20000000
 8001928:	20000004 	.word	0x20000004

0800192c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800192c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001932:	2300      	movs	r3, #0
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	2300      	movs	r3, #0
 800193c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001942:	4b50      	ldr	r3, [pc, #320]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x158>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f003 030c 	and.w	r3, r3, #12
 800194a:	2b04      	cmp	r3, #4
 800194c:	d007      	beq.n	800195e <HAL_RCC_GetSysClockFreq+0x32>
 800194e:	2b08      	cmp	r3, #8
 8001950:	d008      	beq.n	8001964 <HAL_RCC_GetSysClockFreq+0x38>
 8001952:	2b00      	cmp	r3, #0
 8001954:	f040 808d 	bne.w	8001a72 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001958:	4b4b      	ldr	r3, [pc, #300]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x15c>)
 800195a:	60bb      	str	r3, [r7, #8]
       break;
 800195c:	e08c      	b.n	8001a78 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800195e:	4b4b      	ldr	r3, [pc, #300]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x160>)
 8001960:	60bb      	str	r3, [r7, #8]
      break;
 8001962:	e089      	b.n	8001a78 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001964:	4b47      	ldr	r3, [pc, #284]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x158>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800196c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800196e:	4b45      	ldr	r3, [pc, #276]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x158>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d023      	beq.n	80019c2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800197a:	4b42      	ldr	r3, [pc, #264]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x158>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	099b      	lsrs	r3, r3, #6
 8001980:	f04f 0400 	mov.w	r4, #0
 8001984:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001988:	f04f 0200 	mov.w	r2, #0
 800198c:	ea03 0501 	and.w	r5, r3, r1
 8001990:	ea04 0602 	and.w	r6, r4, r2
 8001994:	4a3d      	ldr	r2, [pc, #244]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x160>)
 8001996:	fb02 f106 	mul.w	r1, r2, r6
 800199a:	2200      	movs	r2, #0
 800199c:	fb02 f205 	mul.w	r2, r2, r5
 80019a0:	440a      	add	r2, r1
 80019a2:	493a      	ldr	r1, [pc, #232]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x160>)
 80019a4:	fba5 0101 	umull	r0, r1, r5, r1
 80019a8:	1853      	adds	r3, r2, r1
 80019aa:	4619      	mov	r1, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f04f 0400 	mov.w	r4, #0
 80019b2:	461a      	mov	r2, r3
 80019b4:	4623      	mov	r3, r4
 80019b6:	f7fe fc6b 	bl	8000290 <__aeabi_uldivmod>
 80019ba:	4603      	mov	r3, r0
 80019bc:	460c      	mov	r4, r1
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	e049      	b.n	8001a56 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019c2:	4b30      	ldr	r3, [pc, #192]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x158>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	099b      	lsrs	r3, r3, #6
 80019c8:	f04f 0400 	mov.w	r4, #0
 80019cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019d0:	f04f 0200 	mov.w	r2, #0
 80019d4:	ea03 0501 	and.w	r5, r3, r1
 80019d8:	ea04 0602 	and.w	r6, r4, r2
 80019dc:	4629      	mov	r1, r5
 80019de:	4632      	mov	r2, r6
 80019e0:	f04f 0300 	mov.w	r3, #0
 80019e4:	f04f 0400 	mov.w	r4, #0
 80019e8:	0154      	lsls	r4, r2, #5
 80019ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019ee:	014b      	lsls	r3, r1, #5
 80019f0:	4619      	mov	r1, r3
 80019f2:	4622      	mov	r2, r4
 80019f4:	1b49      	subs	r1, r1, r5
 80019f6:	eb62 0206 	sbc.w	r2, r2, r6
 80019fa:	f04f 0300 	mov.w	r3, #0
 80019fe:	f04f 0400 	mov.w	r4, #0
 8001a02:	0194      	lsls	r4, r2, #6
 8001a04:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a08:	018b      	lsls	r3, r1, #6
 8001a0a:	1a5b      	subs	r3, r3, r1
 8001a0c:	eb64 0402 	sbc.w	r4, r4, r2
 8001a10:	f04f 0100 	mov.w	r1, #0
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	00e2      	lsls	r2, r4, #3
 8001a1a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a1e:	00d9      	lsls	r1, r3, #3
 8001a20:	460b      	mov	r3, r1
 8001a22:	4614      	mov	r4, r2
 8001a24:	195b      	adds	r3, r3, r5
 8001a26:	eb44 0406 	adc.w	r4, r4, r6
 8001a2a:	f04f 0100 	mov.w	r1, #0
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	02a2      	lsls	r2, r4, #10
 8001a34:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a38:	0299      	lsls	r1, r3, #10
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4614      	mov	r4, r2
 8001a3e:	4618      	mov	r0, r3
 8001a40:	4621      	mov	r1, r4
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f04f 0400 	mov.w	r4, #0
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4623      	mov	r3, r4
 8001a4c:	f7fe fc20 	bl	8000290 <__aeabi_uldivmod>
 8001a50:	4603      	mov	r3, r0
 8001a52:	460c      	mov	r4, r1
 8001a54:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a56:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x158>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	0c1b      	lsrs	r3, r3, #16
 8001a5c:	f003 0303 	and.w	r3, r3, #3
 8001a60:	3301      	adds	r3, #1
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6e:	60bb      	str	r3, [r7, #8]
      break;
 8001a70:	e002      	b.n	8001a78 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a72:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001a74:	60bb      	str	r3, [r7, #8]
      break;
 8001a76:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a78:	68bb      	ldr	r3, [r7, #8]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800
 8001a88:	00f42400 	.word	0x00f42400
 8001a8c:	017d7840 	.word	0x017d7840

08001a90 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
	...

08001aa0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001aa6:	f3ef 8305 	mrs	r3, IPSR
 8001aaa:	60bb      	str	r3, [r7, #8]
  return(result);
 8001aac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d10f      	bne.n	8001ad2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ab2:	f3ef 8310 	mrs	r3, PRIMASK
 8001ab6:	607b      	str	r3, [r7, #4]
  return(result);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d105      	bne.n	8001aca <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001abe:	f3ef 8311 	mrs	r3, BASEPRI
 8001ac2:	603b      	str	r3, [r7, #0]
  return(result);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d007      	beq.n	8001ada <osKernelInitialize+0x3a>
 8001aca:	4b0e      	ldr	r3, [pc, #56]	; (8001b04 <osKernelInitialize+0x64>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d103      	bne.n	8001ada <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001ad2:	f06f 0305 	mvn.w	r3, #5
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	e00c      	b.n	8001af4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001ada:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <osKernelInitialize+0x64>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d105      	bne.n	8001aee <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001ae2:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <osKernelInitialize+0x64>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	e002      	b.n	8001af4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001aee:	f04f 33ff 	mov.w	r3, #4294967295
 8001af2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001af4:	68fb      	ldr	r3, [r7, #12]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	20000098 	.word	0x20000098

08001b08 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b0e:	f3ef 8305 	mrs	r3, IPSR
 8001b12:	60bb      	str	r3, [r7, #8]
  return(result);
 8001b14:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10f      	bne.n	8001b3a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b1a:	f3ef 8310 	mrs	r3, PRIMASK
 8001b1e:	607b      	str	r3, [r7, #4]
  return(result);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d105      	bne.n	8001b32 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001b26:	f3ef 8311 	mrs	r3, BASEPRI
 8001b2a:	603b      	str	r3, [r7, #0]
  return(result);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d007      	beq.n	8001b42 <osKernelStart+0x3a>
 8001b32:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <osKernelStart+0x68>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d103      	bne.n	8001b42 <osKernelStart+0x3a>
    stat = osErrorISR;
 8001b3a:	f06f 0305 	mvn.w	r3, #5
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	e010      	b.n	8001b64 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001b42:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <osKernelStart+0x68>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d109      	bne.n	8001b5e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001b4a:	f7ff ffa1 	bl	8001a90 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001b4e:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <osKernelStart+0x68>)
 8001b50:	2202      	movs	r2, #2
 8001b52:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001b54:	f001 fa20 	bl	8002f98 <vTaskStartScheduler>
      stat = osOK;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	e002      	b.n	8001b64 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8001b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b62:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001b64:	68fb      	ldr	r3, [r7, #12]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000098 	.word	0x20000098

08001b74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b090      	sub	sp, #64	; 0x40
 8001b78:	af04      	add	r7, sp, #16
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b84:	f3ef 8305 	mrs	r3, IPSR
 8001b88:	61fb      	str	r3, [r7, #28]
  return(result);
 8001b8a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f040 808f 	bne.w	8001cb0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b92:	f3ef 8310 	mrs	r3, PRIMASK
 8001b96:	61bb      	str	r3, [r7, #24]
  return(result);
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d105      	bne.n	8001baa <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001b9e:	f3ef 8311 	mrs	r3, BASEPRI
 8001ba2:	617b      	str	r3, [r7, #20]
  return(result);
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <osThreadNew+0x3e>
 8001baa:	4b44      	ldr	r3, [pc, #272]	; (8001cbc <osThreadNew+0x148>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d07e      	beq.n	8001cb0 <osThreadNew+0x13c>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d07b      	beq.n	8001cb0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8001bbc:	2318      	movs	r3, #24
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8001bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d045      	beq.n	8001c5c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d002      	beq.n	8001bde <osThreadNew+0x6a>
        name = attr->name;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d002      	beq.n	8001bec <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d008      	beq.n	8001c04 <osThreadNew+0x90>
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	2b38      	cmp	r3, #56	; 0x38
 8001bf6:	d805      	bhi.n	8001c04 <osThreadNew+0x90>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <osThreadNew+0x94>
        return (NULL);
 8001c04:	2300      	movs	r3, #0
 8001c06:	e054      	b.n	8001cb2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	695b      	ldr	r3, [r3, #20]
 8001c14:	089b      	lsrs	r3, r3, #2
 8001c16:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d00e      	beq.n	8001c3e <osThreadNew+0xca>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	2b5b      	cmp	r3, #91	; 0x5b
 8001c26:	d90a      	bls.n	8001c3e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d006      	beq.n	8001c3e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d002      	beq.n	8001c3e <osThreadNew+0xca>
        mem = 1;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	623b      	str	r3, [r7, #32]
 8001c3c:	e010      	b.n	8001c60 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10c      	bne.n	8001c60 <osThreadNew+0xec>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d108      	bne.n	8001c60 <osThreadNew+0xec>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d104      	bne.n	8001c60 <osThreadNew+0xec>
          mem = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	623b      	str	r3, [r7, #32]
 8001c5a:	e001      	b.n	8001c60 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8001c60:	6a3b      	ldr	r3, [r7, #32]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d110      	bne.n	8001c88 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001c6e:	9202      	str	r2, [sp, #8]
 8001c70:	9301      	str	r3, [sp, #4]
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f000 ffb9 	bl	8002bf4 <xTaskCreateStatic>
 8001c82:	4603      	mov	r3, r0
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	e013      	b.n	8001cb0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8001c88:	6a3b      	ldr	r3, [r7, #32]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d110      	bne.n	8001cb0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	f107 0310 	add.w	r3, r7, #16
 8001c96:	9301      	str	r3, [sp, #4]
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ca0:	68f8      	ldr	r0, [r7, #12]
 8001ca2:	f001 f801 	bl	8002ca8 <xTaskCreate>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d001      	beq.n	8001cb0 <osThreadNew+0x13c>
          hTask = NULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001cb0:	693b      	ldr	r3, [r7, #16]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3730      	adds	r7, #48	; 0x30
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000098 	.word	0x20000098

08001cc0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001cc8:	f3ef 8305 	mrs	r3, IPSR
 8001ccc:	613b      	str	r3, [r7, #16]
  return(result);
 8001cce:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d10f      	bne.n	8001cf4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001cd4:	f3ef 8310 	mrs	r3, PRIMASK
 8001cd8:	60fb      	str	r3, [r7, #12]
  return(result);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d105      	bne.n	8001cec <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001ce0:	f3ef 8311 	mrs	r3, BASEPRI
 8001ce4:	60bb      	str	r3, [r7, #8]
  return(result);
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d007      	beq.n	8001cfc <osDelay+0x3c>
 8001cec:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <osDelay+0x58>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d103      	bne.n	8001cfc <osDelay+0x3c>
    stat = osErrorISR;
 8001cf4:	f06f 0305 	mvn.w	r3, #5
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	e007      	b.n	8001d0c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d002      	beq.n	8001d0c <osDelay+0x4c>
      vTaskDelay(ticks);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f001 f912 	bl	8002f30 <vTaskDelay>
    }
  }

  return (stat);
 8001d0c:	697b      	ldr	r3, [r7, #20]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000098 	.word	0x20000098

08001d1c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4a07      	ldr	r2, [pc, #28]	; (8001d48 <vApplicationGetIdleTaskMemory+0x2c>)
 8001d2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	4a06      	ldr	r2, [pc, #24]	; (8001d4c <vApplicationGetIdleTaskMemory+0x30>)
 8001d32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2280      	movs	r2, #128	; 0x80
 8001d38:	601a      	str	r2, [r3, #0]
}
 8001d3a:	bf00      	nop
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	2000009c 	.word	0x2000009c
 8001d4c:	200000f8 	.word	0x200000f8

08001d50 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4a07      	ldr	r2, [pc, #28]	; (8001d7c <vApplicationGetTimerTaskMemory+0x2c>)
 8001d60:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	4a06      	ldr	r2, [pc, #24]	; (8001d80 <vApplicationGetTimerTaskMemory+0x30>)
 8001d66:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d6e:	601a      	str	r2, [r3, #0]
}
 8001d70:	bf00      	nop
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	200002f8 	.word	0x200002f8
 8001d80:	20000354 	.word	0x20000354

08001d84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f103 0208 	add.w	r2, r3, #8
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f04f 32ff 	mov.w	r2, #4294967295
 8001d9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f103 0208 	add.w	r2, r3, #8
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f103 0208 	add.w	r2, r3, #8
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001dde:	b480      	push	{r7}
 8001de0:	b085      	sub	sp, #20
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
 8001de6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	1c5a      	adds	r2, r3, #1
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	601a      	str	r2, [r3, #0]
}
 8001e1a:	bf00      	nop
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001e26:	b480      	push	{r7}
 8001e28:	b085      	sub	sp, #20
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e3c:	d103      	bne.n	8001e46 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	e00c      	b.n	8001e60 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3308      	adds	r3, #8
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	e002      	b.n	8001e54 <vListInsert+0x2e>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d2f6      	bcs.n	8001e4e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	1c5a      	adds	r2, r3, #1
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	601a      	str	r2, [r3, #0]
}
 8001e8c:	bf00      	nop
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6892      	ldr	r2, [r2, #8]
 8001eae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6852      	ldr	r2, [r2, #4]
 8001eb8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d103      	bne.n	8001ecc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	1e5a      	subs	r2, r3, #1
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d109      	bne.n	8001f14 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f04:	f383 8811 	msr	BASEPRI, r3
 8001f08:	f3bf 8f6f 	isb	sy
 8001f0c:	f3bf 8f4f 	dsb	sy
 8001f10:	60bb      	str	r3, [r7, #8]
 8001f12:	e7fe      	b.n	8001f12 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8001f14:	f002 faba 	bl	800448c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f20:	68f9      	ldr	r1, [r7, #12]
 8001f22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f24:	fb01 f303 	mul.w	r3, r1, r3
 8001f28:	441a      	add	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f44:	3b01      	subs	r3, #1
 8001f46:	68f9      	ldr	r1, [r7, #12]
 8001f48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f4a:	fb01 f303 	mul.w	r3, r1, r3
 8001f4e:	441a      	add	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	22ff      	movs	r2, #255	; 0xff
 8001f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	22ff      	movs	r2, #255	; 0xff
 8001f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d114      	bne.n	8001f94 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d01a      	beq.n	8001fa8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	3310      	adds	r3, #16
 8001f76:	4618      	mov	r0, r3
 8001f78:	f001 fa8e 	bl	8003498 <xTaskRemoveFromEventList>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d012      	beq.n	8001fa8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001f82:	4b0d      	ldr	r3, [pc, #52]	; (8001fb8 <xQueueGenericReset+0xcc>)
 8001f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	f3bf 8f4f 	dsb	sy
 8001f8e:	f3bf 8f6f 	isb	sy
 8001f92:	e009      	b.n	8001fa8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	3310      	adds	r3, #16
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff fef3 	bl	8001d84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	3324      	adds	r3, #36	; 0x24
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff feee 	bl	8001d84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001fa8:	f002 fa9e 	bl	80044e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001fac:	2301      	movs	r3, #1
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	e000ed04 	.word	0xe000ed04

08001fbc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b08e      	sub	sp, #56	; 0x38
 8001fc0:	af02      	add	r7, sp, #8
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
 8001fc8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d109      	bne.n	8001fe4 <xQueueGenericCreateStatic+0x28>
 8001fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fd4:	f383 8811 	msr	BASEPRI, r3
 8001fd8:	f3bf 8f6f 	isb	sy
 8001fdc:	f3bf 8f4f 	dsb	sy
 8001fe0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fe2:	e7fe      	b.n	8001fe2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d109      	bne.n	8001ffe <xQueueGenericCreateStatic+0x42>
 8001fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fee:	f383 8811 	msr	BASEPRI, r3
 8001ff2:	f3bf 8f6f 	isb	sy
 8001ff6:	f3bf 8f4f 	dsb	sy
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8001ffc:	e7fe      	b.n	8001ffc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d002      	beq.n	800200a <xQueueGenericCreateStatic+0x4e>
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <xQueueGenericCreateStatic+0x52>
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <xQueueGenericCreateStatic+0x54>
 800200e:	2300      	movs	r3, #0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d109      	bne.n	8002028 <xQueueGenericCreateStatic+0x6c>
 8002014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002018:	f383 8811 	msr	BASEPRI, r3
 800201c:	f3bf 8f6f 	isb	sy
 8002020:	f3bf 8f4f 	dsb	sy
 8002024:	623b      	str	r3, [r7, #32]
 8002026:	e7fe      	b.n	8002026 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d102      	bne.n	8002034 <xQueueGenericCreateStatic+0x78>
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <xQueueGenericCreateStatic+0x7c>
 8002034:	2301      	movs	r3, #1
 8002036:	e000      	b.n	800203a <xQueueGenericCreateStatic+0x7e>
 8002038:	2300      	movs	r3, #0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d109      	bne.n	8002052 <xQueueGenericCreateStatic+0x96>
 800203e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002042:	f383 8811 	msr	BASEPRI, r3
 8002046:	f3bf 8f6f 	isb	sy
 800204a:	f3bf 8f4f 	dsb	sy
 800204e:	61fb      	str	r3, [r7, #28]
 8002050:	e7fe      	b.n	8002050 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002052:	2350      	movs	r3, #80	; 0x50
 8002054:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	2b50      	cmp	r3, #80	; 0x50
 800205a:	d009      	beq.n	8002070 <xQueueGenericCreateStatic+0xb4>
 800205c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002060:	f383 8811 	msr	BASEPRI, r3
 8002064:	f3bf 8f6f 	isb	sy
 8002068:	f3bf 8f4f 	dsb	sy
 800206c:	61bb      	str	r3, [r7, #24]
 800206e:	e7fe      	b.n	800206e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002070:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00d      	beq.n	8002098 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800207c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002084:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	4613      	mov	r3, r2
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	68b9      	ldr	r1, [r7, #8]
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 f844 	bl	8002120 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800209a:	4618      	mov	r0, r3
 800209c:	3730      	adds	r7, #48	; 0x30
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b08a      	sub	sp, #40	; 0x28
 80020a6:	af02      	add	r7, sp, #8
 80020a8:	60f8      	str	r0, [r7, #12]
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	4613      	mov	r3, r2
 80020ae:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d109      	bne.n	80020ca <xQueueGenericCreate+0x28>
 80020b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ba:	f383 8811 	msr	BASEPRI, r3
 80020be:	f3bf 8f6f 	isb	sy
 80020c2:	f3bf 8f4f 	dsb	sy
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	e7fe      	b.n	80020c8 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d102      	bne.n	80020d6 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61fb      	str	r3, [r7, #28]
 80020d4:	e004      	b.n	80020e0 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	68ba      	ldr	r2, [r7, #8]
 80020da:	fb02 f303 	mul.w	r3, r2, r3
 80020de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	3350      	adds	r3, #80	; 0x50
 80020e4:	4618      	mov	r0, r3
 80020e6:	f002 faeb 	bl	80046c0 <pvPortMalloc>
 80020ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d011      	beq.n	8002116 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	3350      	adds	r3, #80	; 0x50
 80020fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002104:	79fa      	ldrb	r2, [r7, #7]
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	9300      	str	r3, [sp, #0]
 800210a:	4613      	mov	r3, r2
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	68b9      	ldr	r1, [r7, #8]
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f000 f805 	bl	8002120 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002116:	69bb      	ldr	r3, [r7, #24]
	}
 8002118:	4618      	mov	r0, r3
 800211a:	3720      	adds	r7, #32
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
 800212c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d103      	bne.n	800213c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	e002      	b.n	8002142 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800214e:	2101      	movs	r1, #1
 8002150:	69b8      	ldr	r0, [r7, #24]
 8002152:	f7ff fecb 	bl	8001eec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	78fa      	ldrb	r2, [r7, #3]
 800215a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800215e:	bf00      	nop
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00e      	beq.n	8002192 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002186:	2300      	movs	r3, #0
 8002188:	2200      	movs	r2, #0
 800218a:	2100      	movs	r1, #0
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f81d 	bl	80021cc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800219a:	b580      	push	{r7, lr}
 800219c:	b086      	sub	sp, #24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	4603      	mov	r3, r0
 80021a2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80021a4:	2301      	movs	r3, #1
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	2300      	movs	r3, #0
 80021aa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80021ac:	79fb      	ldrb	r3, [r7, #7]
 80021ae:	461a      	mov	r2, r3
 80021b0:	6939      	ldr	r1, [r7, #16]
 80021b2:	6978      	ldr	r0, [r7, #20]
 80021b4:	f7ff ff75 	bl	80020a2 <xQueueGenericCreate>
 80021b8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f7ff ffd3 	bl	8002166 <prvInitialiseMutex>

		return xNewQueue;
 80021c0:	68fb      	ldr	r3, [r7, #12]
	}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3718      	adds	r7, #24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08e      	sub	sp, #56	; 0x38
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
 80021d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80021da:	2300      	movs	r3, #0
 80021dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80021e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d109      	bne.n	80021fc <xQueueGenericSend+0x30>
 80021e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ec:	f383 8811 	msr	BASEPRI, r3
 80021f0:	f3bf 8f6f 	isb	sy
 80021f4:	f3bf 8f4f 	dsb	sy
 80021f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80021fa:	e7fe      	b.n	80021fa <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d103      	bne.n	800220a <xQueueGenericSend+0x3e>
 8002202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <xQueueGenericSend+0x42>
 800220a:	2301      	movs	r3, #1
 800220c:	e000      	b.n	8002210 <xQueueGenericSend+0x44>
 800220e:	2300      	movs	r3, #0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d109      	bne.n	8002228 <xQueueGenericSend+0x5c>
 8002214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002218:	f383 8811 	msr	BASEPRI, r3
 800221c:	f3bf 8f6f 	isb	sy
 8002220:	f3bf 8f4f 	dsb	sy
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
 8002226:	e7fe      	b.n	8002226 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d103      	bne.n	8002236 <xQueueGenericSend+0x6a>
 800222e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002232:	2b01      	cmp	r3, #1
 8002234:	d101      	bne.n	800223a <xQueueGenericSend+0x6e>
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <xQueueGenericSend+0x70>
 800223a:	2300      	movs	r3, #0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d109      	bne.n	8002254 <xQueueGenericSend+0x88>
 8002240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002244:	f383 8811 	msr	BASEPRI, r3
 8002248:	f3bf 8f6f 	isb	sy
 800224c:	f3bf 8f4f 	dsb	sy
 8002250:	623b      	str	r3, [r7, #32]
 8002252:	e7fe      	b.n	8002252 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002254:	f001 fad6 	bl	8003804 <xTaskGetSchedulerState>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d102      	bne.n	8002264 <xQueueGenericSend+0x98>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <xQueueGenericSend+0x9c>
 8002264:	2301      	movs	r3, #1
 8002266:	e000      	b.n	800226a <xQueueGenericSend+0x9e>
 8002268:	2300      	movs	r3, #0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d109      	bne.n	8002282 <xQueueGenericSend+0xb6>
 800226e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002272:	f383 8811 	msr	BASEPRI, r3
 8002276:	f3bf 8f6f 	isb	sy
 800227a:	f3bf 8f4f 	dsb	sy
 800227e:	61fb      	str	r3, [r7, #28]
 8002280:	e7fe      	b.n	8002280 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002282:	f002 f903 	bl	800448c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002288:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800228a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228e:	429a      	cmp	r2, r3
 8002290:	d302      	bcc.n	8002298 <xQueueGenericSend+0xcc>
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	2b02      	cmp	r3, #2
 8002296:	d129      	bne.n	80022ec <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	68b9      	ldr	r1, [r7, #8]
 800229c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800229e:	f000 fb3c 	bl	800291a <prvCopyDataToQueue>
 80022a2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d010      	beq.n	80022ce <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ae:	3324      	adds	r3, #36	; 0x24
 80022b0:	4618      	mov	r0, r3
 80022b2:	f001 f8f1 	bl	8003498 <xTaskRemoveFromEventList>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d013      	beq.n	80022e4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80022bc:	4b3f      	ldr	r3, [pc, #252]	; (80023bc <xQueueGenericSend+0x1f0>)
 80022be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	f3bf 8f4f 	dsb	sy
 80022c8:	f3bf 8f6f 	isb	sy
 80022cc:	e00a      	b.n	80022e4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80022ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d007      	beq.n	80022e4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80022d4:	4b39      	ldr	r3, [pc, #228]	; (80023bc <xQueueGenericSend+0x1f0>)
 80022d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	f3bf 8f4f 	dsb	sy
 80022e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80022e4:	f002 f900 	bl	80044e8 <vPortExitCritical>
				return pdPASS;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e063      	b.n	80023b4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d103      	bne.n	80022fa <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80022f2:	f002 f8f9 	bl	80044e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	e05c      	b.n	80023b4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80022fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d106      	bne.n	800230e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002300:	f107 0314 	add.w	r3, r7, #20
 8002304:	4618      	mov	r0, r3
 8002306:	f001 f929 	bl	800355c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800230a:	2301      	movs	r3, #1
 800230c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800230e:	f002 f8eb 	bl	80044e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002312:	f000 fea5 	bl	8003060 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002316:	f002 f8b9 	bl	800448c <vPortEnterCritical>
 800231a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002320:	b25b      	sxtb	r3, r3
 8002322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002326:	d103      	bne.n	8002330 <xQueueGenericSend+0x164>
 8002328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002332:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002336:	b25b      	sxtb	r3, r3
 8002338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233c:	d103      	bne.n	8002346 <xQueueGenericSend+0x17a>
 800233e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002346:	f002 f8cf 	bl	80044e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800234a:	1d3a      	adds	r2, r7, #4
 800234c:	f107 0314 	add.w	r3, r7, #20
 8002350:	4611      	mov	r1, r2
 8002352:	4618      	mov	r0, r3
 8002354:	f001 f918 	bl	8003588 <xTaskCheckForTimeOut>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d124      	bne.n	80023a8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800235e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002360:	f000 fbd3 	bl	8002b0a <prvIsQueueFull>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d018      	beq.n	800239c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800236a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236c:	3310      	adds	r3, #16
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	4611      	mov	r1, r2
 8002372:	4618      	mov	r0, r3
 8002374:	f001 f842 	bl	80033fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002378:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800237a:	f000 fb5e 	bl	8002a3a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800237e:	f000 fe7d 	bl	800307c <xTaskResumeAll>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	f47f af7c 	bne.w	8002282 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800238a:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <xQueueGenericSend+0x1f0>)
 800238c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	f3bf 8f4f 	dsb	sy
 8002396:	f3bf 8f6f 	isb	sy
 800239a:	e772      	b.n	8002282 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800239c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800239e:	f000 fb4c 	bl	8002a3a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80023a2:	f000 fe6b 	bl	800307c <xTaskResumeAll>
 80023a6:	e76c      	b.n	8002282 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80023a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023aa:	f000 fb46 	bl	8002a3a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80023ae:	f000 fe65 	bl	800307c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80023b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3738      	adds	r7, #56	; 0x38
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	e000ed04 	.word	0xe000ed04

080023c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08e      	sub	sp, #56	; 0x38
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
 80023cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80023d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d109      	bne.n	80023ec <xQueueGenericSendFromISR+0x2c>
 80023d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023dc:	f383 8811 	msr	BASEPRI, r3
 80023e0:	f3bf 8f6f 	isb	sy
 80023e4:	f3bf 8f4f 	dsb	sy
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24
 80023ea:	e7fe      	b.n	80023ea <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d103      	bne.n	80023fa <xQueueGenericSendFromISR+0x3a>
 80023f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <xQueueGenericSendFromISR+0x3e>
 80023fa:	2301      	movs	r3, #1
 80023fc:	e000      	b.n	8002400 <xQueueGenericSendFromISR+0x40>
 80023fe:	2300      	movs	r3, #0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d109      	bne.n	8002418 <xQueueGenericSendFromISR+0x58>
 8002404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002408:	f383 8811 	msr	BASEPRI, r3
 800240c:	f3bf 8f6f 	isb	sy
 8002410:	f3bf 8f4f 	dsb	sy
 8002414:	623b      	str	r3, [r7, #32]
 8002416:	e7fe      	b.n	8002416 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	2b02      	cmp	r3, #2
 800241c:	d103      	bne.n	8002426 <xQueueGenericSendFromISR+0x66>
 800241e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002422:	2b01      	cmp	r3, #1
 8002424:	d101      	bne.n	800242a <xQueueGenericSendFromISR+0x6a>
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <xQueueGenericSendFromISR+0x6c>
 800242a:	2300      	movs	r3, #0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d109      	bne.n	8002444 <xQueueGenericSendFromISR+0x84>
 8002430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002434:	f383 8811 	msr	BASEPRI, r3
 8002438:	f3bf 8f6f 	isb	sy
 800243c:	f3bf 8f4f 	dsb	sy
 8002440:	61fb      	str	r3, [r7, #28]
 8002442:	e7fe      	b.n	8002442 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002444:	f002 f8fe 	bl	8004644 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002448:	f3ef 8211 	mrs	r2, BASEPRI
 800244c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002450:	f383 8811 	msr	BASEPRI, r3
 8002454:	f3bf 8f6f 	isb	sy
 8002458:	f3bf 8f4f 	dsb	sy
 800245c:	61ba      	str	r2, [r7, #24]
 800245e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002460:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002462:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002466:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800246c:	429a      	cmp	r2, r3
 800246e:	d302      	bcc.n	8002476 <xQueueGenericSendFromISR+0xb6>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d12c      	bne.n	80024d0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002478:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800247c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	68b9      	ldr	r1, [r7, #8]
 8002484:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002486:	f000 fa48 	bl	800291a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800248a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800248e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002492:	d112      	bne.n	80024ba <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	2b00      	cmp	r3, #0
 800249a:	d016      	beq.n	80024ca <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800249c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249e:	3324      	adds	r3, #36	; 0x24
 80024a0:	4618      	mov	r0, r3
 80024a2:	f000 fff9 	bl	8003498 <xTaskRemoveFromEventList>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00e      	beq.n	80024ca <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00b      	beq.n	80024ca <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	e007      	b.n	80024ca <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80024ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80024be:	3301      	adds	r3, #1
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	b25a      	sxtb	r2, r3
 80024c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80024ca:	2301      	movs	r3, #1
 80024cc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80024ce:	e001      	b.n	80024d4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	637b      	str	r3, [r7, #52]	; 0x34
 80024d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80024de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3738      	adds	r7, #56	; 0x38
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08c      	sub	sp, #48	; 0x30
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80024f4:	2300      	movs	r3, #0
 80024f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80024fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d109      	bne.n	8002516 <xQueueReceive+0x2e>
	__asm volatile
 8002502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002506:	f383 8811 	msr	BASEPRI, r3
 800250a:	f3bf 8f6f 	isb	sy
 800250e:	f3bf 8f4f 	dsb	sy
 8002512:	623b      	str	r3, [r7, #32]
 8002514:	e7fe      	b.n	8002514 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d103      	bne.n	8002524 <xQueueReceive+0x3c>
 800251c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <xQueueReceive+0x40>
 8002524:	2301      	movs	r3, #1
 8002526:	e000      	b.n	800252a <xQueueReceive+0x42>
 8002528:	2300      	movs	r3, #0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d109      	bne.n	8002542 <xQueueReceive+0x5a>
 800252e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002532:	f383 8811 	msr	BASEPRI, r3
 8002536:	f3bf 8f6f 	isb	sy
 800253a:	f3bf 8f4f 	dsb	sy
 800253e:	61fb      	str	r3, [r7, #28]
 8002540:	e7fe      	b.n	8002540 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002542:	f001 f95f 	bl	8003804 <xTaskGetSchedulerState>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d102      	bne.n	8002552 <xQueueReceive+0x6a>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <xQueueReceive+0x6e>
 8002552:	2301      	movs	r3, #1
 8002554:	e000      	b.n	8002558 <xQueueReceive+0x70>
 8002556:	2300      	movs	r3, #0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d109      	bne.n	8002570 <xQueueReceive+0x88>
 800255c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002560:	f383 8811 	msr	BASEPRI, r3
 8002564:	f3bf 8f6f 	isb	sy
 8002568:	f3bf 8f4f 	dsb	sy
 800256c:	61bb      	str	r3, [r7, #24]
 800256e:	e7fe      	b.n	800256e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002570:	f001 ff8c 	bl	800448c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002578:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	2b00      	cmp	r3, #0
 800257e:	d01f      	beq.n	80025c0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002580:	68b9      	ldr	r1, [r7, #8]
 8002582:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002584:	f000 fa33 	bl	80029ee <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	1e5a      	subs	r2, r3, #1
 800258c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800258e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00f      	beq.n	80025b8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259a:	3310      	adds	r3, #16
 800259c:	4618      	mov	r0, r3
 800259e:	f000 ff7b 	bl	8003498 <xTaskRemoveFromEventList>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d007      	beq.n	80025b8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80025a8:	4b3c      	ldr	r3, [pc, #240]	; (800269c <xQueueReceive+0x1b4>)
 80025aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	f3bf 8f4f 	dsb	sy
 80025b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80025b8:	f001 ff96 	bl	80044e8 <vPortExitCritical>
				return pdPASS;
 80025bc:	2301      	movs	r3, #1
 80025be:	e069      	b.n	8002694 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d103      	bne.n	80025ce <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80025c6:	f001 ff8f 	bl	80044e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80025ca:	2300      	movs	r3, #0
 80025cc:	e062      	b.n	8002694 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80025ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d106      	bne.n	80025e2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80025d4:	f107 0310 	add.w	r3, r7, #16
 80025d8:	4618      	mov	r0, r3
 80025da:	f000 ffbf 	bl	800355c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80025de:	2301      	movs	r3, #1
 80025e0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80025e2:	f001 ff81 	bl	80044e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80025e6:	f000 fd3b 	bl	8003060 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80025ea:	f001 ff4f 	bl	800448c <vPortEnterCritical>
 80025ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025f4:	b25b      	sxtb	r3, r3
 80025f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fa:	d103      	bne.n	8002604 <xQueueReceive+0x11c>
 80025fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002606:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800260a:	b25b      	sxtb	r3, r3
 800260c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002610:	d103      	bne.n	800261a <xQueueReceive+0x132>
 8002612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800261a:	f001 ff65 	bl	80044e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800261e:	1d3a      	adds	r2, r7, #4
 8002620:	f107 0310 	add.w	r3, r7, #16
 8002624:	4611      	mov	r1, r2
 8002626:	4618      	mov	r0, r3
 8002628:	f000 ffae 	bl	8003588 <xTaskCheckForTimeOut>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d123      	bne.n	800267a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002632:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002634:	f000 fa53 	bl	8002ade <prvIsQueueEmpty>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d017      	beq.n	800266e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800263e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002640:	3324      	adds	r3, #36	; 0x24
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	4611      	mov	r1, r2
 8002646:	4618      	mov	r0, r3
 8002648:	f000 fed8 	bl	80033fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800264c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800264e:	f000 f9f4 	bl	8002a3a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002652:	f000 fd13 	bl	800307c <xTaskResumeAll>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d189      	bne.n	8002570 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800265c:	4b0f      	ldr	r3, [pc, #60]	; (800269c <xQueueReceive+0x1b4>)
 800265e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	f3bf 8f4f 	dsb	sy
 8002668:	f3bf 8f6f 	isb	sy
 800266c:	e780      	b.n	8002570 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800266e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002670:	f000 f9e3 	bl	8002a3a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002674:	f000 fd02 	bl	800307c <xTaskResumeAll>
 8002678:	e77a      	b.n	8002570 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800267a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800267c:	f000 f9dd 	bl	8002a3a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002680:	f000 fcfc 	bl	800307c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002684:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002686:	f000 fa2a 	bl	8002ade <prvIsQueueEmpty>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	f43f af6f 	beq.w	8002570 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002692:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002694:	4618      	mov	r0, r3
 8002696:	3730      	adds	r7, #48	; 0x30
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	e000ed04 	.word	0xe000ed04

080026a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08e      	sub	sp, #56	; 0x38
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80026aa:	2300      	movs	r3, #0
 80026ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80026b2:	2300      	movs	r3, #0
 80026b4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80026b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d109      	bne.n	80026d0 <xQueueSemaphoreTake+0x30>
 80026bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c0:	f383 8811 	msr	BASEPRI, r3
 80026c4:	f3bf 8f6f 	isb	sy
 80026c8:	f3bf 8f4f 	dsb	sy
 80026cc:	623b      	str	r3, [r7, #32]
 80026ce:	e7fe      	b.n	80026ce <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80026d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d009      	beq.n	80026ec <xQueueSemaphoreTake+0x4c>
 80026d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026dc:	f383 8811 	msr	BASEPRI, r3
 80026e0:	f3bf 8f6f 	isb	sy
 80026e4:	f3bf 8f4f 	dsb	sy
 80026e8:	61fb      	str	r3, [r7, #28]
 80026ea:	e7fe      	b.n	80026ea <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80026ec:	f001 f88a 	bl	8003804 <xTaskGetSchedulerState>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d102      	bne.n	80026fc <xQueueSemaphoreTake+0x5c>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <xQueueSemaphoreTake+0x60>
 80026fc:	2301      	movs	r3, #1
 80026fe:	e000      	b.n	8002702 <xQueueSemaphoreTake+0x62>
 8002700:	2300      	movs	r3, #0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d109      	bne.n	800271a <xQueueSemaphoreTake+0x7a>
 8002706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800270a:	f383 8811 	msr	BASEPRI, r3
 800270e:	f3bf 8f6f 	isb	sy
 8002712:	f3bf 8f4f 	dsb	sy
 8002716:	61bb      	str	r3, [r7, #24]
 8002718:	e7fe      	b.n	8002718 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800271a:	f001 feb7 	bl	800448c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800271e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002722:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002726:	2b00      	cmp	r3, #0
 8002728:	d024      	beq.n	8002774 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800272a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272c:	1e5a      	subs	r2, r3, #1
 800272e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002730:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d104      	bne.n	8002744 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800273a:	f001 f9d5 	bl	8003ae8 <pvTaskIncrementMutexHeldCount>
 800273e:	4602      	mov	r2, r0
 8002740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002742:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00f      	beq.n	800276c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800274c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274e:	3310      	adds	r3, #16
 8002750:	4618      	mov	r0, r3
 8002752:	f000 fea1 	bl	8003498 <xTaskRemoveFromEventList>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d007      	beq.n	800276c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800275c:	4b53      	ldr	r3, [pc, #332]	; (80028ac <xQueueSemaphoreTake+0x20c>)
 800275e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	f3bf 8f4f 	dsb	sy
 8002768:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800276c:	f001 febc 	bl	80044e8 <vPortExitCritical>
				return pdPASS;
 8002770:	2301      	movs	r3, #1
 8002772:	e096      	b.n	80028a2 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d110      	bne.n	800279c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800277a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277c:	2b00      	cmp	r3, #0
 800277e:	d009      	beq.n	8002794 <xQueueSemaphoreTake+0xf4>
 8002780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002784:	f383 8811 	msr	BASEPRI, r3
 8002788:	f3bf 8f6f 	isb	sy
 800278c:	f3bf 8f4f 	dsb	sy
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	e7fe      	b.n	8002792 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002794:	f001 fea8 	bl	80044e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002798:	2300      	movs	r3, #0
 800279a:	e082      	b.n	80028a2 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800279c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d106      	bne.n	80027b0 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80027a2:	f107 030c 	add.w	r3, r7, #12
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 fed8 	bl	800355c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80027ac:	2301      	movs	r3, #1
 80027ae:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80027b0:	f001 fe9a 	bl	80044e8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80027b4:	f000 fc54 	bl	8003060 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80027b8:	f001 fe68 	bl	800448c <vPortEnterCritical>
 80027bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027c2:	b25b      	sxtb	r3, r3
 80027c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c8:	d103      	bne.n	80027d2 <xQueueSemaphoreTake+0x132>
 80027ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027d8:	b25b      	sxtb	r3, r3
 80027da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027de:	d103      	bne.n	80027e8 <xQueueSemaphoreTake+0x148>
 80027e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027e8:	f001 fe7e 	bl	80044e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027ec:	463a      	mov	r2, r7
 80027ee:	f107 030c 	add.w	r3, r7, #12
 80027f2:	4611      	mov	r1, r2
 80027f4:	4618      	mov	r0, r3
 80027f6:	f000 fec7 	bl	8003588 <xTaskCheckForTimeOut>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d132      	bne.n	8002866 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002800:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002802:	f000 f96c 	bl	8002ade <prvIsQueueEmpty>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d026      	beq.n	800285a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800280c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d109      	bne.n	8002828 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8002814:	f001 fe3a 	bl	800448c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	4618      	mov	r0, r3
 800281e:	f001 f80f 	bl	8003840 <xTaskPriorityInherit>
 8002822:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002824:	f001 fe60 	bl	80044e8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282a:	3324      	adds	r3, #36	; 0x24
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	4611      	mov	r1, r2
 8002830:	4618      	mov	r0, r3
 8002832:	f000 fde3 	bl	80033fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002836:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002838:	f000 f8ff 	bl	8002a3a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800283c:	f000 fc1e 	bl	800307c <xTaskResumeAll>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	f47f af69 	bne.w	800271a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8002848:	4b18      	ldr	r3, [pc, #96]	; (80028ac <xQueueSemaphoreTake+0x20c>)
 800284a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	f3bf 8f4f 	dsb	sy
 8002854:	f3bf 8f6f 	isb	sy
 8002858:	e75f      	b.n	800271a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800285a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800285c:	f000 f8ed 	bl	8002a3a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002860:	f000 fc0c 	bl	800307c <xTaskResumeAll>
 8002864:	e759      	b.n	800271a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002866:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002868:	f000 f8e7 	bl	8002a3a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800286c:	f000 fc06 	bl	800307c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002870:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002872:	f000 f934 	bl	8002ade <prvIsQueueEmpty>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	f43f af4e 	beq.w	800271a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800287e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00d      	beq.n	80028a0 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8002884:	f001 fe02 	bl	800448c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002888:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800288a:	f000 f82e 	bl	80028ea <prvGetDisinheritPriorityAfterTimeout>
 800288e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002896:	4618      	mov	r0, r3
 8002898:	f001 f8a6 	bl	80039e8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800289c:	f001 fe24 	bl	80044e8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80028a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3738      	adds	r7, #56	; 0x38
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	e000ed04 	.word	0xe000ed04

080028b0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d109      	bne.n	80028d2 <uxQueueMessagesWaiting+0x22>
 80028be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c2:	f383 8811 	msr	BASEPRI, r3
 80028c6:	f3bf 8f6f 	isb	sy
 80028ca:	f3bf 8f4f 	dsb	sy
 80028ce:	60bb      	str	r3, [r7, #8]
 80028d0:	e7fe      	b.n	80028d0 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 80028d2:	f001 fddb 	bl	800448c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028da:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80028dc:	f001 fe04 	bl	80044e8 <vPortExitCritical>

	return uxReturn;
 80028e0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80028e2:	4618      	mov	r0, r3
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80028ea:	b480      	push	{r7}
 80028ec:	b085      	sub	sp, #20
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d006      	beq.n	8002908 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	e001      	b.n	800290c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002908:	2300      	movs	r3, #0
 800290a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800290c:	68fb      	ldr	r3, [r7, #12]
	}
 800290e:	4618      	mov	r0, r3
 8002910:	3714      	adds	r7, #20
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b086      	sub	sp, #24
 800291e:	af00      	add	r7, sp, #0
 8002920:	60f8      	str	r0, [r7, #12]
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002926:	2300      	movs	r3, #0
 8002928:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	2b00      	cmp	r3, #0
 8002936:	d10d      	bne.n	8002954 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d14d      	bne.n	80029dc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	4618      	mov	r0, r3
 8002946:	f000 ffe3 	bl	8003910 <xTaskPriorityDisinherit>
 800294a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	609a      	str	r2, [r3, #8]
 8002952:	e043      	b.n	80029dc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d119      	bne.n	800298e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6858      	ldr	r0, [r3, #4]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	461a      	mov	r2, r3
 8002964:	68b9      	ldr	r1, [r7, #8]
 8002966:	f002 f8ab 	bl	8004ac0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	441a      	add	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	429a      	cmp	r2, r3
 8002982:	d32b      	bcc.n	80029dc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	605a      	str	r2, [r3, #4]
 800298c:	e026      	b.n	80029dc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	68d8      	ldr	r0, [r3, #12]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	461a      	mov	r2, r3
 8002998:	68b9      	ldr	r1, [r7, #8]
 800299a:	f002 f891 	bl	8004ac0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	425b      	negs	r3, r3
 80029a8:	441a      	add	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d207      	bcs.n	80029ca <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	425b      	negs	r3, r3
 80029c4:	441a      	add	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d105      	bne.n	80029dc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d002      	beq.n	80029dc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	3b01      	subs	r3, #1
 80029da:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80029e4:	697b      	ldr	r3, [r7, #20]
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
 80029f6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d018      	beq.n	8002a32 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68da      	ldr	r2, [r3, #12]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	441a      	add	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d303      	bcc.n	8002a22 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68d9      	ldr	r1, [r3, #12]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	6838      	ldr	r0, [r7, #0]
 8002a2e:	f002 f847 	bl	8004ac0 <memcpy>
	}
}
 8002a32:	bf00      	nop
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b084      	sub	sp, #16
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002a42:	f001 fd23 	bl	800448c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a4c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a4e:	e011      	b.n	8002a74 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d012      	beq.n	8002a7e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3324      	adds	r3, #36	; 0x24
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f000 fd1b 	bl	8003498 <xTaskRemoveFromEventList>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002a68:	f000 fdee 	bl	8003648 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	dce9      	bgt.n	8002a50 <prvUnlockQueue+0x16>
 8002a7c:	e000      	b.n	8002a80 <prvUnlockQueue+0x46>
					break;
 8002a7e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	22ff      	movs	r2, #255	; 0xff
 8002a84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002a88:	f001 fd2e 	bl	80044e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002a8c:	f001 fcfe 	bl	800448c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a96:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a98:	e011      	b.n	8002abe <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d012      	beq.n	8002ac8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3310      	adds	r3, #16
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 fcf6 	bl	8003498 <xTaskRemoveFromEventList>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002ab2:	f000 fdc9 	bl	8003648 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002ab6:	7bbb      	ldrb	r3, [r7, #14]
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002abe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	dce9      	bgt.n	8002a9a <prvUnlockQueue+0x60>
 8002ac6:	e000      	b.n	8002aca <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002ac8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	22ff      	movs	r2, #255	; 0xff
 8002ace:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002ad2:	f001 fd09 	bl	80044e8 <vPortExitCritical>
}
 8002ad6:	bf00      	nop
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b084      	sub	sp, #16
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ae6:	f001 fcd1 	bl	800448c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d102      	bne.n	8002af8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002af2:	2301      	movs	r3, #1
 8002af4:	60fb      	str	r3, [r7, #12]
 8002af6:	e001      	b.n	8002afc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002af8:	2300      	movs	r3, #0
 8002afa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002afc:	f001 fcf4 	bl	80044e8 <vPortExitCritical>

	return xReturn;
 8002b00:	68fb      	ldr	r3, [r7, #12]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b084      	sub	sp, #16
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b12:	f001 fcbb 	bl	800448c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d102      	bne.n	8002b28 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002b22:	2301      	movs	r3, #1
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	e001      	b.n	8002b2c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b2c:	f001 fcdc 	bl	80044e8 <vPortExitCritical>

	return xReturn;
 8002b30:	68fb      	ldr	r3, [r7, #12]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
	...

08002b3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b46:	2300      	movs	r3, #0
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	e014      	b.n	8002b76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002b4c:	4a0e      	ldr	r2, [pc, #56]	; (8002b88 <vQueueAddToRegistry+0x4c>)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10b      	bne.n	8002b70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002b58:	490b      	ldr	r1, [pc, #44]	; (8002b88 <vQueueAddToRegistry+0x4c>)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002b62:	4a09      	ldr	r2, [pc, #36]	; (8002b88 <vQueueAddToRegistry+0x4c>)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	4413      	add	r3, r2
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002b6e:	e005      	b.n	8002b7c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	3301      	adds	r3, #1
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2b07      	cmp	r3, #7
 8002b7a:	d9e7      	bls.n	8002b4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002b7c:	bf00      	nop
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	200049c0 	.word	0x200049c0

08002b8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002b9c:	f001 fc76 	bl	800448c <vPortEnterCritical>
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ba6:	b25b      	sxtb	r3, r3
 8002ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bac:	d103      	bne.n	8002bb6 <vQueueWaitForMessageRestricted+0x2a>
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bbc:	b25b      	sxtb	r3, r3
 8002bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc2:	d103      	bne.n	8002bcc <vQueueWaitForMessageRestricted+0x40>
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bcc:	f001 fc8c 	bl	80044e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d106      	bne.n	8002be6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	3324      	adds	r3, #36	; 0x24
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	68b9      	ldr	r1, [r7, #8]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f000 fc2f 	bl	8003444 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002be6:	6978      	ldr	r0, [r7, #20]
 8002be8:	f7ff ff27 	bl	8002a3a <prvUnlockQueue>
	}
 8002bec:	bf00      	nop
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08e      	sub	sp, #56	; 0x38
 8002bf8:	af04      	add	r7, sp, #16
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d109      	bne.n	8002c1c <xTaskCreateStatic+0x28>
 8002c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0c:	f383 8811 	msr	BASEPRI, r3
 8002c10:	f3bf 8f6f 	isb	sy
 8002c14:	f3bf 8f4f 	dsb	sy
 8002c18:	623b      	str	r3, [r7, #32]
 8002c1a:	e7fe      	b.n	8002c1a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d109      	bne.n	8002c36 <xTaskCreateStatic+0x42>
 8002c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c26:	f383 8811 	msr	BASEPRI, r3
 8002c2a:	f3bf 8f6f 	isb	sy
 8002c2e:	f3bf 8f4f 	dsb	sy
 8002c32:	61fb      	str	r3, [r7, #28]
 8002c34:	e7fe      	b.n	8002c34 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002c36:	235c      	movs	r3, #92	; 0x5c
 8002c38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	2b5c      	cmp	r3, #92	; 0x5c
 8002c3e:	d009      	beq.n	8002c54 <xTaskCreateStatic+0x60>
 8002c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c44:	f383 8811 	msr	BASEPRI, r3
 8002c48:	f3bf 8f6f 	isb	sy
 8002c4c:	f3bf 8f4f 	dsb	sy
 8002c50:	61bb      	str	r3, [r7, #24]
 8002c52:	e7fe      	b.n	8002c52 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002c54:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d01e      	beq.n	8002c9a <xTaskCreateStatic+0xa6>
 8002c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d01b      	beq.n	8002c9a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c64:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c6a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6e:	2202      	movs	r2, #2
 8002c70:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002c74:	2300      	movs	r3, #0
 8002c76:	9303      	str	r3, [sp, #12]
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	9302      	str	r3, [sp, #8]
 8002c7c:	f107 0314 	add.w	r3, r7, #20
 8002c80:	9301      	str	r3, [sp, #4]
 8002c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	68b9      	ldr	r1, [r7, #8]
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 f850 	bl	8002d32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c94:	f000 f8dc 	bl	8002e50 <prvAddNewTaskToReadyList>
 8002c98:	e001      	b.n	8002c9e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002c9e:	697b      	ldr	r3, [r7, #20]
	}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3728      	adds	r7, #40	; 0x28
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08c      	sub	sp, #48	; 0x30
 8002cac:	af04      	add	r7, sp, #16
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	603b      	str	r3, [r7, #0]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002cb8:	88fb      	ldrh	r3, [r7, #6]
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f001 fcff 	bl	80046c0 <pvPortMalloc>
 8002cc2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00e      	beq.n	8002ce8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002cca:	205c      	movs	r0, #92	; 0x5c
 8002ccc:	f001 fcf8 	bl	80046c0 <pvPortMalloc>
 8002cd0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	631a      	str	r2, [r3, #48]	; 0x30
 8002cde:	e005      	b.n	8002cec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002ce0:	6978      	ldr	r0, [r7, #20]
 8002ce2:	f001 fdaf 	bl	8004844 <vPortFree>
 8002ce6:	e001      	b.n	8002cec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d017      	beq.n	8002d22 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002cfa:	88fa      	ldrh	r2, [r7, #6]
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	9303      	str	r3, [sp, #12]
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	9302      	str	r3, [sp, #8]
 8002d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d06:	9301      	str	r3, [sp, #4]
 8002d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	68b9      	ldr	r1, [r7, #8]
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 f80e 	bl	8002d32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d16:	69f8      	ldr	r0, [r7, #28]
 8002d18:	f000 f89a 	bl	8002e50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	61bb      	str	r3, [r7, #24]
 8002d20:	e002      	b.n	8002d28 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d22:	f04f 33ff 	mov.w	r3, #4294967295
 8002d26:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002d28:	69bb      	ldr	r3, [r7, #24]
	}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3720      	adds	r7, #32
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b088      	sub	sp, #32
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	60f8      	str	r0, [r7, #12]
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	607a      	str	r2, [r7, #4]
 8002d3e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d42:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	461a      	mov	r2, r3
 8002d4a:	21a5      	movs	r1, #165	; 0xa5
 8002d4c:	f001 fec3 	bl	8004ad6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	f023 0307 	bic.w	r3, r3, #7
 8002d68:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d009      	beq.n	8002d88 <prvInitialiseNewTask+0x56>
 8002d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d78:	f383 8811 	msr	BASEPRI, r3
 8002d7c:	f3bf 8f6f 	isb	sy
 8002d80:	f3bf 8f4f 	dsb	sy
 8002d84:	617b      	str	r3, [r7, #20]
 8002d86:	e7fe      	b.n	8002d86 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d01f      	beq.n	8002dce <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61fb      	str	r3, [r7, #28]
 8002d92:	e012      	b.n	8002dba <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d94:	68ba      	ldr	r2, [r7, #8]
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	4413      	add	r3, r2
 8002d9a:	7819      	ldrb	r1, [r3, #0]
 8002d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	4413      	add	r3, r2
 8002da2:	3334      	adds	r3, #52	; 0x34
 8002da4:	460a      	mov	r2, r1
 8002da6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	4413      	add	r3, r2
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d006      	beq.n	8002dc2 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	3301      	adds	r3, #1
 8002db8:	61fb      	str	r3, [r7, #28]
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	2b0f      	cmp	r3, #15
 8002dbe:	d9e9      	bls.n	8002d94 <prvInitialiseNewTask+0x62>
 8002dc0:	e000      	b.n	8002dc4 <prvInitialiseNewTask+0x92>
			{
				break;
 8002dc2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002dcc:	e003      	b.n	8002dd6 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd8:	2b37      	cmp	r3, #55	; 0x37
 8002dda:	d901      	bls.n	8002de0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ddc:	2337      	movs	r3, #55	; 0x37
 8002dde:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002de4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dee:	2200      	movs	r2, #0
 8002df0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df4:	3304      	adds	r3, #4
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fe ffe4 	bl	8001dc4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfe:	3318      	adds	r3, #24
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7fe ffdf 	bl	8001dc4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1e:	2200      	movs	r2, #0
 8002e20:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	68f9      	ldr	r1, [r7, #12]
 8002e2e:	69b8      	ldr	r0, [r7, #24]
 8002e30:	f001 fa08 	bl	8004244 <pxPortInitialiseStack>
 8002e34:	4602      	mov	r2, r0
 8002e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e38:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d002      	beq.n	8002e46 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e46:	bf00      	nop
 8002e48:	3720      	adds	r7, #32
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002e58:	f001 fb18 	bl	800448c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002e5c:	4b2d      	ldr	r3, [pc, #180]	; (8002f14 <prvAddNewTaskToReadyList+0xc4>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	3301      	adds	r3, #1
 8002e62:	4a2c      	ldr	r2, [pc, #176]	; (8002f14 <prvAddNewTaskToReadyList+0xc4>)
 8002e64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002e66:	4b2c      	ldr	r3, [pc, #176]	; (8002f18 <prvAddNewTaskToReadyList+0xc8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d109      	bne.n	8002e82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002e6e:	4a2a      	ldr	r2, [pc, #168]	; (8002f18 <prvAddNewTaskToReadyList+0xc8>)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e74:	4b27      	ldr	r3, [pc, #156]	; (8002f14 <prvAddNewTaskToReadyList+0xc4>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d110      	bne.n	8002e9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002e7c:	f000 fc08 	bl	8003690 <prvInitialiseTaskLists>
 8002e80:	e00d      	b.n	8002e9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002e82:	4b26      	ldr	r3, [pc, #152]	; (8002f1c <prvAddNewTaskToReadyList+0xcc>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d109      	bne.n	8002e9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e8a:	4b23      	ldr	r3, [pc, #140]	; (8002f18 <prvAddNewTaskToReadyList+0xc8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d802      	bhi.n	8002e9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002e98:	4a1f      	ldr	r2, [pc, #124]	; (8002f18 <prvAddNewTaskToReadyList+0xc8>)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002e9e:	4b20      	ldr	r3, [pc, #128]	; (8002f20 <prvAddNewTaskToReadyList+0xd0>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	4a1e      	ldr	r2, [pc, #120]	; (8002f20 <prvAddNewTaskToReadyList+0xd0>)
 8002ea6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002ea8:	4b1d      	ldr	r3, [pc, #116]	; (8002f20 <prvAddNewTaskToReadyList+0xd0>)
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb4:	4b1b      	ldr	r3, [pc, #108]	; (8002f24 <prvAddNewTaskToReadyList+0xd4>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d903      	bls.n	8002ec4 <prvAddNewTaskToReadyList+0x74>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec0:	4a18      	ldr	r2, [pc, #96]	; (8002f24 <prvAddNewTaskToReadyList+0xd4>)
 8002ec2:	6013      	str	r3, [r2, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec8:	4613      	mov	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4a15      	ldr	r2, [pc, #84]	; (8002f28 <prvAddNewTaskToReadyList+0xd8>)
 8002ed2:	441a      	add	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3304      	adds	r3, #4
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4610      	mov	r0, r2
 8002edc:	f7fe ff7f 	bl	8001dde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002ee0:	f001 fb02 	bl	80044e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002ee4:	4b0d      	ldr	r3, [pc, #52]	; (8002f1c <prvAddNewTaskToReadyList+0xcc>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00e      	beq.n	8002f0a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002eec:	4b0a      	ldr	r3, [pc, #40]	; (8002f18 <prvAddNewTaskToReadyList+0xc8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d207      	bcs.n	8002f0a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002efa:	4b0c      	ldr	r3, [pc, #48]	; (8002f2c <prvAddNewTaskToReadyList+0xdc>)
 8002efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	f3bf 8f4f 	dsb	sy
 8002f06:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f0a:	bf00      	nop
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	20000c28 	.word	0x20000c28
 8002f18:	20000754 	.word	0x20000754
 8002f1c:	20000c34 	.word	0x20000c34
 8002f20:	20000c44 	.word	0x20000c44
 8002f24:	20000c30 	.word	0x20000c30
 8002f28:	20000758 	.word	0x20000758
 8002f2c:	e000ed04 	.word	0xe000ed04

08002f30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d016      	beq.n	8002f70 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002f42:	4b13      	ldr	r3, [pc, #76]	; (8002f90 <vTaskDelay+0x60>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d009      	beq.n	8002f5e <vTaskDelay+0x2e>
 8002f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4e:	f383 8811 	msr	BASEPRI, r3
 8002f52:	f3bf 8f6f 	isb	sy
 8002f56:	f3bf 8f4f 	dsb	sy
 8002f5a:	60bb      	str	r3, [r7, #8]
 8002f5c:	e7fe      	b.n	8002f5c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002f5e:	f000 f87f 	bl	8003060 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f62:	2100      	movs	r1, #0
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 fdd3 	bl	8003b10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002f6a:	f000 f887 	bl	800307c <xTaskResumeAll>
 8002f6e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d107      	bne.n	8002f86 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002f76:	4b07      	ldr	r3, [pc, #28]	; (8002f94 <vTaskDelay+0x64>)
 8002f78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	f3bf 8f4f 	dsb	sy
 8002f82:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f86:	bf00      	nop
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000c50 	.word	0x20000c50
 8002f94:	e000ed04 	.word	0xe000ed04

08002f98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b08a      	sub	sp, #40	; 0x28
 8002f9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002fa6:	463a      	mov	r2, r7
 8002fa8:	1d39      	adds	r1, r7, #4
 8002faa:	f107 0308 	add.w	r3, r7, #8
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fe feb4 	bl	8001d1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002fb4:	6839      	ldr	r1, [r7, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	9202      	str	r2, [sp, #8]
 8002fbc:	9301      	str	r3, [sp, #4]
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	460a      	mov	r2, r1
 8002fc6:	4920      	ldr	r1, [pc, #128]	; (8003048 <vTaskStartScheduler+0xb0>)
 8002fc8:	4820      	ldr	r0, [pc, #128]	; (800304c <vTaskStartScheduler+0xb4>)
 8002fca:	f7ff fe13 	bl	8002bf4 <xTaskCreateStatic>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	4b1f      	ldr	r3, [pc, #124]	; (8003050 <vTaskStartScheduler+0xb8>)
 8002fd2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002fd4:	4b1e      	ldr	r3, [pc, #120]	; (8003050 <vTaskStartScheduler+0xb8>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d002      	beq.n	8002fe2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	e001      	b.n	8002fe6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d102      	bne.n	8002ff2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002fec:	f000 fde4 	bl	8003bb8 <xTimerCreateTimerTask>
 8002ff0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d115      	bne.n	8003024 <vTaskStartScheduler+0x8c>
 8002ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffc:	f383 8811 	msr	BASEPRI, r3
 8003000:	f3bf 8f6f 	isb	sy
 8003004:	f3bf 8f4f 	dsb	sy
 8003008:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800300a:	4b12      	ldr	r3, [pc, #72]	; (8003054 <vTaskStartScheduler+0xbc>)
 800300c:	f04f 32ff 	mov.w	r2, #4294967295
 8003010:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003012:	4b11      	ldr	r3, [pc, #68]	; (8003058 <vTaskStartScheduler+0xc0>)
 8003014:	2201      	movs	r2, #1
 8003016:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003018:	4b10      	ldr	r3, [pc, #64]	; (800305c <vTaskStartScheduler+0xc4>)
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800301e:	f001 f997 	bl	8004350 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003022:	e00d      	b.n	8003040 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302a:	d109      	bne.n	8003040 <vTaskStartScheduler+0xa8>
 800302c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003030:	f383 8811 	msr	BASEPRI, r3
 8003034:	f3bf 8f6f 	isb	sy
 8003038:	f3bf 8f4f 	dsb	sy
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	e7fe      	b.n	800303e <vTaskStartScheduler+0xa6>
}
 8003040:	bf00      	nop
 8003042:	3718      	adds	r7, #24
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	08005a84 	.word	0x08005a84
 800304c:	08003661 	.word	0x08003661
 8003050:	20000c4c 	.word	0x20000c4c
 8003054:	20000c48 	.word	0x20000c48
 8003058:	20000c34 	.word	0x20000c34
 800305c:	20000c2c 	.word	0x20000c2c

08003060 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003064:	4b04      	ldr	r3, [pc, #16]	; (8003078 <vTaskSuspendAll+0x18>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	3301      	adds	r3, #1
 800306a:	4a03      	ldr	r2, [pc, #12]	; (8003078 <vTaskSuspendAll+0x18>)
 800306c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800306e:	bf00      	nop
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	20000c50 	.word	0x20000c50

0800307c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003086:	2300      	movs	r3, #0
 8003088:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800308a:	4b41      	ldr	r3, [pc, #260]	; (8003190 <xTaskResumeAll+0x114>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d109      	bne.n	80030a6 <xTaskResumeAll+0x2a>
 8003092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003096:	f383 8811 	msr	BASEPRI, r3
 800309a:	f3bf 8f6f 	isb	sy
 800309e:	f3bf 8f4f 	dsb	sy
 80030a2:	603b      	str	r3, [r7, #0]
 80030a4:	e7fe      	b.n	80030a4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80030a6:	f001 f9f1 	bl	800448c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80030aa:	4b39      	ldr	r3, [pc, #228]	; (8003190 <xTaskResumeAll+0x114>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	4a37      	ldr	r2, [pc, #220]	; (8003190 <xTaskResumeAll+0x114>)
 80030b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030b4:	4b36      	ldr	r3, [pc, #216]	; (8003190 <xTaskResumeAll+0x114>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d162      	bne.n	8003182 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80030bc:	4b35      	ldr	r3, [pc, #212]	; (8003194 <xTaskResumeAll+0x118>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d05e      	beq.n	8003182 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030c4:	e02f      	b.n	8003126 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030c6:	4b34      	ldr	r3, [pc, #208]	; (8003198 <xTaskResumeAll+0x11c>)
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	3318      	adds	r3, #24
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fe fee0 	bl	8001e98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	3304      	adds	r3, #4
 80030dc:	4618      	mov	r0, r3
 80030de:	f7fe fedb 	bl	8001e98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e6:	4b2d      	ldr	r3, [pc, #180]	; (800319c <xTaskResumeAll+0x120>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d903      	bls.n	80030f6 <xTaskResumeAll+0x7a>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f2:	4a2a      	ldr	r2, [pc, #168]	; (800319c <xTaskResumeAll+0x120>)
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030fa:	4613      	mov	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4a27      	ldr	r2, [pc, #156]	; (80031a0 <xTaskResumeAll+0x124>)
 8003104:	441a      	add	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	3304      	adds	r3, #4
 800310a:	4619      	mov	r1, r3
 800310c:	4610      	mov	r0, r2
 800310e:	f7fe fe66 	bl	8001dde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003116:	4b23      	ldr	r3, [pc, #140]	; (80031a4 <xTaskResumeAll+0x128>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311c:	429a      	cmp	r2, r3
 800311e:	d302      	bcc.n	8003126 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003120:	4b21      	ldr	r3, [pc, #132]	; (80031a8 <xTaskResumeAll+0x12c>)
 8003122:	2201      	movs	r2, #1
 8003124:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003126:	4b1c      	ldr	r3, [pc, #112]	; (8003198 <xTaskResumeAll+0x11c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1cb      	bne.n	80030c6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003134:	f000 fb46 	bl	80037c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003138:	4b1c      	ldr	r3, [pc, #112]	; (80031ac <xTaskResumeAll+0x130>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d010      	beq.n	8003166 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003144:	f000 f846 	bl	80031d4 <xTaskIncrementTick>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d002      	beq.n	8003154 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800314e:	4b16      	ldr	r3, [pc, #88]	; (80031a8 <xTaskResumeAll+0x12c>)
 8003150:	2201      	movs	r2, #1
 8003152:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3b01      	subs	r3, #1
 8003158:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1f1      	bne.n	8003144 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003160:	4b12      	ldr	r3, [pc, #72]	; (80031ac <xTaskResumeAll+0x130>)
 8003162:	2200      	movs	r2, #0
 8003164:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003166:	4b10      	ldr	r3, [pc, #64]	; (80031a8 <xTaskResumeAll+0x12c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d009      	beq.n	8003182 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800316e:	2301      	movs	r3, #1
 8003170:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003172:	4b0f      	ldr	r3, [pc, #60]	; (80031b0 <xTaskResumeAll+0x134>)
 8003174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	f3bf 8f4f 	dsb	sy
 800317e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003182:	f001 f9b1 	bl	80044e8 <vPortExitCritical>

	return xAlreadyYielded;
 8003186:	68bb      	ldr	r3, [r7, #8]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	20000c50 	.word	0x20000c50
 8003194:	20000c28 	.word	0x20000c28
 8003198:	20000be8 	.word	0x20000be8
 800319c:	20000c30 	.word	0x20000c30
 80031a0:	20000758 	.word	0x20000758
 80031a4:	20000754 	.word	0x20000754
 80031a8:	20000c3c 	.word	0x20000c3c
 80031ac:	20000c38 	.word	0x20000c38
 80031b0:	e000ed04 	.word	0xe000ed04

080031b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80031ba:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <xTaskGetTickCount+0x1c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80031c0:	687b      	ldr	r3, [r7, #4]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	20000c2c 	.word	0x20000c2c

080031d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031de:	4b4e      	ldr	r3, [pc, #312]	; (8003318 <xTaskIncrementTick+0x144>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f040 8088 	bne.w	80032f8 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80031e8:	4b4c      	ldr	r3, [pc, #304]	; (800331c <xTaskIncrementTick+0x148>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	3301      	adds	r3, #1
 80031ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80031f0:	4a4a      	ldr	r2, [pc, #296]	; (800331c <xTaskIncrementTick+0x148>)
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d11f      	bne.n	800323c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80031fc:	4b48      	ldr	r3, [pc, #288]	; (8003320 <xTaskIncrementTick+0x14c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d009      	beq.n	800321a <xTaskIncrementTick+0x46>
 8003206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320a:	f383 8811 	msr	BASEPRI, r3
 800320e:	f3bf 8f6f 	isb	sy
 8003212:	f3bf 8f4f 	dsb	sy
 8003216:	603b      	str	r3, [r7, #0]
 8003218:	e7fe      	b.n	8003218 <xTaskIncrementTick+0x44>
 800321a:	4b41      	ldr	r3, [pc, #260]	; (8003320 <xTaskIncrementTick+0x14c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	60fb      	str	r3, [r7, #12]
 8003220:	4b40      	ldr	r3, [pc, #256]	; (8003324 <xTaskIncrementTick+0x150>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a3e      	ldr	r2, [pc, #248]	; (8003320 <xTaskIncrementTick+0x14c>)
 8003226:	6013      	str	r3, [r2, #0]
 8003228:	4a3e      	ldr	r2, [pc, #248]	; (8003324 <xTaskIncrementTick+0x150>)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	4b3e      	ldr	r3, [pc, #248]	; (8003328 <xTaskIncrementTick+0x154>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	3301      	adds	r3, #1
 8003234:	4a3c      	ldr	r2, [pc, #240]	; (8003328 <xTaskIncrementTick+0x154>)
 8003236:	6013      	str	r3, [r2, #0]
 8003238:	f000 fac4 	bl	80037c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800323c:	4b3b      	ldr	r3, [pc, #236]	; (800332c <xTaskIncrementTick+0x158>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	429a      	cmp	r2, r3
 8003244:	d349      	bcc.n	80032da <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003246:	4b36      	ldr	r3, [pc, #216]	; (8003320 <xTaskIncrementTick+0x14c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d104      	bne.n	800325a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003250:	4b36      	ldr	r3, [pc, #216]	; (800332c <xTaskIncrementTick+0x158>)
 8003252:	f04f 32ff 	mov.w	r2, #4294967295
 8003256:	601a      	str	r2, [r3, #0]
					break;
 8003258:	e03f      	b.n	80032da <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800325a:	4b31      	ldr	r3, [pc, #196]	; (8003320 <xTaskIncrementTick+0x14c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	429a      	cmp	r2, r3
 8003270:	d203      	bcs.n	800327a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003272:	4a2e      	ldr	r2, [pc, #184]	; (800332c <xTaskIncrementTick+0x158>)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003278:	e02f      	b.n	80032da <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	3304      	adds	r3, #4
 800327e:	4618      	mov	r0, r3
 8003280:	f7fe fe0a 	bl	8001e98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003288:	2b00      	cmp	r3, #0
 800328a:	d004      	beq.n	8003296 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	3318      	adds	r3, #24
 8003290:	4618      	mov	r0, r3
 8003292:	f7fe fe01 	bl	8001e98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800329a:	4b25      	ldr	r3, [pc, #148]	; (8003330 <xTaskIncrementTick+0x15c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d903      	bls.n	80032aa <xTaskIncrementTick+0xd6>
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a6:	4a22      	ldr	r2, [pc, #136]	; (8003330 <xTaskIncrementTick+0x15c>)
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ae:	4613      	mov	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4a1f      	ldr	r2, [pc, #124]	; (8003334 <xTaskIncrementTick+0x160>)
 80032b8:	441a      	add	r2, r3
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	3304      	adds	r3, #4
 80032be:	4619      	mov	r1, r3
 80032c0:	4610      	mov	r0, r2
 80032c2:	f7fe fd8c 	bl	8001dde <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ca:	4b1b      	ldr	r3, [pc, #108]	; (8003338 <xTaskIncrementTick+0x164>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d3b8      	bcc.n	8003246 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80032d4:	2301      	movs	r3, #1
 80032d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032d8:	e7b5      	b.n	8003246 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80032da:	4b17      	ldr	r3, [pc, #92]	; (8003338 <xTaskIncrementTick+0x164>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e0:	4914      	ldr	r1, [pc, #80]	; (8003334 <xTaskIncrementTick+0x160>)
 80032e2:	4613      	mov	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	440b      	add	r3, r1
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d907      	bls.n	8003302 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80032f2:	2301      	movs	r3, #1
 80032f4:	617b      	str	r3, [r7, #20]
 80032f6:	e004      	b.n	8003302 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80032f8:	4b10      	ldr	r3, [pc, #64]	; (800333c <xTaskIncrementTick+0x168>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	3301      	adds	r3, #1
 80032fe:	4a0f      	ldr	r2, [pc, #60]	; (800333c <xTaskIncrementTick+0x168>)
 8003300:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003302:	4b0f      	ldr	r3, [pc, #60]	; (8003340 <xTaskIncrementTick+0x16c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800330a:	2301      	movs	r3, #1
 800330c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800330e:	697b      	ldr	r3, [r7, #20]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3718      	adds	r7, #24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	20000c50 	.word	0x20000c50
 800331c:	20000c2c 	.word	0x20000c2c
 8003320:	20000be0 	.word	0x20000be0
 8003324:	20000be4 	.word	0x20000be4
 8003328:	20000c40 	.word	0x20000c40
 800332c:	20000c48 	.word	0x20000c48
 8003330:	20000c30 	.word	0x20000c30
 8003334:	20000758 	.word	0x20000758
 8003338:	20000754 	.word	0x20000754
 800333c:	20000c38 	.word	0x20000c38
 8003340:	20000c3c 	.word	0x20000c3c

08003344 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800334a:	4b27      	ldr	r3, [pc, #156]	; (80033e8 <vTaskSwitchContext+0xa4>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003352:	4b26      	ldr	r3, [pc, #152]	; (80033ec <vTaskSwitchContext+0xa8>)
 8003354:	2201      	movs	r2, #1
 8003356:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003358:	e040      	b.n	80033dc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800335a:	4b24      	ldr	r3, [pc, #144]	; (80033ec <vTaskSwitchContext+0xa8>)
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003360:	4b23      	ldr	r3, [pc, #140]	; (80033f0 <vTaskSwitchContext+0xac>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	e00f      	b.n	8003388 <vTaskSwitchContext+0x44>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d109      	bne.n	8003382 <vTaskSwitchContext+0x3e>
 800336e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003372:	f383 8811 	msr	BASEPRI, r3
 8003376:	f3bf 8f6f 	isb	sy
 800337a:	f3bf 8f4f 	dsb	sy
 800337e:	607b      	str	r3, [r7, #4]
 8003380:	e7fe      	b.n	8003380 <vTaskSwitchContext+0x3c>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	3b01      	subs	r3, #1
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	491a      	ldr	r1, [pc, #104]	; (80033f4 <vTaskSwitchContext+0xb0>)
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	4613      	mov	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0e5      	beq.n	8003368 <vTaskSwitchContext+0x24>
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	4613      	mov	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4a13      	ldr	r2, [pc, #76]	; (80033f4 <vTaskSwitchContext+0xb0>)
 80033a8:	4413      	add	r3, r2
 80033aa:	60bb      	str	r3, [r7, #8]
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	605a      	str	r2, [r3, #4]
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	3308      	adds	r3, #8
 80033be:	429a      	cmp	r2, r3
 80033c0:	d104      	bne.n	80033cc <vTaskSwitchContext+0x88>
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	605a      	str	r2, [r3, #4]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	4a09      	ldr	r2, [pc, #36]	; (80033f8 <vTaskSwitchContext+0xb4>)
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	4a06      	ldr	r2, [pc, #24]	; (80033f0 <vTaskSwitchContext+0xac>)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6013      	str	r3, [r2, #0]
}
 80033dc:	bf00      	nop
 80033de:	3714      	adds	r7, #20
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	20000c50 	.word	0x20000c50
 80033ec:	20000c3c 	.word	0x20000c3c
 80033f0:	20000c30 	.word	0x20000c30
 80033f4:	20000758 	.word	0x20000758
 80033f8:	20000754 	.word	0x20000754

080033fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d109      	bne.n	8003420 <vTaskPlaceOnEventList+0x24>
 800340c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003410:	f383 8811 	msr	BASEPRI, r3
 8003414:	f3bf 8f6f 	isb	sy
 8003418:	f3bf 8f4f 	dsb	sy
 800341c:	60fb      	str	r3, [r7, #12]
 800341e:	e7fe      	b.n	800341e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003420:	4b07      	ldr	r3, [pc, #28]	; (8003440 <vTaskPlaceOnEventList+0x44>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	3318      	adds	r3, #24
 8003426:	4619      	mov	r1, r3
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7fe fcfc 	bl	8001e26 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800342e:	2101      	movs	r1, #1
 8003430:	6838      	ldr	r0, [r7, #0]
 8003432:	f000 fb6d 	bl	8003b10 <prvAddCurrentTaskToDelayedList>
}
 8003436:	bf00      	nop
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	20000754 	.word	0x20000754

08003444 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d109      	bne.n	800346a <vTaskPlaceOnEventListRestricted+0x26>
 8003456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345a:	f383 8811 	msr	BASEPRI, r3
 800345e:	f3bf 8f6f 	isb	sy
 8003462:	f3bf 8f4f 	dsb	sy
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	e7fe      	b.n	8003468 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800346a:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <vTaskPlaceOnEventListRestricted+0x50>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	3318      	adds	r3, #24
 8003470:	4619      	mov	r1, r3
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f7fe fcb3 	bl	8001dde <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d002      	beq.n	8003484 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800347e:	f04f 33ff 	mov.w	r3, #4294967295
 8003482:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	68b8      	ldr	r0, [r7, #8]
 8003488:	f000 fb42 	bl	8003b10 <prvAddCurrentTaskToDelayedList>
	}
 800348c:	bf00      	nop
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	20000754 	.word	0x20000754

08003498 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d109      	bne.n	80034c2 <xTaskRemoveFromEventList+0x2a>
 80034ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b2:	f383 8811 	msr	BASEPRI, r3
 80034b6:	f3bf 8f6f 	isb	sy
 80034ba:	f3bf 8f4f 	dsb	sy
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	e7fe      	b.n	80034c0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	3318      	adds	r3, #24
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fe fce6 	bl	8001e98 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034cc:	4b1d      	ldr	r3, [pc, #116]	; (8003544 <xTaskRemoveFromEventList+0xac>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d11d      	bne.n	8003510 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	3304      	adds	r3, #4
 80034d8:	4618      	mov	r0, r3
 80034da:	f7fe fcdd 	bl	8001e98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e2:	4b19      	ldr	r3, [pc, #100]	; (8003548 <xTaskRemoveFromEventList+0xb0>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d903      	bls.n	80034f2 <xTaskRemoveFromEventList+0x5a>
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ee:	4a16      	ldr	r2, [pc, #88]	; (8003548 <xTaskRemoveFromEventList+0xb0>)
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f6:	4613      	mov	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4a13      	ldr	r2, [pc, #76]	; (800354c <xTaskRemoveFromEventList+0xb4>)
 8003500:	441a      	add	r2, r3
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	3304      	adds	r3, #4
 8003506:	4619      	mov	r1, r3
 8003508:	4610      	mov	r0, r2
 800350a:	f7fe fc68 	bl	8001dde <vListInsertEnd>
 800350e:	e005      	b.n	800351c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	3318      	adds	r3, #24
 8003514:	4619      	mov	r1, r3
 8003516:	480e      	ldr	r0, [pc, #56]	; (8003550 <xTaskRemoveFromEventList+0xb8>)
 8003518:	f7fe fc61 	bl	8001dde <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003520:	4b0c      	ldr	r3, [pc, #48]	; (8003554 <xTaskRemoveFromEventList+0xbc>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003526:	429a      	cmp	r2, r3
 8003528:	d905      	bls.n	8003536 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800352a:	2301      	movs	r3, #1
 800352c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800352e:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <xTaskRemoveFromEventList+0xc0>)
 8003530:	2201      	movs	r2, #1
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	e001      	b.n	800353a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800353a:	697b      	ldr	r3, [r7, #20]
}
 800353c:	4618      	mov	r0, r3
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	20000c50 	.word	0x20000c50
 8003548:	20000c30 	.word	0x20000c30
 800354c:	20000758 	.word	0x20000758
 8003550:	20000be8 	.word	0x20000be8
 8003554:	20000754 	.word	0x20000754
 8003558:	20000c3c 	.word	0x20000c3c

0800355c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003564:	4b06      	ldr	r3, [pc, #24]	; (8003580 <vTaskInternalSetTimeOutState+0x24>)
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800356c:	4b05      	ldr	r3, [pc, #20]	; (8003584 <vTaskInternalSetTimeOutState+0x28>)
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	605a      	str	r2, [r3, #4]
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	20000c40 	.word	0x20000c40
 8003584:	20000c2c 	.word	0x20000c2c

08003588 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b088      	sub	sp, #32
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d109      	bne.n	80035ac <xTaskCheckForTimeOut+0x24>
 8003598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359c:	f383 8811 	msr	BASEPRI, r3
 80035a0:	f3bf 8f6f 	isb	sy
 80035a4:	f3bf 8f4f 	dsb	sy
 80035a8:	613b      	str	r3, [r7, #16]
 80035aa:	e7fe      	b.n	80035aa <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d109      	bne.n	80035c6 <xTaskCheckForTimeOut+0x3e>
 80035b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b6:	f383 8811 	msr	BASEPRI, r3
 80035ba:	f3bf 8f6f 	isb	sy
 80035be:	f3bf 8f4f 	dsb	sy
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	e7fe      	b.n	80035c4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80035c6:	f000 ff61 	bl	800448c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80035ca:	4b1d      	ldr	r3, [pc, #116]	; (8003640 <xTaskCheckForTimeOut+0xb8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e2:	d102      	bne.n	80035ea <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80035e4:	2300      	movs	r3, #0
 80035e6:	61fb      	str	r3, [r7, #28]
 80035e8:	e023      	b.n	8003632 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	4b15      	ldr	r3, [pc, #84]	; (8003644 <xTaskCheckForTimeOut+0xbc>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d007      	beq.n	8003606 <xTaskCheckForTimeOut+0x7e>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d302      	bcc.n	8003606 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003600:	2301      	movs	r3, #1
 8003602:	61fb      	str	r3, [r7, #28]
 8003604:	e015      	b.n	8003632 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	429a      	cmp	r2, r3
 800360e:	d20b      	bcs.n	8003628 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	1ad2      	subs	r2, r2, r3
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f7ff ff9d 	bl	800355c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003622:	2300      	movs	r3, #0
 8003624:	61fb      	str	r3, [r7, #28]
 8003626:	e004      	b.n	8003632 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	2200      	movs	r2, #0
 800362c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800362e:	2301      	movs	r3, #1
 8003630:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003632:	f000 ff59 	bl	80044e8 <vPortExitCritical>

	return xReturn;
 8003636:	69fb      	ldr	r3, [r7, #28]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3720      	adds	r7, #32
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	20000c2c 	.word	0x20000c2c
 8003644:	20000c40 	.word	0x20000c40

08003648 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800364c:	4b03      	ldr	r3, [pc, #12]	; (800365c <vTaskMissedYield+0x14>)
 800364e:	2201      	movs	r2, #1
 8003650:	601a      	str	r2, [r3, #0]
}
 8003652:	bf00      	nop
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	20000c3c 	.word	0x20000c3c

08003660 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003668:	f000 f852 	bl	8003710 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800366c:	4b06      	ldr	r3, [pc, #24]	; (8003688 <prvIdleTask+0x28>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d9f9      	bls.n	8003668 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003674:	4b05      	ldr	r3, [pc, #20]	; (800368c <prvIdleTask+0x2c>)
 8003676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	f3bf 8f4f 	dsb	sy
 8003680:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003684:	e7f0      	b.n	8003668 <prvIdleTask+0x8>
 8003686:	bf00      	nop
 8003688:	20000758 	.word	0x20000758
 800368c:	e000ed04 	.word	0xe000ed04

08003690 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003696:	2300      	movs	r3, #0
 8003698:	607b      	str	r3, [r7, #4]
 800369a:	e00c      	b.n	80036b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	4613      	mov	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4a12      	ldr	r2, [pc, #72]	; (80036f0 <prvInitialiseTaskLists+0x60>)
 80036a8:	4413      	add	r3, r2
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7fe fb6a 	bl	8001d84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3301      	adds	r3, #1
 80036b4:	607b      	str	r3, [r7, #4]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b37      	cmp	r3, #55	; 0x37
 80036ba:	d9ef      	bls.n	800369c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80036bc:	480d      	ldr	r0, [pc, #52]	; (80036f4 <prvInitialiseTaskLists+0x64>)
 80036be:	f7fe fb61 	bl	8001d84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80036c2:	480d      	ldr	r0, [pc, #52]	; (80036f8 <prvInitialiseTaskLists+0x68>)
 80036c4:	f7fe fb5e 	bl	8001d84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80036c8:	480c      	ldr	r0, [pc, #48]	; (80036fc <prvInitialiseTaskLists+0x6c>)
 80036ca:	f7fe fb5b 	bl	8001d84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80036ce:	480c      	ldr	r0, [pc, #48]	; (8003700 <prvInitialiseTaskLists+0x70>)
 80036d0:	f7fe fb58 	bl	8001d84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80036d4:	480b      	ldr	r0, [pc, #44]	; (8003704 <prvInitialiseTaskLists+0x74>)
 80036d6:	f7fe fb55 	bl	8001d84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80036da:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <prvInitialiseTaskLists+0x78>)
 80036dc:	4a05      	ldr	r2, [pc, #20]	; (80036f4 <prvInitialiseTaskLists+0x64>)
 80036de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80036e0:	4b0a      	ldr	r3, [pc, #40]	; (800370c <prvInitialiseTaskLists+0x7c>)
 80036e2:	4a05      	ldr	r2, [pc, #20]	; (80036f8 <prvInitialiseTaskLists+0x68>)
 80036e4:	601a      	str	r2, [r3, #0]
}
 80036e6:	bf00      	nop
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	20000758 	.word	0x20000758
 80036f4:	20000bb8 	.word	0x20000bb8
 80036f8:	20000bcc 	.word	0x20000bcc
 80036fc:	20000be8 	.word	0x20000be8
 8003700:	20000bfc 	.word	0x20000bfc
 8003704:	20000c14 	.word	0x20000c14
 8003708:	20000be0 	.word	0x20000be0
 800370c:	20000be4 	.word	0x20000be4

08003710 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003716:	e019      	b.n	800374c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003718:	f000 feb8 	bl	800448c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800371c:	4b0f      	ldr	r3, [pc, #60]	; (800375c <prvCheckTasksWaitingTermination+0x4c>)
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3304      	adds	r3, #4
 8003728:	4618      	mov	r0, r3
 800372a:	f7fe fbb5 	bl	8001e98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800372e:	4b0c      	ldr	r3, [pc, #48]	; (8003760 <prvCheckTasksWaitingTermination+0x50>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	3b01      	subs	r3, #1
 8003734:	4a0a      	ldr	r2, [pc, #40]	; (8003760 <prvCheckTasksWaitingTermination+0x50>)
 8003736:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003738:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <prvCheckTasksWaitingTermination+0x54>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	3b01      	subs	r3, #1
 800373e:	4a09      	ldr	r2, [pc, #36]	; (8003764 <prvCheckTasksWaitingTermination+0x54>)
 8003740:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003742:	f000 fed1 	bl	80044e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f80e 	bl	8003768 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800374c:	4b05      	ldr	r3, [pc, #20]	; (8003764 <prvCheckTasksWaitingTermination+0x54>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1e1      	bne.n	8003718 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003754:	bf00      	nop
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	20000bfc 	.word	0x20000bfc
 8003760:	20000c28 	.word	0x20000c28
 8003764:	20000c10 	.word	0x20000c10

08003768 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003776:	2b00      	cmp	r3, #0
 8003778:	d108      	bne.n	800378c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377e:	4618      	mov	r0, r3
 8003780:	f001 f860 	bl	8004844 <vPortFree>
				vPortFree( pxTCB );
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f001 f85d 	bl	8004844 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800378a:	e017      	b.n	80037bc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003792:	2b01      	cmp	r3, #1
 8003794:	d103      	bne.n	800379e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f001 f854 	bl	8004844 <vPortFree>
	}
 800379c:	e00e      	b.n	80037bc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d009      	beq.n	80037bc <prvDeleteTCB+0x54>
 80037a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ac:	f383 8811 	msr	BASEPRI, r3
 80037b0:	f3bf 8f6f 	isb	sy
 80037b4:	f3bf 8f4f 	dsb	sy
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	e7fe      	b.n	80037ba <prvDeleteTCB+0x52>
	}
 80037bc:	bf00      	nop
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037ca:	4b0c      	ldr	r3, [pc, #48]	; (80037fc <prvResetNextTaskUnblockTime+0x38>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d104      	bne.n	80037de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80037d4:	4b0a      	ldr	r3, [pc, #40]	; (8003800 <prvResetNextTaskUnblockTime+0x3c>)
 80037d6:	f04f 32ff 	mov.w	r2, #4294967295
 80037da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80037dc:	e008      	b.n	80037f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037de:	4b07      	ldr	r3, [pc, #28]	; (80037fc <prvResetNextTaskUnblockTime+0x38>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	4a04      	ldr	r2, [pc, #16]	; (8003800 <prvResetNextTaskUnblockTime+0x3c>)
 80037ee:	6013      	str	r3, [r2, #0]
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	20000be0 	.word	0x20000be0
 8003800:	20000c48 	.word	0x20000c48

08003804 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800380a:	4b0b      	ldr	r3, [pc, #44]	; (8003838 <xTaskGetSchedulerState+0x34>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d102      	bne.n	8003818 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003812:	2301      	movs	r3, #1
 8003814:	607b      	str	r3, [r7, #4]
 8003816:	e008      	b.n	800382a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003818:	4b08      	ldr	r3, [pc, #32]	; (800383c <xTaskGetSchedulerState+0x38>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d102      	bne.n	8003826 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003820:	2302      	movs	r3, #2
 8003822:	607b      	str	r3, [r7, #4]
 8003824:	e001      	b.n	800382a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003826:	2300      	movs	r3, #0
 8003828:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800382a:	687b      	ldr	r3, [r7, #4]
	}
 800382c:	4618      	mov	r0, r3
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	20000c34 	.word	0x20000c34
 800383c:	20000c50 	.word	0x20000c50

08003840 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800384c:	2300      	movs	r3, #0
 800384e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d051      	beq.n	80038fa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800385a:	4b2a      	ldr	r3, [pc, #168]	; (8003904 <xTaskPriorityInherit+0xc4>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003860:	429a      	cmp	r2, r3
 8003862:	d241      	bcs.n	80038e8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	2b00      	cmp	r3, #0
 800386a:	db06      	blt.n	800387a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800386c:	4b25      	ldr	r3, [pc, #148]	; (8003904 <xTaskPriorityInherit+0xc4>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003872:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	6959      	ldr	r1, [r3, #20]
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003882:	4613      	mov	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	4a1f      	ldr	r2, [pc, #124]	; (8003908 <xTaskPriorityInherit+0xc8>)
 800388c:	4413      	add	r3, r2
 800388e:	4299      	cmp	r1, r3
 8003890:	d122      	bne.n	80038d8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	3304      	adds	r3, #4
 8003896:	4618      	mov	r0, r3
 8003898:	f7fe fafe 	bl	8001e98 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800389c:	4b19      	ldr	r3, [pc, #100]	; (8003904 <xTaskPriorityInherit+0xc4>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038aa:	4b18      	ldr	r3, [pc, #96]	; (800390c <xTaskPriorityInherit+0xcc>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d903      	bls.n	80038ba <xTaskPriorityInherit+0x7a>
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b6:	4a15      	ldr	r2, [pc, #84]	; (800390c <xTaskPriorityInherit+0xcc>)
 80038b8:	6013      	str	r3, [r2, #0]
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038be:	4613      	mov	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4413      	add	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4a10      	ldr	r2, [pc, #64]	; (8003908 <xTaskPriorityInherit+0xc8>)
 80038c8:	441a      	add	r2, r3
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	3304      	adds	r3, #4
 80038ce:	4619      	mov	r1, r3
 80038d0:	4610      	mov	r0, r2
 80038d2:	f7fe fa84 	bl	8001dde <vListInsertEnd>
 80038d6:	e004      	b.n	80038e2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80038d8:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <xTaskPriorityInherit+0xc4>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80038e2:	2301      	movs	r3, #1
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	e008      	b.n	80038fa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038ec:	4b05      	ldr	r3, [pc, #20]	; (8003904 <xTaskPriorityInherit+0xc4>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d201      	bcs.n	80038fa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80038f6:	2301      	movs	r3, #1
 80038f8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80038fa:	68fb      	ldr	r3, [r7, #12]
	}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	20000754 	.word	0x20000754
 8003908:	20000758 	.word	0x20000758
 800390c:	20000c30 	.word	0x20000c30

08003910 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800391c:	2300      	movs	r3, #0
 800391e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d054      	beq.n	80039d0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003926:	4b2d      	ldr	r3, [pc, #180]	; (80039dc <xTaskPriorityDisinherit+0xcc>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	429a      	cmp	r2, r3
 800392e:	d009      	beq.n	8003944 <xTaskPriorityDisinherit+0x34>
 8003930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003934:	f383 8811 	msr	BASEPRI, r3
 8003938:	f3bf 8f6f 	isb	sy
 800393c:	f3bf 8f4f 	dsb	sy
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	e7fe      	b.n	8003942 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003948:	2b00      	cmp	r3, #0
 800394a:	d109      	bne.n	8003960 <xTaskPriorityDisinherit+0x50>
 800394c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003950:	f383 8811 	msr	BASEPRI, r3
 8003954:	f3bf 8f6f 	isb	sy
 8003958:	f3bf 8f4f 	dsb	sy
 800395c:	60bb      	str	r3, [r7, #8]
 800395e:	e7fe      	b.n	800395e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003964:	1e5a      	subs	r2, r3, #1
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003972:	429a      	cmp	r2, r3
 8003974:	d02c      	beq.n	80039d0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800397a:	2b00      	cmp	r3, #0
 800397c:	d128      	bne.n	80039d0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	3304      	adds	r3, #4
 8003982:	4618      	mov	r0, r3
 8003984:	f7fe fa88 	bl	8001e98 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003994:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a0:	4b0f      	ldr	r3, [pc, #60]	; (80039e0 <xTaskPriorityDisinherit+0xd0>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d903      	bls.n	80039b0 <xTaskPriorityDisinherit+0xa0>
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ac:	4a0c      	ldr	r2, [pc, #48]	; (80039e0 <xTaskPriorityDisinherit+0xd0>)
 80039ae:	6013      	str	r3, [r2, #0]
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b4:	4613      	mov	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4a09      	ldr	r2, [pc, #36]	; (80039e4 <xTaskPriorityDisinherit+0xd4>)
 80039be:	441a      	add	r2, r3
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	3304      	adds	r3, #4
 80039c4:	4619      	mov	r1, r3
 80039c6:	4610      	mov	r0, r2
 80039c8:	f7fe fa09 	bl	8001dde <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80039cc:	2301      	movs	r3, #1
 80039ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80039d0:	697b      	ldr	r3, [r7, #20]
	}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3718      	adds	r7, #24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	20000754 	.word	0x20000754
 80039e0:	20000c30 	.word	0x20000c30
 80039e4:	20000758 	.word	0x20000758

080039e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b088      	sub	sp, #32
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80039f6:	2301      	movs	r3, #1
 80039f8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d068      	beq.n	8003ad2 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d109      	bne.n	8003a1c <vTaskPriorityDisinheritAfterTimeout+0x34>
 8003a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0c:	f383 8811 	msr	BASEPRI, r3
 8003a10:	f3bf 8f6f 	isb	sy
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	60fb      	str	r3, [r7, #12]
 8003a1a:	e7fe      	b.n	8003a1a <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d902      	bls.n	8003a2c <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	61fb      	str	r3, [r7, #28]
 8003a2a:	e002      	b.n	8003a32 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a30:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a36:	69fa      	ldr	r2, [r7, #28]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d04a      	beq.n	8003ad2 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d145      	bne.n	8003ad2 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003a46:	4b25      	ldr	r3, [pc, #148]	; (8003adc <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d109      	bne.n	8003a64 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8003a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a54:	f383 8811 	msr	BASEPRI, r3
 8003a58:	f3bf 8f6f 	isb	sy
 8003a5c:	f3bf 8f4f 	dsb	sy
 8003a60:	60bb      	str	r3, [r7, #8]
 8003a62:	e7fe      	b.n	8003a62 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a68:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	69fa      	ldr	r2, [r7, #28]
 8003a6e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	db04      	blt.n	8003a82 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	6959      	ldr	r1, [r3, #20]
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4a13      	ldr	r2, [pc, #76]	; (8003ae0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8003a92:	4413      	add	r3, r2
 8003a94:	4299      	cmp	r1, r3
 8003a96:	d11c      	bne.n	8003ad2 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	3304      	adds	r3, #4
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fe f9fb 	bl	8001e98 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa6:	4b0f      	ldr	r3, [pc, #60]	; (8003ae4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d903      	bls.n	8003ab6 <vTaskPriorityDisinheritAfterTimeout+0xce>
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab2:	4a0c      	ldr	r2, [pc, #48]	; (8003ae4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aba:	4613      	mov	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4413      	add	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4a07      	ldr	r2, [pc, #28]	; (8003ae0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8003ac4:	441a      	add	r2, r3
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	3304      	adds	r3, #4
 8003aca:	4619      	mov	r1, r3
 8003acc:	4610      	mov	r0, r2
 8003ace:	f7fe f986 	bl	8001dde <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ad2:	bf00      	nop
 8003ad4:	3720      	adds	r7, #32
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	20000754 	.word	0x20000754
 8003ae0:	20000758 	.word	0x20000758
 8003ae4:	20000c30 	.word	0x20000c30

08003ae8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003aec:	4b07      	ldr	r3, [pc, #28]	; (8003b0c <pvTaskIncrementMutexHeldCount+0x24>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d004      	beq.n	8003afe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003af4:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <pvTaskIncrementMutexHeldCount+0x24>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003afa:	3201      	adds	r2, #1
 8003afc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8003afe:	4b03      	ldr	r3, [pc, #12]	; (8003b0c <pvTaskIncrementMutexHeldCount+0x24>)
 8003b00:	681b      	ldr	r3, [r3, #0]
	}
 8003b02:	4618      	mov	r0, r3
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	20000754 	.word	0x20000754

08003b10 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003b1a:	4b21      	ldr	r3, [pc, #132]	; (8003ba0 <prvAddCurrentTaskToDelayedList+0x90>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b20:	4b20      	ldr	r3, [pc, #128]	; (8003ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	3304      	adds	r3, #4
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fe f9b6 	bl	8001e98 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b32:	d10a      	bne.n	8003b4a <prvAddCurrentTaskToDelayedList+0x3a>
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d007      	beq.n	8003b4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b3a:	4b1a      	ldr	r3, [pc, #104]	; (8003ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	3304      	adds	r3, #4
 8003b40:	4619      	mov	r1, r3
 8003b42:	4819      	ldr	r0, [pc, #100]	; (8003ba8 <prvAddCurrentTaskToDelayedList+0x98>)
 8003b44:	f7fe f94b 	bl	8001dde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003b48:	e026      	b.n	8003b98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4413      	add	r3, r2
 8003b50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b52:	4b14      	ldr	r3, [pc, #80]	; (8003ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d209      	bcs.n	8003b76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b62:	4b12      	ldr	r3, [pc, #72]	; (8003bac <prvAddCurrentTaskToDelayedList+0x9c>)
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	4b0f      	ldr	r3, [pc, #60]	; (8003ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	4610      	mov	r0, r2
 8003b70:	f7fe f959 	bl	8001e26 <vListInsert>
}
 8003b74:	e010      	b.n	8003b98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b76:	4b0e      	ldr	r3, [pc, #56]	; (8003bb0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	3304      	adds	r3, #4
 8003b80:	4619      	mov	r1, r3
 8003b82:	4610      	mov	r0, r2
 8003b84:	f7fe f94f 	bl	8001e26 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003b88:	4b0a      	ldr	r3, [pc, #40]	; (8003bb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d202      	bcs.n	8003b98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003b92:	4a08      	ldr	r2, [pc, #32]	; (8003bb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	6013      	str	r3, [r2, #0]
}
 8003b98:	bf00      	nop
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	20000c2c 	.word	0x20000c2c
 8003ba4:	20000754 	.word	0x20000754
 8003ba8:	20000c14 	.word	0x20000c14
 8003bac:	20000be4 	.word	0x20000be4
 8003bb0:	20000be0 	.word	0x20000be0
 8003bb4:	20000c48 	.word	0x20000c48

08003bb8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b08a      	sub	sp, #40	; 0x28
 8003bbc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003bc2:	f000 faff 	bl	80041c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003bc6:	4b1c      	ldr	r3, [pc, #112]	; (8003c38 <xTimerCreateTimerTask+0x80>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d021      	beq.n	8003c12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003bd6:	1d3a      	adds	r2, r7, #4
 8003bd8:	f107 0108 	add.w	r1, r7, #8
 8003bdc:	f107 030c 	add.w	r3, r7, #12
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fe f8b5 	bl	8001d50 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003be6:	6879      	ldr	r1, [r7, #4]
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	9202      	str	r2, [sp, #8]
 8003bee:	9301      	str	r3, [sp, #4]
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	460a      	mov	r2, r1
 8003bf8:	4910      	ldr	r1, [pc, #64]	; (8003c3c <xTimerCreateTimerTask+0x84>)
 8003bfa:	4811      	ldr	r0, [pc, #68]	; (8003c40 <xTimerCreateTimerTask+0x88>)
 8003bfc:	f7fe fffa 	bl	8002bf4 <xTaskCreateStatic>
 8003c00:	4602      	mov	r2, r0
 8003c02:	4b10      	ldr	r3, [pc, #64]	; (8003c44 <xTimerCreateTimerTask+0x8c>)
 8003c04:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003c06:	4b0f      	ldr	r3, [pc, #60]	; (8003c44 <xTimerCreateTimerTask+0x8c>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d109      	bne.n	8003c2c <xTimerCreateTimerTask+0x74>
 8003c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1c:	f383 8811 	msr	BASEPRI, r3
 8003c20:	f3bf 8f6f 	isb	sy
 8003c24:	f3bf 8f4f 	dsb	sy
 8003c28:	613b      	str	r3, [r7, #16]
 8003c2a:	e7fe      	b.n	8003c2a <xTimerCreateTimerTask+0x72>
	return xReturn;
 8003c2c:	697b      	ldr	r3, [r7, #20]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3718      	adds	r7, #24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	20000c84 	.word	0x20000c84
 8003c3c:	08005a8c 	.word	0x08005a8c
 8003c40:	08003d79 	.word	0x08003d79
 8003c44:	20000c88 	.word	0x20000c88

08003c48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b08a      	sub	sp, #40	; 0x28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
 8003c54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003c56:	2300      	movs	r3, #0
 8003c58:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d109      	bne.n	8003c74 <xTimerGenericCommand+0x2c>
 8003c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c64:	f383 8811 	msr	BASEPRI, r3
 8003c68:	f3bf 8f6f 	isb	sy
 8003c6c:	f3bf 8f4f 	dsb	sy
 8003c70:	623b      	str	r3, [r7, #32]
 8003c72:	e7fe      	b.n	8003c72 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003c74:	4b19      	ldr	r3, [pc, #100]	; (8003cdc <xTimerGenericCommand+0x94>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d02a      	beq.n	8003cd2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b05      	cmp	r3, #5
 8003c8c:	dc18      	bgt.n	8003cc0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003c8e:	f7ff fdb9 	bl	8003804 <xTaskGetSchedulerState>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d109      	bne.n	8003cac <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003c98:	4b10      	ldr	r3, [pc, #64]	; (8003cdc <xTimerGenericCommand+0x94>)
 8003c9a:	6818      	ldr	r0, [r3, #0]
 8003c9c:	f107 0110 	add.w	r1, r7, #16
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ca4:	f7fe fa92 	bl	80021cc <xQueueGenericSend>
 8003ca8:	6278      	str	r0, [r7, #36]	; 0x24
 8003caa:	e012      	b.n	8003cd2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003cac:	4b0b      	ldr	r3, [pc, #44]	; (8003cdc <xTimerGenericCommand+0x94>)
 8003cae:	6818      	ldr	r0, [r3, #0]
 8003cb0:	f107 0110 	add.w	r1, r7, #16
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f7fe fa88 	bl	80021cc <xQueueGenericSend>
 8003cbc:	6278      	str	r0, [r7, #36]	; 0x24
 8003cbe:	e008      	b.n	8003cd2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003cc0:	4b06      	ldr	r3, [pc, #24]	; (8003cdc <xTimerGenericCommand+0x94>)
 8003cc2:	6818      	ldr	r0, [r3, #0]
 8003cc4:	f107 0110 	add.w	r1, r7, #16
 8003cc8:	2300      	movs	r3, #0
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	f7fe fb78 	bl	80023c0 <xQueueGenericSendFromISR>
 8003cd0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3728      	adds	r7, #40	; 0x28
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	20000c84 	.word	0x20000c84

08003ce0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b088      	sub	sp, #32
 8003ce4:	af02      	add	r7, sp, #8
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cea:	4b22      	ldr	r3, [pc, #136]	; (8003d74 <prvProcessExpiredTimer+0x94>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	3304      	adds	r3, #4
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7fe f8cd 	bl	8001e98 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d04:	f003 0304 	and.w	r3, r3, #4
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d021      	beq.n	8003d50 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	699a      	ldr	r2, [r3, #24]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	18d1      	adds	r1, r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	6978      	ldr	r0, [r7, #20]
 8003d1a:	f000 f8d1 	bl	8003ec0 <prvInsertTimerInActiveList>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d01e      	beq.n	8003d62 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003d24:	2300      	movs	r3, #0
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	2300      	movs	r3, #0
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	6978      	ldr	r0, [r7, #20]
 8003d30:	f7ff ff8a 	bl	8003c48 <xTimerGenericCommand>
 8003d34:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d112      	bne.n	8003d62 <prvProcessExpiredTimer+0x82>
 8003d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d40:	f383 8811 	msr	BASEPRI, r3
 8003d44:	f3bf 8f6f 	isb	sy
 8003d48:	f3bf 8f4f 	dsb	sy
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	e7fe      	b.n	8003d4e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d56:	f023 0301 	bic.w	r3, r3, #1
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	6978      	ldr	r0, [r7, #20]
 8003d68:	4798      	blx	r3
}
 8003d6a:	bf00      	nop
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	20000c7c 	.word	0x20000c7c

08003d78 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d80:	f107 0308 	add.w	r3, r7, #8
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 f857 	bl	8003e38 <prvGetNextExpireTime>
 8003d8a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	4619      	mov	r1, r3
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f000 f803 	bl	8003d9c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003d96:	f000 f8d5 	bl	8003f44 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d9a:	e7f1      	b.n	8003d80 <prvTimerTask+0x8>

08003d9c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003da6:	f7ff f95b 	bl	8003060 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003daa:	f107 0308 	add.w	r3, r7, #8
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 f866 	bl	8003e80 <prvSampleTimeNow>
 8003db4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d130      	bne.n	8003e1e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10a      	bne.n	8003dd8 <prvProcessTimerOrBlockTask+0x3c>
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d806      	bhi.n	8003dd8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003dca:	f7ff f957 	bl	800307c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003dce:	68f9      	ldr	r1, [r7, #12]
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7ff ff85 	bl	8003ce0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003dd6:	e024      	b.n	8003e22 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d008      	beq.n	8003df0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003dde:	4b13      	ldr	r3, [pc, #76]	; (8003e2c <prvProcessTimerOrBlockTask+0x90>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <prvProcessTimerOrBlockTask+0x50>
 8003de8:	2301      	movs	r3, #1
 8003dea:	e000      	b.n	8003dee <prvProcessTimerOrBlockTask+0x52>
 8003dec:	2300      	movs	r3, #0
 8003dee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003df0:	4b0f      	ldr	r3, [pc, #60]	; (8003e30 <prvProcessTimerOrBlockTask+0x94>)
 8003df2:	6818      	ldr	r0, [r3, #0]
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	f7fe fec5 	bl	8002b8c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003e02:	f7ff f93b 	bl	800307c <xTaskResumeAll>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10a      	bne.n	8003e22 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003e0c:	4b09      	ldr	r3, [pc, #36]	; (8003e34 <prvProcessTimerOrBlockTask+0x98>)
 8003e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	f3bf 8f4f 	dsb	sy
 8003e18:	f3bf 8f6f 	isb	sy
}
 8003e1c:	e001      	b.n	8003e22 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003e1e:	f7ff f92d 	bl	800307c <xTaskResumeAll>
}
 8003e22:	bf00      	nop
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	20000c80 	.word	0x20000c80
 8003e30:	20000c84 	.word	0x20000c84
 8003e34:	e000ed04 	.word	0xe000ed04

08003e38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003e40:	4b0e      	ldr	r3, [pc, #56]	; (8003e7c <prvGetNextExpireTime+0x44>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <prvGetNextExpireTime+0x16>
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	e000      	b.n	8003e50 <prvGetNextExpireTime+0x18>
 8003e4e:	2200      	movs	r2, #0
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d105      	bne.n	8003e68 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e5c:	4b07      	ldr	r3, [pc, #28]	; (8003e7c <prvGetNextExpireTime+0x44>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	60fb      	str	r3, [r7, #12]
 8003e66:	e001      	b.n	8003e6c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3714      	adds	r7, #20
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	20000c7c 	.word	0x20000c7c

08003e80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003e88:	f7ff f994 	bl	80031b4 <xTaskGetTickCount>
 8003e8c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003e8e:	4b0b      	ldr	r3, [pc, #44]	; (8003ebc <prvSampleTimeNow+0x3c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d205      	bcs.n	8003ea4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003e98:	f000 f930 	bl	80040fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	e002      	b.n	8003eaa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003eaa:	4a04      	ldr	r2, [pc, #16]	; (8003ebc <prvSampleTimeNow+0x3c>)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	20000c8c 	.word	0x20000c8c

08003ec0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
 8003ecc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d812      	bhi.n	8003f0c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	1ad2      	subs	r2, r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d302      	bcc.n	8003efa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	617b      	str	r3, [r7, #20]
 8003ef8:	e01b      	b.n	8003f32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003efa:	4b10      	ldr	r3, [pc, #64]	; (8003f3c <prvInsertTimerInActiveList+0x7c>)
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	3304      	adds	r3, #4
 8003f02:	4619      	mov	r1, r3
 8003f04:	4610      	mov	r0, r2
 8003f06:	f7fd ff8e 	bl	8001e26 <vListInsert>
 8003f0a:	e012      	b.n	8003f32 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d206      	bcs.n	8003f22 <prvInsertTimerInActiveList+0x62>
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d302      	bcc.n	8003f22 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	e007      	b.n	8003f32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f22:	4b07      	ldr	r3, [pc, #28]	; (8003f40 <prvInsertTimerInActiveList+0x80>)
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	3304      	adds	r3, #4
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	4610      	mov	r0, r2
 8003f2e:	f7fd ff7a 	bl	8001e26 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003f32:	697b      	ldr	r3, [r7, #20]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3718      	adds	r7, #24
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	20000c80 	.word	0x20000c80
 8003f40:	20000c7c 	.word	0x20000c7c

08003f44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b08e      	sub	sp, #56	; 0x38
 8003f48:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f4a:	e0c6      	b.n	80040da <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	da17      	bge.n	8003f82 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003f52:	1d3b      	adds	r3, r7, #4
 8003f54:	3304      	adds	r3, #4
 8003f56:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d109      	bne.n	8003f72 <prvProcessReceivedCommands+0x2e>
 8003f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f62:	f383 8811 	msr	BASEPRI, r3
 8003f66:	f3bf 8f6f 	isb	sy
 8003f6a:	f3bf 8f4f 	dsb	sy
 8003f6e:	61fb      	str	r3, [r7, #28]
 8003f70:	e7fe      	b.n	8003f70 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f78:	6850      	ldr	r0, [r2, #4]
 8003f7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f7c:	6892      	ldr	r2, [r2, #8]
 8003f7e:	4611      	mov	r1, r2
 8003f80:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f2c0 80a7 	blt.w	80040d8 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d004      	beq.n	8003fa0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f98:	3304      	adds	r3, #4
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7fd ff7c 	bl	8001e98 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003fa0:	463b      	mov	r3, r7
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7ff ff6c 	bl	8003e80 <prvSampleTimeNow>
 8003fa8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b09      	cmp	r3, #9
 8003fae:	f200 8094 	bhi.w	80040da <prvProcessReceivedCommands+0x196>
 8003fb2:	a201      	add	r2, pc, #4	; (adr r2, 8003fb8 <prvProcessReceivedCommands+0x74>)
 8003fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb8:	08003fe1 	.word	0x08003fe1
 8003fbc:	08003fe1 	.word	0x08003fe1
 8003fc0:	08003fe1 	.word	0x08003fe1
 8003fc4:	08004053 	.word	0x08004053
 8003fc8:	08004067 	.word	0x08004067
 8003fcc:	080040af 	.word	0x080040af
 8003fd0:	08003fe1 	.word	0x08003fe1
 8003fd4:	08003fe1 	.word	0x08003fe1
 8003fd8:	08004053 	.word	0x08004053
 8003fdc:	08004067 	.word	0x08004067
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fe6:	f043 0301 	orr.w	r3, r3, #1
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	18d1      	adds	r1, r2, r3
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ffe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004000:	f7ff ff5e 	bl	8003ec0 <prvInsertTimerInActiveList>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d067      	beq.n	80040da <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800400a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004010:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004014:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	2b00      	cmp	r3, #0
 800401e:	d05c      	beq.n	80040da <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	441a      	add	r2, r3
 8004028:	2300      	movs	r3, #0
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	2300      	movs	r3, #0
 800402e:	2100      	movs	r1, #0
 8004030:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004032:	f7ff fe09 	bl	8003c48 <xTimerGenericCommand>
 8004036:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d14d      	bne.n	80040da <prvProcessReceivedCommands+0x196>
 800403e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004042:	f383 8811 	msr	BASEPRI, r3
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	f3bf 8f4f 	dsb	sy
 800404e:	61bb      	str	r3, [r7, #24]
 8004050:	e7fe      	b.n	8004050 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004054:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004058:	f023 0301 	bic.w	r3, r3, #1
 800405c:	b2da      	uxtb	r2, r3
 800405e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004060:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004064:	e039      	b.n	80040da <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004068:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800406c:	f043 0301 	orr.w	r3, r3, #1
 8004070:	b2da      	uxtb	r2, r3
 8004072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004074:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800407e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d109      	bne.n	800409a <prvProcessReceivedCommands+0x156>
 8004086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408a:	f383 8811 	msr	BASEPRI, r3
 800408e:	f3bf 8f6f 	isb	sy
 8004092:	f3bf 8f4f 	dsb	sy
 8004096:	617b      	str	r3, [r7, #20]
 8004098:	e7fe      	b.n	8004098 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800409a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409c:	699a      	ldr	r2, [r3, #24]
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	18d1      	adds	r1, r2, r3
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040a8:	f7ff ff0a 	bl	8003ec0 <prvInsertTimerInActiveList>
					break;
 80040ac:	e015      	b.n	80040da <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80040ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d103      	bne.n	80040c4 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80040bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040be:	f000 fbc1 	bl	8004844 <vPortFree>
 80040c2:	e00a      	b.n	80040da <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80040c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040ca:	f023 0301 	bic.w	r3, r3, #1
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80040d6:	e000      	b.n	80040da <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80040d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040da:	4b07      	ldr	r3, [pc, #28]	; (80040f8 <prvProcessReceivedCommands+0x1b4>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	1d39      	adds	r1, r7, #4
 80040e0:	2200      	movs	r2, #0
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fe fa00 	bl	80024e8 <xQueueReceive>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f47f af2e 	bne.w	8003f4c <prvProcessReceivedCommands+0x8>
	}
}
 80040f0:	bf00      	nop
 80040f2:	3730      	adds	r7, #48	; 0x30
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	20000c84 	.word	0x20000c84

080040fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b088      	sub	sp, #32
 8004100:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004102:	e047      	b.n	8004194 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004104:	4b2d      	ldr	r3, [pc, #180]	; (80041bc <prvSwitchTimerLists+0xc0>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800410e:	4b2b      	ldr	r3, [pc, #172]	; (80041bc <prvSwitchTimerLists+0xc0>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	3304      	adds	r3, #4
 800411c:	4618      	mov	r0, r3
 800411e:	f7fd febb 	bl	8001e98 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b00      	cmp	r3, #0
 8004136:	d02d      	beq.n	8004194 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	4413      	add	r3, r2
 8004140:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004142:	68ba      	ldr	r2, [r7, #8]
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	429a      	cmp	r2, r3
 8004148:	d90e      	bls.n	8004168 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004156:	4b19      	ldr	r3, [pc, #100]	; (80041bc <prvSwitchTimerLists+0xc0>)
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	3304      	adds	r3, #4
 800415e:	4619      	mov	r1, r3
 8004160:	4610      	mov	r0, r2
 8004162:	f7fd fe60 	bl	8001e26 <vListInsert>
 8004166:	e015      	b.n	8004194 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004168:	2300      	movs	r3, #0
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	2300      	movs	r3, #0
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	2100      	movs	r1, #0
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f7ff fd68 	bl	8003c48 <xTimerGenericCommand>
 8004178:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d109      	bne.n	8004194 <prvSwitchTimerLists+0x98>
 8004180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004184:	f383 8811 	msr	BASEPRI, r3
 8004188:	f3bf 8f6f 	isb	sy
 800418c:	f3bf 8f4f 	dsb	sy
 8004190:	603b      	str	r3, [r7, #0]
 8004192:	e7fe      	b.n	8004192 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004194:	4b09      	ldr	r3, [pc, #36]	; (80041bc <prvSwitchTimerLists+0xc0>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1b2      	bne.n	8004104 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800419e:	4b07      	ldr	r3, [pc, #28]	; (80041bc <prvSwitchTimerLists+0xc0>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80041a4:	4b06      	ldr	r3, [pc, #24]	; (80041c0 <prvSwitchTimerLists+0xc4>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a04      	ldr	r2, [pc, #16]	; (80041bc <prvSwitchTimerLists+0xc0>)
 80041aa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80041ac:	4a04      	ldr	r2, [pc, #16]	; (80041c0 <prvSwitchTimerLists+0xc4>)
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	6013      	str	r3, [r2, #0]
}
 80041b2:	bf00      	nop
 80041b4:	3718      	adds	r7, #24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	20000c7c 	.word	0x20000c7c
 80041c0:	20000c80 	.word	0x20000c80

080041c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80041ca:	f000 f95f 	bl	800448c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80041ce:	4b15      	ldr	r3, [pc, #84]	; (8004224 <prvCheckForValidListAndQueue+0x60>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d120      	bne.n	8004218 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80041d6:	4814      	ldr	r0, [pc, #80]	; (8004228 <prvCheckForValidListAndQueue+0x64>)
 80041d8:	f7fd fdd4 	bl	8001d84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80041dc:	4813      	ldr	r0, [pc, #76]	; (800422c <prvCheckForValidListAndQueue+0x68>)
 80041de:	f7fd fdd1 	bl	8001d84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80041e2:	4b13      	ldr	r3, [pc, #76]	; (8004230 <prvCheckForValidListAndQueue+0x6c>)
 80041e4:	4a10      	ldr	r2, [pc, #64]	; (8004228 <prvCheckForValidListAndQueue+0x64>)
 80041e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80041e8:	4b12      	ldr	r3, [pc, #72]	; (8004234 <prvCheckForValidListAndQueue+0x70>)
 80041ea:	4a10      	ldr	r2, [pc, #64]	; (800422c <prvCheckForValidListAndQueue+0x68>)
 80041ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80041ee:	2300      	movs	r3, #0
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	4b11      	ldr	r3, [pc, #68]	; (8004238 <prvCheckForValidListAndQueue+0x74>)
 80041f4:	4a11      	ldr	r2, [pc, #68]	; (800423c <prvCheckForValidListAndQueue+0x78>)
 80041f6:	2110      	movs	r1, #16
 80041f8:	200a      	movs	r0, #10
 80041fa:	f7fd fedf 	bl	8001fbc <xQueueGenericCreateStatic>
 80041fe:	4602      	mov	r2, r0
 8004200:	4b08      	ldr	r3, [pc, #32]	; (8004224 <prvCheckForValidListAndQueue+0x60>)
 8004202:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004204:	4b07      	ldr	r3, [pc, #28]	; (8004224 <prvCheckForValidListAndQueue+0x60>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d005      	beq.n	8004218 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800420c:	4b05      	ldr	r3, [pc, #20]	; (8004224 <prvCheckForValidListAndQueue+0x60>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	490b      	ldr	r1, [pc, #44]	; (8004240 <prvCheckForValidListAndQueue+0x7c>)
 8004212:	4618      	mov	r0, r3
 8004214:	f7fe fc92 	bl	8002b3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004218:	f000 f966 	bl	80044e8 <vPortExitCritical>
}
 800421c:	bf00      	nop
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	20000c84 	.word	0x20000c84
 8004228:	20000c54 	.word	0x20000c54
 800422c:	20000c68 	.word	0x20000c68
 8004230:	20000c7c 	.word	0x20000c7c
 8004234:	20000c80 	.word	0x20000c80
 8004238:	20000d30 	.word	0x20000d30
 800423c:	20000c90 	.word	0x20000c90
 8004240:	08005a94 	.word	0x08005a94

08004244 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	3b04      	subs	r3, #4
 8004254:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800425c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	3b04      	subs	r3, #4
 8004262:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	f023 0201 	bic.w	r2, r3, #1
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	3b04      	subs	r3, #4
 8004272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004274:	4a0c      	ldr	r2, [pc, #48]	; (80042a8 <pxPortInitialiseStack+0x64>)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	3b14      	subs	r3, #20
 800427e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	3b04      	subs	r3, #4
 800428a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f06f 0202 	mvn.w	r2, #2
 8004292:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	3b20      	subs	r3, #32
 8004298:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800429a:	68fb      	ldr	r3, [r7, #12]
}
 800429c:	4618      	mov	r0, r3
 800429e:	3714      	adds	r7, #20
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	080042ad 	.word	0x080042ad

080042ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80042b2:	2300      	movs	r3, #0
 80042b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80042b6:	4b11      	ldr	r3, [pc, #68]	; (80042fc <prvTaskExitError+0x50>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042be:	d009      	beq.n	80042d4 <prvTaskExitError+0x28>
 80042c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c4:	f383 8811 	msr	BASEPRI, r3
 80042c8:	f3bf 8f6f 	isb	sy
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	60fb      	str	r3, [r7, #12]
 80042d2:	e7fe      	b.n	80042d2 <prvTaskExitError+0x26>
 80042d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d8:	f383 8811 	msr	BASEPRI, r3
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80042e6:	bf00      	nop
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0fc      	beq.n	80042e8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80042ee:	bf00      	nop
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	2000000c 	.word	0x2000000c

08004300 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004300:	4b07      	ldr	r3, [pc, #28]	; (8004320 <pxCurrentTCBConst2>)
 8004302:	6819      	ldr	r1, [r3, #0]
 8004304:	6808      	ldr	r0, [r1, #0]
 8004306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800430a:	f380 8809 	msr	PSP, r0
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f04f 0000 	mov.w	r0, #0
 8004316:	f380 8811 	msr	BASEPRI, r0
 800431a:	4770      	bx	lr
 800431c:	f3af 8000 	nop.w

08004320 <pxCurrentTCBConst2>:
 8004320:	20000754 	.word	0x20000754
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004324:	bf00      	nop
 8004326:	bf00      	nop

08004328 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004328:	4808      	ldr	r0, [pc, #32]	; (800434c <prvPortStartFirstTask+0x24>)
 800432a:	6800      	ldr	r0, [r0, #0]
 800432c:	6800      	ldr	r0, [r0, #0]
 800432e:	f380 8808 	msr	MSP, r0
 8004332:	f04f 0000 	mov.w	r0, #0
 8004336:	f380 8814 	msr	CONTROL, r0
 800433a:	b662      	cpsie	i
 800433c:	b661      	cpsie	f
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	f3bf 8f6f 	isb	sy
 8004346:	df00      	svc	0
 8004348:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800434a:	bf00      	nop
 800434c:	e000ed08 	.word	0xe000ed08

08004350 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004356:	4b44      	ldr	r3, [pc, #272]	; (8004468 <xPortStartScheduler+0x118>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a44      	ldr	r2, [pc, #272]	; (800446c <xPortStartScheduler+0x11c>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d109      	bne.n	8004374 <xPortStartScheduler+0x24>
 8004360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004364:	f383 8811 	msr	BASEPRI, r3
 8004368:	f3bf 8f6f 	isb	sy
 800436c:	f3bf 8f4f 	dsb	sy
 8004370:	613b      	str	r3, [r7, #16]
 8004372:	e7fe      	b.n	8004372 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004374:	4b3c      	ldr	r3, [pc, #240]	; (8004468 <xPortStartScheduler+0x118>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a3d      	ldr	r2, [pc, #244]	; (8004470 <xPortStartScheduler+0x120>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d109      	bne.n	8004392 <xPortStartScheduler+0x42>
 800437e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004382:	f383 8811 	msr	BASEPRI, r3
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	e7fe      	b.n	8004390 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004392:	4b38      	ldr	r3, [pc, #224]	; (8004474 <xPortStartScheduler+0x124>)
 8004394:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	b2db      	uxtb	r3, r3
 800439c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	22ff      	movs	r2, #255	; 0xff
 80043a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80043ac:	78fb      	ldrb	r3, [r7, #3]
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	4b30      	ldr	r3, [pc, #192]	; (8004478 <xPortStartScheduler+0x128>)
 80043b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80043ba:	4b30      	ldr	r3, [pc, #192]	; (800447c <xPortStartScheduler+0x12c>)
 80043bc:	2207      	movs	r2, #7
 80043be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043c0:	e009      	b.n	80043d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80043c2:	4b2e      	ldr	r3, [pc, #184]	; (800447c <xPortStartScheduler+0x12c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	3b01      	subs	r3, #1
 80043c8:	4a2c      	ldr	r2, [pc, #176]	; (800447c <xPortStartScheduler+0x12c>)
 80043ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80043cc:	78fb      	ldrb	r3, [r7, #3]
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043d6:	78fb      	ldrb	r3, [r7, #3]
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043de:	2b80      	cmp	r3, #128	; 0x80
 80043e0:	d0ef      	beq.n	80043c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80043e2:	4b26      	ldr	r3, [pc, #152]	; (800447c <xPortStartScheduler+0x12c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f1c3 0307 	rsb	r3, r3, #7
 80043ea:	2b04      	cmp	r3, #4
 80043ec:	d009      	beq.n	8004402 <xPortStartScheduler+0xb2>
 80043ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f2:	f383 8811 	msr	BASEPRI, r3
 80043f6:	f3bf 8f6f 	isb	sy
 80043fa:	f3bf 8f4f 	dsb	sy
 80043fe:	60bb      	str	r3, [r7, #8]
 8004400:	e7fe      	b.n	8004400 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004402:	4b1e      	ldr	r3, [pc, #120]	; (800447c <xPortStartScheduler+0x12c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	021b      	lsls	r3, r3, #8
 8004408:	4a1c      	ldr	r2, [pc, #112]	; (800447c <xPortStartScheduler+0x12c>)
 800440a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800440c:	4b1b      	ldr	r3, [pc, #108]	; (800447c <xPortStartScheduler+0x12c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004414:	4a19      	ldr	r2, [pc, #100]	; (800447c <xPortStartScheduler+0x12c>)
 8004416:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	b2da      	uxtb	r2, r3
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004420:	4b17      	ldr	r3, [pc, #92]	; (8004480 <xPortStartScheduler+0x130>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a16      	ldr	r2, [pc, #88]	; (8004480 <xPortStartScheduler+0x130>)
 8004426:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800442a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800442c:	4b14      	ldr	r3, [pc, #80]	; (8004480 <xPortStartScheduler+0x130>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a13      	ldr	r2, [pc, #76]	; (8004480 <xPortStartScheduler+0x130>)
 8004432:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004436:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004438:	f000 f8d6 	bl	80045e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800443c:	4b11      	ldr	r3, [pc, #68]	; (8004484 <xPortStartScheduler+0x134>)
 800443e:	2200      	movs	r2, #0
 8004440:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004442:	f000 f8f5 	bl	8004630 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004446:	4b10      	ldr	r3, [pc, #64]	; (8004488 <xPortStartScheduler+0x138>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a0f      	ldr	r2, [pc, #60]	; (8004488 <xPortStartScheduler+0x138>)
 800444c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004450:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004452:	f7ff ff69 	bl	8004328 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004456:	f7fe ff75 	bl	8003344 <vTaskSwitchContext>
	prvTaskExitError();
 800445a:	f7ff ff27 	bl	80042ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3718      	adds	r7, #24
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	e000ed00 	.word	0xe000ed00
 800446c:	410fc271 	.word	0x410fc271
 8004470:	410fc270 	.word	0x410fc270
 8004474:	e000e400 	.word	0xe000e400
 8004478:	20000d80 	.word	0x20000d80
 800447c:	20000d84 	.word	0x20000d84
 8004480:	e000ed20 	.word	0xe000ed20
 8004484:	2000000c 	.word	0x2000000c
 8004488:	e000ef34 	.word	0xe000ef34

0800448c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004496:	f383 8811 	msr	BASEPRI, r3
 800449a:	f3bf 8f6f 	isb	sy
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80044a4:	4b0e      	ldr	r3, [pc, #56]	; (80044e0 <vPortEnterCritical+0x54>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	3301      	adds	r3, #1
 80044aa:	4a0d      	ldr	r2, [pc, #52]	; (80044e0 <vPortEnterCritical+0x54>)
 80044ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80044ae:	4b0c      	ldr	r3, [pc, #48]	; (80044e0 <vPortEnterCritical+0x54>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d10e      	bne.n	80044d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80044b6:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <vPortEnterCritical+0x58>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d009      	beq.n	80044d4 <vPortEnterCritical+0x48>
 80044c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c4:	f383 8811 	msr	BASEPRI, r3
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	603b      	str	r3, [r7, #0]
 80044d2:	e7fe      	b.n	80044d2 <vPortEnterCritical+0x46>
	}
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr
 80044e0:	2000000c 	.word	0x2000000c
 80044e4:	e000ed04 	.word	0xe000ed04

080044e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80044ee:	4b11      	ldr	r3, [pc, #68]	; (8004534 <vPortExitCritical+0x4c>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d109      	bne.n	800450a <vPortExitCritical+0x22>
 80044f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fa:	f383 8811 	msr	BASEPRI, r3
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f3bf 8f4f 	dsb	sy
 8004506:	607b      	str	r3, [r7, #4]
 8004508:	e7fe      	b.n	8004508 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800450a:	4b0a      	ldr	r3, [pc, #40]	; (8004534 <vPortExitCritical+0x4c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3b01      	subs	r3, #1
 8004510:	4a08      	ldr	r2, [pc, #32]	; (8004534 <vPortExitCritical+0x4c>)
 8004512:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004514:	4b07      	ldr	r3, [pc, #28]	; (8004534 <vPortExitCritical+0x4c>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d104      	bne.n	8004526 <vPortExitCritical+0x3e>
 800451c:	2300      	movs	r3, #0
 800451e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	2000000c 	.word	0x2000000c
	...

08004540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004540:	f3ef 8009 	mrs	r0, PSP
 8004544:	f3bf 8f6f 	isb	sy
 8004548:	4b15      	ldr	r3, [pc, #84]	; (80045a0 <pxCurrentTCBConst>)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	f01e 0f10 	tst.w	lr, #16
 8004550:	bf08      	it	eq
 8004552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800455a:	6010      	str	r0, [r2, #0]
 800455c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004560:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004564:	f380 8811 	msr	BASEPRI, r0
 8004568:	f3bf 8f4f 	dsb	sy
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	f7fe fee8 	bl	8003344 <vTaskSwitchContext>
 8004574:	f04f 0000 	mov.w	r0, #0
 8004578:	f380 8811 	msr	BASEPRI, r0
 800457c:	bc09      	pop	{r0, r3}
 800457e:	6819      	ldr	r1, [r3, #0]
 8004580:	6808      	ldr	r0, [r1, #0]
 8004582:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004586:	f01e 0f10 	tst.w	lr, #16
 800458a:	bf08      	it	eq
 800458c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004590:	f380 8809 	msr	PSP, r0
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	f3af 8000 	nop.w

080045a0 <pxCurrentTCBConst>:
 80045a0:	20000754 	.word	0x20000754
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80045a4:	bf00      	nop
 80045a6:	bf00      	nop

080045a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
	__asm volatile
 80045ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b2:	f383 8811 	msr	BASEPRI, r3
 80045b6:	f3bf 8f6f 	isb	sy
 80045ba:	f3bf 8f4f 	dsb	sy
 80045be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80045c0:	f7fe fe08 	bl	80031d4 <xTaskIncrementTick>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80045ca:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <xPortSysTickHandler+0x3c>)
 80045cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045d0:	601a      	str	r2, [r3, #0]
 80045d2:	2300      	movs	r3, #0
 80045d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80045dc:	bf00      	nop
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	e000ed04 	.word	0xe000ed04

080045e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80045ec:	4b0b      	ldr	r3, [pc, #44]	; (800461c <vPortSetupTimerInterrupt+0x34>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80045f2:	4b0b      	ldr	r3, [pc, #44]	; (8004620 <vPortSetupTimerInterrupt+0x38>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80045f8:	4b0a      	ldr	r3, [pc, #40]	; (8004624 <vPortSetupTimerInterrupt+0x3c>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a0a      	ldr	r2, [pc, #40]	; (8004628 <vPortSetupTimerInterrupt+0x40>)
 80045fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004602:	099b      	lsrs	r3, r3, #6
 8004604:	4a09      	ldr	r2, [pc, #36]	; (800462c <vPortSetupTimerInterrupt+0x44>)
 8004606:	3b01      	subs	r3, #1
 8004608:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800460a:	4b04      	ldr	r3, [pc, #16]	; (800461c <vPortSetupTimerInterrupt+0x34>)
 800460c:	2207      	movs	r2, #7
 800460e:	601a      	str	r2, [r3, #0]
}
 8004610:	bf00      	nop
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	e000e010 	.word	0xe000e010
 8004620:	e000e018 	.word	0xe000e018
 8004624:	20000000 	.word	0x20000000
 8004628:	10624dd3 	.word	0x10624dd3
 800462c:	e000e014 	.word	0xe000e014

08004630 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004630:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004640 <vPortEnableVFP+0x10>
 8004634:	6801      	ldr	r1, [r0, #0]
 8004636:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800463a:	6001      	str	r1, [r0, #0]
 800463c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800463e:	bf00      	nop
 8004640:	e000ed88 	.word	0xe000ed88

08004644 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800464a:	f3ef 8305 	mrs	r3, IPSR
 800464e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2b0f      	cmp	r3, #15
 8004654:	d913      	bls.n	800467e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004656:	4a16      	ldr	r2, [pc, #88]	; (80046b0 <vPortValidateInterruptPriority+0x6c>)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	4413      	add	r3, r2
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004660:	4b14      	ldr	r3, [pc, #80]	; (80046b4 <vPortValidateInterruptPriority+0x70>)
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	7afa      	ldrb	r2, [r7, #11]
 8004666:	429a      	cmp	r2, r3
 8004668:	d209      	bcs.n	800467e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800466a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466e:	f383 8811 	msr	BASEPRI, r3
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	607b      	str	r3, [r7, #4]
 800467c:	e7fe      	b.n	800467c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800467e:	4b0e      	ldr	r3, [pc, #56]	; (80046b8 <vPortValidateInterruptPriority+0x74>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004686:	4b0d      	ldr	r3, [pc, #52]	; (80046bc <vPortValidateInterruptPriority+0x78>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	429a      	cmp	r2, r3
 800468c:	d909      	bls.n	80046a2 <vPortValidateInterruptPriority+0x5e>
 800468e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004692:	f383 8811 	msr	BASEPRI, r3
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	603b      	str	r3, [r7, #0]
 80046a0:	e7fe      	b.n	80046a0 <vPortValidateInterruptPriority+0x5c>
	}
 80046a2:	bf00      	nop
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	e000e3f0 	.word	0xe000e3f0
 80046b4:	20000d80 	.word	0x20000d80
 80046b8:	e000ed0c 	.word	0xe000ed0c
 80046bc:	20000d84 	.word	0x20000d84

080046c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b08a      	sub	sp, #40	; 0x28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80046c8:	2300      	movs	r3, #0
 80046ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80046cc:	f7fe fcc8 	bl	8003060 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80046d0:	4b57      	ldr	r3, [pc, #348]	; (8004830 <pvPortMalloc+0x170>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80046d8:	f000 f90c 	bl	80048f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80046dc:	4b55      	ldr	r3, [pc, #340]	; (8004834 <pvPortMalloc+0x174>)
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4013      	ands	r3, r2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f040 808c 	bne.w	8004802 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d01c      	beq.n	800472a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80046f0:	2208      	movs	r2, #8
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4413      	add	r3, r2
 80046f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f003 0307 	and.w	r3, r3, #7
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d013      	beq.n	800472a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f023 0307 	bic.w	r3, r3, #7
 8004708:	3308      	adds	r3, #8
 800470a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f003 0307 	and.w	r3, r3, #7
 8004712:	2b00      	cmp	r3, #0
 8004714:	d009      	beq.n	800472a <pvPortMalloc+0x6a>
 8004716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471a:	f383 8811 	msr	BASEPRI, r3
 800471e:	f3bf 8f6f 	isb	sy
 8004722:	f3bf 8f4f 	dsb	sy
 8004726:	617b      	str	r3, [r7, #20]
 8004728:	e7fe      	b.n	8004728 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d068      	beq.n	8004802 <pvPortMalloc+0x142>
 8004730:	4b41      	ldr	r3, [pc, #260]	; (8004838 <pvPortMalloc+0x178>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	429a      	cmp	r2, r3
 8004738:	d863      	bhi.n	8004802 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800473a:	4b40      	ldr	r3, [pc, #256]	; (800483c <pvPortMalloc+0x17c>)
 800473c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800473e:	4b3f      	ldr	r3, [pc, #252]	; (800483c <pvPortMalloc+0x17c>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004744:	e004      	b.n	8004750 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004748:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800474a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	429a      	cmp	r2, r3
 8004758:	d903      	bls.n	8004762 <pvPortMalloc+0xa2>
 800475a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1f1      	bne.n	8004746 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004762:	4b33      	ldr	r3, [pc, #204]	; (8004830 <pvPortMalloc+0x170>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004768:	429a      	cmp	r2, r3
 800476a:	d04a      	beq.n	8004802 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800476c:	6a3b      	ldr	r3, [r7, #32]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2208      	movs	r2, #8
 8004772:	4413      	add	r3, r2
 8004774:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	6a3b      	ldr	r3, [r7, #32]
 800477c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	1ad2      	subs	r2, r2, r3
 8004786:	2308      	movs	r3, #8
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	429a      	cmp	r2, r3
 800478c:	d91e      	bls.n	80047cc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800478e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4413      	add	r3, r2
 8004794:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	f003 0307 	and.w	r3, r3, #7
 800479c:	2b00      	cmp	r3, #0
 800479e:	d009      	beq.n	80047b4 <pvPortMalloc+0xf4>
 80047a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a4:	f383 8811 	msr	BASEPRI, r3
 80047a8:	f3bf 8f6f 	isb	sy
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	613b      	str	r3, [r7, #16]
 80047b2:	e7fe      	b.n	80047b2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	1ad2      	subs	r2, r2, r3
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80047c6:	69b8      	ldr	r0, [r7, #24]
 80047c8:	f000 f8f6 	bl	80049b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80047cc:	4b1a      	ldr	r3, [pc, #104]	; (8004838 <pvPortMalloc+0x178>)
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	4a18      	ldr	r2, [pc, #96]	; (8004838 <pvPortMalloc+0x178>)
 80047d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80047da:	4b17      	ldr	r3, [pc, #92]	; (8004838 <pvPortMalloc+0x178>)
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	4b18      	ldr	r3, [pc, #96]	; (8004840 <pvPortMalloc+0x180>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d203      	bcs.n	80047ee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80047e6:	4b14      	ldr	r3, [pc, #80]	; (8004838 <pvPortMalloc+0x178>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a15      	ldr	r2, [pc, #84]	; (8004840 <pvPortMalloc+0x180>)
 80047ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	4b10      	ldr	r3, [pc, #64]	; (8004834 <pvPortMalloc+0x174>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	431a      	orrs	r2, r3
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80047fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fe:	2200      	movs	r2, #0
 8004800:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004802:	f7fe fc3b 	bl	800307c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	f003 0307 	and.w	r3, r3, #7
 800480c:	2b00      	cmp	r3, #0
 800480e:	d009      	beq.n	8004824 <pvPortMalloc+0x164>
 8004810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	60fb      	str	r3, [r7, #12]
 8004822:	e7fe      	b.n	8004822 <pvPortMalloc+0x162>
	return pvReturn;
 8004824:	69fb      	ldr	r3, [r7, #28]
}
 8004826:	4618      	mov	r0, r3
 8004828:	3728      	adds	r7, #40	; 0x28
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	20004990 	.word	0x20004990
 8004834:	2000499c 	.word	0x2000499c
 8004838:	20004994 	.word	0x20004994
 800483c:	20004988 	.word	0x20004988
 8004840:	20004998 	.word	0x20004998

08004844 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d046      	beq.n	80048e4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004856:	2308      	movs	r3, #8
 8004858:	425b      	negs	r3, r3
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	4413      	add	r3, r2
 800485e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	4b20      	ldr	r3, [pc, #128]	; (80048ec <vPortFree+0xa8>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4013      	ands	r3, r2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d109      	bne.n	8004886 <vPortFree+0x42>
 8004872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004876:	f383 8811 	msr	BASEPRI, r3
 800487a:	f3bf 8f6f 	isb	sy
 800487e:	f3bf 8f4f 	dsb	sy
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	e7fe      	b.n	8004884 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d009      	beq.n	80048a2 <vPortFree+0x5e>
 800488e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004892:	f383 8811 	msr	BASEPRI, r3
 8004896:	f3bf 8f6f 	isb	sy
 800489a:	f3bf 8f4f 	dsb	sy
 800489e:	60bb      	str	r3, [r7, #8]
 80048a0:	e7fe      	b.n	80048a0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	4b11      	ldr	r3, [pc, #68]	; (80048ec <vPortFree+0xa8>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4013      	ands	r3, r2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d019      	beq.n	80048e4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d115      	bne.n	80048e4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	4b0b      	ldr	r3, [pc, #44]	; (80048ec <vPortFree+0xa8>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	43db      	mvns	r3, r3
 80048c2:	401a      	ands	r2, r3
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80048c8:	f7fe fbca 	bl	8003060 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	4b07      	ldr	r3, [pc, #28]	; (80048f0 <vPortFree+0xac>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4413      	add	r3, r2
 80048d6:	4a06      	ldr	r2, [pc, #24]	; (80048f0 <vPortFree+0xac>)
 80048d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80048da:	6938      	ldr	r0, [r7, #16]
 80048dc:	f000 f86c 	bl	80049b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80048e0:	f7fe fbcc 	bl	800307c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80048e4:	bf00      	nop
 80048e6:	3718      	adds	r7, #24
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	2000499c 	.word	0x2000499c
 80048f0:	20004994 	.word	0x20004994

080048f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80048fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80048fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004900:	4b27      	ldr	r3, [pc, #156]	; (80049a0 <prvHeapInit+0xac>)
 8004902:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f003 0307 	and.w	r3, r3, #7
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00c      	beq.n	8004928 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	3307      	adds	r3, #7
 8004912:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f023 0307 	bic.w	r3, r3, #7
 800491a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	4a1f      	ldr	r2, [pc, #124]	; (80049a0 <prvHeapInit+0xac>)
 8004924:	4413      	add	r3, r2
 8004926:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800492c:	4a1d      	ldr	r2, [pc, #116]	; (80049a4 <prvHeapInit+0xb0>)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004932:	4b1c      	ldr	r3, [pc, #112]	; (80049a4 <prvHeapInit+0xb0>)
 8004934:	2200      	movs	r2, #0
 8004936:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	4413      	add	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004940:	2208      	movs	r2, #8
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	1a9b      	subs	r3, r3, r2
 8004946:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f023 0307 	bic.w	r3, r3, #7
 800494e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4a15      	ldr	r2, [pc, #84]	; (80049a8 <prvHeapInit+0xb4>)
 8004954:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004956:	4b14      	ldr	r3, [pc, #80]	; (80049a8 <prvHeapInit+0xb4>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2200      	movs	r2, #0
 800495c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800495e:	4b12      	ldr	r3, [pc, #72]	; (80049a8 <prvHeapInit+0xb4>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	1ad2      	subs	r2, r2, r3
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004974:	4b0c      	ldr	r3, [pc, #48]	; (80049a8 <prvHeapInit+0xb4>)
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	4a0a      	ldr	r2, [pc, #40]	; (80049ac <prvHeapInit+0xb8>)
 8004982:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	4a09      	ldr	r2, [pc, #36]	; (80049b0 <prvHeapInit+0xbc>)
 800498a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800498c:	4b09      	ldr	r3, [pc, #36]	; (80049b4 <prvHeapInit+0xc0>)
 800498e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004992:	601a      	str	r2, [r3, #0]
}
 8004994:	bf00      	nop
 8004996:	3714      	adds	r7, #20
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr
 80049a0:	20000d88 	.word	0x20000d88
 80049a4:	20004988 	.word	0x20004988
 80049a8:	20004990 	.word	0x20004990
 80049ac:	20004998 	.word	0x20004998
 80049b0:	20004994 	.word	0x20004994
 80049b4:	2000499c 	.word	0x2000499c

080049b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80049c0:	4b28      	ldr	r3, [pc, #160]	; (8004a64 <prvInsertBlockIntoFreeList+0xac>)
 80049c2:	60fb      	str	r3, [r7, #12]
 80049c4:	e002      	b.n	80049cc <prvInsertBlockIntoFreeList+0x14>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	60fb      	str	r3, [r7, #12]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d8f7      	bhi.n	80049c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	4413      	add	r3, r2
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d108      	bne.n	80049fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	441a      	add	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	441a      	add	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d118      	bne.n	8004a40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	4b15      	ldr	r3, [pc, #84]	; (8004a68 <prvInsertBlockIntoFreeList+0xb0>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d00d      	beq.n	8004a36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	441a      	add	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	e008      	b.n	8004a48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a36:	4b0c      	ldr	r3, [pc, #48]	; (8004a68 <prvInsertBlockIntoFreeList+0xb0>)
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	e003      	b.n	8004a48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d002      	beq.n	8004a56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a56:	bf00      	nop
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	20004988 	.word	0x20004988
 8004a68:	20004990 	.word	0x20004990

08004a6c <__errno>:
 8004a6c:	4b01      	ldr	r3, [pc, #4]	; (8004a74 <__errno+0x8>)
 8004a6e:	6818      	ldr	r0, [r3, #0]
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	20000010 	.word	0x20000010

08004a78 <__libc_init_array>:
 8004a78:	b570      	push	{r4, r5, r6, lr}
 8004a7a:	4e0d      	ldr	r6, [pc, #52]	; (8004ab0 <__libc_init_array+0x38>)
 8004a7c:	4c0d      	ldr	r4, [pc, #52]	; (8004ab4 <__libc_init_array+0x3c>)
 8004a7e:	1ba4      	subs	r4, r4, r6
 8004a80:	10a4      	asrs	r4, r4, #2
 8004a82:	2500      	movs	r5, #0
 8004a84:	42a5      	cmp	r5, r4
 8004a86:	d109      	bne.n	8004a9c <__libc_init_array+0x24>
 8004a88:	4e0b      	ldr	r6, [pc, #44]	; (8004ab8 <__libc_init_array+0x40>)
 8004a8a:	4c0c      	ldr	r4, [pc, #48]	; (8004abc <__libc_init_array+0x44>)
 8004a8c:	f000 ff74 	bl	8005978 <_init>
 8004a90:	1ba4      	subs	r4, r4, r6
 8004a92:	10a4      	asrs	r4, r4, #2
 8004a94:	2500      	movs	r5, #0
 8004a96:	42a5      	cmp	r5, r4
 8004a98:	d105      	bne.n	8004aa6 <__libc_init_array+0x2e>
 8004a9a:	bd70      	pop	{r4, r5, r6, pc}
 8004a9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004aa0:	4798      	blx	r3
 8004aa2:	3501      	adds	r5, #1
 8004aa4:	e7ee      	b.n	8004a84 <__libc_init_array+0xc>
 8004aa6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004aaa:	4798      	blx	r3
 8004aac:	3501      	adds	r5, #1
 8004aae:	e7f2      	b.n	8004a96 <__libc_init_array+0x1e>
 8004ab0:	08005bb8 	.word	0x08005bb8
 8004ab4:	08005bb8 	.word	0x08005bb8
 8004ab8:	08005bb8 	.word	0x08005bb8
 8004abc:	08005bbc 	.word	0x08005bbc

08004ac0 <memcpy>:
 8004ac0:	b510      	push	{r4, lr}
 8004ac2:	1e43      	subs	r3, r0, #1
 8004ac4:	440a      	add	r2, r1
 8004ac6:	4291      	cmp	r1, r2
 8004ac8:	d100      	bne.n	8004acc <memcpy+0xc>
 8004aca:	bd10      	pop	{r4, pc}
 8004acc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ad0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ad4:	e7f7      	b.n	8004ac6 <memcpy+0x6>

08004ad6 <memset>:
 8004ad6:	4402      	add	r2, r0
 8004ad8:	4603      	mov	r3, r0
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d100      	bne.n	8004ae0 <memset+0xa>
 8004ade:	4770      	bx	lr
 8004ae0:	f803 1b01 	strb.w	r1, [r3], #1
 8004ae4:	e7f9      	b.n	8004ada <memset+0x4>
	...

08004ae8 <iprintf>:
 8004ae8:	b40f      	push	{r0, r1, r2, r3}
 8004aea:	4b0a      	ldr	r3, [pc, #40]	; (8004b14 <iprintf+0x2c>)
 8004aec:	b513      	push	{r0, r1, r4, lr}
 8004aee:	681c      	ldr	r4, [r3, #0]
 8004af0:	b124      	cbz	r4, 8004afc <iprintf+0x14>
 8004af2:	69a3      	ldr	r3, [r4, #24]
 8004af4:	b913      	cbnz	r3, 8004afc <iprintf+0x14>
 8004af6:	4620      	mov	r0, r4
 8004af8:	f000 fa22 	bl	8004f40 <__sinit>
 8004afc:	ab05      	add	r3, sp, #20
 8004afe:	9a04      	ldr	r2, [sp, #16]
 8004b00:	68a1      	ldr	r1, [r4, #8]
 8004b02:	9301      	str	r3, [sp, #4]
 8004b04:	4620      	mov	r0, r4
 8004b06:	f000 fbdb 	bl	80052c0 <_vfiprintf_r>
 8004b0a:	b002      	add	sp, #8
 8004b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b10:	b004      	add	sp, #16
 8004b12:	4770      	bx	lr
 8004b14:	20000010 	.word	0x20000010

08004b18 <_puts_r>:
 8004b18:	b570      	push	{r4, r5, r6, lr}
 8004b1a:	460e      	mov	r6, r1
 8004b1c:	4605      	mov	r5, r0
 8004b1e:	b118      	cbz	r0, 8004b28 <_puts_r+0x10>
 8004b20:	6983      	ldr	r3, [r0, #24]
 8004b22:	b90b      	cbnz	r3, 8004b28 <_puts_r+0x10>
 8004b24:	f000 fa0c 	bl	8004f40 <__sinit>
 8004b28:	69ab      	ldr	r3, [r5, #24]
 8004b2a:	68ac      	ldr	r4, [r5, #8]
 8004b2c:	b913      	cbnz	r3, 8004b34 <_puts_r+0x1c>
 8004b2e:	4628      	mov	r0, r5
 8004b30:	f000 fa06 	bl	8004f40 <__sinit>
 8004b34:	4b23      	ldr	r3, [pc, #140]	; (8004bc4 <_puts_r+0xac>)
 8004b36:	429c      	cmp	r4, r3
 8004b38:	d117      	bne.n	8004b6a <_puts_r+0x52>
 8004b3a:	686c      	ldr	r4, [r5, #4]
 8004b3c:	89a3      	ldrh	r3, [r4, #12]
 8004b3e:	071b      	lsls	r3, r3, #28
 8004b40:	d51d      	bpl.n	8004b7e <_puts_r+0x66>
 8004b42:	6923      	ldr	r3, [r4, #16]
 8004b44:	b1db      	cbz	r3, 8004b7e <_puts_r+0x66>
 8004b46:	3e01      	subs	r6, #1
 8004b48:	68a3      	ldr	r3, [r4, #8]
 8004b4a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	60a3      	str	r3, [r4, #8]
 8004b52:	b9e9      	cbnz	r1, 8004b90 <_puts_r+0x78>
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	da2e      	bge.n	8004bb6 <_puts_r+0x9e>
 8004b58:	4622      	mov	r2, r4
 8004b5a:	210a      	movs	r1, #10
 8004b5c:	4628      	mov	r0, r5
 8004b5e:	f000 f83f 	bl	8004be0 <__swbuf_r>
 8004b62:	3001      	adds	r0, #1
 8004b64:	d011      	beq.n	8004b8a <_puts_r+0x72>
 8004b66:	200a      	movs	r0, #10
 8004b68:	e011      	b.n	8004b8e <_puts_r+0x76>
 8004b6a:	4b17      	ldr	r3, [pc, #92]	; (8004bc8 <_puts_r+0xb0>)
 8004b6c:	429c      	cmp	r4, r3
 8004b6e:	d101      	bne.n	8004b74 <_puts_r+0x5c>
 8004b70:	68ac      	ldr	r4, [r5, #8]
 8004b72:	e7e3      	b.n	8004b3c <_puts_r+0x24>
 8004b74:	4b15      	ldr	r3, [pc, #84]	; (8004bcc <_puts_r+0xb4>)
 8004b76:	429c      	cmp	r4, r3
 8004b78:	bf08      	it	eq
 8004b7a:	68ec      	ldreq	r4, [r5, #12]
 8004b7c:	e7de      	b.n	8004b3c <_puts_r+0x24>
 8004b7e:	4621      	mov	r1, r4
 8004b80:	4628      	mov	r0, r5
 8004b82:	f000 f87f 	bl	8004c84 <__swsetup_r>
 8004b86:	2800      	cmp	r0, #0
 8004b88:	d0dd      	beq.n	8004b46 <_puts_r+0x2e>
 8004b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b8e:	bd70      	pop	{r4, r5, r6, pc}
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	da04      	bge.n	8004b9e <_puts_r+0x86>
 8004b94:	69a2      	ldr	r2, [r4, #24]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	dc06      	bgt.n	8004ba8 <_puts_r+0x90>
 8004b9a:	290a      	cmp	r1, #10
 8004b9c:	d004      	beq.n	8004ba8 <_puts_r+0x90>
 8004b9e:	6823      	ldr	r3, [r4, #0]
 8004ba0:	1c5a      	adds	r2, r3, #1
 8004ba2:	6022      	str	r2, [r4, #0]
 8004ba4:	7019      	strb	r1, [r3, #0]
 8004ba6:	e7cf      	b.n	8004b48 <_puts_r+0x30>
 8004ba8:	4622      	mov	r2, r4
 8004baa:	4628      	mov	r0, r5
 8004bac:	f000 f818 	bl	8004be0 <__swbuf_r>
 8004bb0:	3001      	adds	r0, #1
 8004bb2:	d1c9      	bne.n	8004b48 <_puts_r+0x30>
 8004bb4:	e7e9      	b.n	8004b8a <_puts_r+0x72>
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	200a      	movs	r0, #10
 8004bba:	1c5a      	adds	r2, r3, #1
 8004bbc:	6022      	str	r2, [r4, #0]
 8004bbe:	7018      	strb	r0, [r3, #0]
 8004bc0:	e7e5      	b.n	8004b8e <_puts_r+0x76>
 8004bc2:	bf00      	nop
 8004bc4:	08005b3c 	.word	0x08005b3c
 8004bc8:	08005b5c 	.word	0x08005b5c
 8004bcc:	08005b1c 	.word	0x08005b1c

08004bd0 <puts>:
 8004bd0:	4b02      	ldr	r3, [pc, #8]	; (8004bdc <puts+0xc>)
 8004bd2:	4601      	mov	r1, r0
 8004bd4:	6818      	ldr	r0, [r3, #0]
 8004bd6:	f7ff bf9f 	b.w	8004b18 <_puts_r>
 8004bda:	bf00      	nop
 8004bdc:	20000010 	.word	0x20000010

08004be0 <__swbuf_r>:
 8004be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004be2:	460e      	mov	r6, r1
 8004be4:	4614      	mov	r4, r2
 8004be6:	4605      	mov	r5, r0
 8004be8:	b118      	cbz	r0, 8004bf2 <__swbuf_r+0x12>
 8004bea:	6983      	ldr	r3, [r0, #24]
 8004bec:	b90b      	cbnz	r3, 8004bf2 <__swbuf_r+0x12>
 8004bee:	f000 f9a7 	bl	8004f40 <__sinit>
 8004bf2:	4b21      	ldr	r3, [pc, #132]	; (8004c78 <__swbuf_r+0x98>)
 8004bf4:	429c      	cmp	r4, r3
 8004bf6:	d12a      	bne.n	8004c4e <__swbuf_r+0x6e>
 8004bf8:	686c      	ldr	r4, [r5, #4]
 8004bfa:	69a3      	ldr	r3, [r4, #24]
 8004bfc:	60a3      	str	r3, [r4, #8]
 8004bfe:	89a3      	ldrh	r3, [r4, #12]
 8004c00:	071a      	lsls	r2, r3, #28
 8004c02:	d52e      	bpl.n	8004c62 <__swbuf_r+0x82>
 8004c04:	6923      	ldr	r3, [r4, #16]
 8004c06:	b363      	cbz	r3, 8004c62 <__swbuf_r+0x82>
 8004c08:	6923      	ldr	r3, [r4, #16]
 8004c0a:	6820      	ldr	r0, [r4, #0]
 8004c0c:	1ac0      	subs	r0, r0, r3
 8004c0e:	6963      	ldr	r3, [r4, #20]
 8004c10:	b2f6      	uxtb	r6, r6
 8004c12:	4283      	cmp	r3, r0
 8004c14:	4637      	mov	r7, r6
 8004c16:	dc04      	bgt.n	8004c22 <__swbuf_r+0x42>
 8004c18:	4621      	mov	r1, r4
 8004c1a:	4628      	mov	r0, r5
 8004c1c:	f000 f926 	bl	8004e6c <_fflush_r>
 8004c20:	bb28      	cbnz	r0, 8004c6e <__swbuf_r+0x8e>
 8004c22:	68a3      	ldr	r3, [r4, #8]
 8004c24:	3b01      	subs	r3, #1
 8004c26:	60a3      	str	r3, [r4, #8]
 8004c28:	6823      	ldr	r3, [r4, #0]
 8004c2a:	1c5a      	adds	r2, r3, #1
 8004c2c:	6022      	str	r2, [r4, #0]
 8004c2e:	701e      	strb	r6, [r3, #0]
 8004c30:	6963      	ldr	r3, [r4, #20]
 8004c32:	3001      	adds	r0, #1
 8004c34:	4283      	cmp	r3, r0
 8004c36:	d004      	beq.n	8004c42 <__swbuf_r+0x62>
 8004c38:	89a3      	ldrh	r3, [r4, #12]
 8004c3a:	07db      	lsls	r3, r3, #31
 8004c3c:	d519      	bpl.n	8004c72 <__swbuf_r+0x92>
 8004c3e:	2e0a      	cmp	r6, #10
 8004c40:	d117      	bne.n	8004c72 <__swbuf_r+0x92>
 8004c42:	4621      	mov	r1, r4
 8004c44:	4628      	mov	r0, r5
 8004c46:	f000 f911 	bl	8004e6c <_fflush_r>
 8004c4a:	b190      	cbz	r0, 8004c72 <__swbuf_r+0x92>
 8004c4c:	e00f      	b.n	8004c6e <__swbuf_r+0x8e>
 8004c4e:	4b0b      	ldr	r3, [pc, #44]	; (8004c7c <__swbuf_r+0x9c>)
 8004c50:	429c      	cmp	r4, r3
 8004c52:	d101      	bne.n	8004c58 <__swbuf_r+0x78>
 8004c54:	68ac      	ldr	r4, [r5, #8]
 8004c56:	e7d0      	b.n	8004bfa <__swbuf_r+0x1a>
 8004c58:	4b09      	ldr	r3, [pc, #36]	; (8004c80 <__swbuf_r+0xa0>)
 8004c5a:	429c      	cmp	r4, r3
 8004c5c:	bf08      	it	eq
 8004c5e:	68ec      	ldreq	r4, [r5, #12]
 8004c60:	e7cb      	b.n	8004bfa <__swbuf_r+0x1a>
 8004c62:	4621      	mov	r1, r4
 8004c64:	4628      	mov	r0, r5
 8004c66:	f000 f80d 	bl	8004c84 <__swsetup_r>
 8004c6a:	2800      	cmp	r0, #0
 8004c6c:	d0cc      	beq.n	8004c08 <__swbuf_r+0x28>
 8004c6e:	f04f 37ff 	mov.w	r7, #4294967295
 8004c72:	4638      	mov	r0, r7
 8004c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c76:	bf00      	nop
 8004c78:	08005b3c 	.word	0x08005b3c
 8004c7c:	08005b5c 	.word	0x08005b5c
 8004c80:	08005b1c 	.word	0x08005b1c

08004c84 <__swsetup_r>:
 8004c84:	4b32      	ldr	r3, [pc, #200]	; (8004d50 <__swsetup_r+0xcc>)
 8004c86:	b570      	push	{r4, r5, r6, lr}
 8004c88:	681d      	ldr	r5, [r3, #0]
 8004c8a:	4606      	mov	r6, r0
 8004c8c:	460c      	mov	r4, r1
 8004c8e:	b125      	cbz	r5, 8004c9a <__swsetup_r+0x16>
 8004c90:	69ab      	ldr	r3, [r5, #24]
 8004c92:	b913      	cbnz	r3, 8004c9a <__swsetup_r+0x16>
 8004c94:	4628      	mov	r0, r5
 8004c96:	f000 f953 	bl	8004f40 <__sinit>
 8004c9a:	4b2e      	ldr	r3, [pc, #184]	; (8004d54 <__swsetup_r+0xd0>)
 8004c9c:	429c      	cmp	r4, r3
 8004c9e:	d10f      	bne.n	8004cc0 <__swsetup_r+0x3c>
 8004ca0:	686c      	ldr	r4, [r5, #4]
 8004ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	0715      	lsls	r5, r2, #28
 8004caa:	d42c      	bmi.n	8004d06 <__swsetup_r+0x82>
 8004cac:	06d0      	lsls	r0, r2, #27
 8004cae:	d411      	bmi.n	8004cd4 <__swsetup_r+0x50>
 8004cb0:	2209      	movs	r2, #9
 8004cb2:	6032      	str	r2, [r6, #0]
 8004cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cb8:	81a3      	strh	r3, [r4, #12]
 8004cba:	f04f 30ff 	mov.w	r0, #4294967295
 8004cbe:	e03e      	b.n	8004d3e <__swsetup_r+0xba>
 8004cc0:	4b25      	ldr	r3, [pc, #148]	; (8004d58 <__swsetup_r+0xd4>)
 8004cc2:	429c      	cmp	r4, r3
 8004cc4:	d101      	bne.n	8004cca <__swsetup_r+0x46>
 8004cc6:	68ac      	ldr	r4, [r5, #8]
 8004cc8:	e7eb      	b.n	8004ca2 <__swsetup_r+0x1e>
 8004cca:	4b24      	ldr	r3, [pc, #144]	; (8004d5c <__swsetup_r+0xd8>)
 8004ccc:	429c      	cmp	r4, r3
 8004cce:	bf08      	it	eq
 8004cd0:	68ec      	ldreq	r4, [r5, #12]
 8004cd2:	e7e6      	b.n	8004ca2 <__swsetup_r+0x1e>
 8004cd4:	0751      	lsls	r1, r2, #29
 8004cd6:	d512      	bpl.n	8004cfe <__swsetup_r+0x7a>
 8004cd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cda:	b141      	cbz	r1, 8004cee <__swsetup_r+0x6a>
 8004cdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ce0:	4299      	cmp	r1, r3
 8004ce2:	d002      	beq.n	8004cea <__swsetup_r+0x66>
 8004ce4:	4630      	mov	r0, r6
 8004ce6:	f000 fa19 	bl	800511c <_free_r>
 8004cea:	2300      	movs	r3, #0
 8004cec:	6363      	str	r3, [r4, #52]	; 0x34
 8004cee:	89a3      	ldrh	r3, [r4, #12]
 8004cf0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004cf4:	81a3      	strh	r3, [r4, #12]
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	6063      	str	r3, [r4, #4]
 8004cfa:	6923      	ldr	r3, [r4, #16]
 8004cfc:	6023      	str	r3, [r4, #0]
 8004cfe:	89a3      	ldrh	r3, [r4, #12]
 8004d00:	f043 0308 	orr.w	r3, r3, #8
 8004d04:	81a3      	strh	r3, [r4, #12]
 8004d06:	6923      	ldr	r3, [r4, #16]
 8004d08:	b94b      	cbnz	r3, 8004d1e <__swsetup_r+0x9a>
 8004d0a:	89a3      	ldrh	r3, [r4, #12]
 8004d0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d14:	d003      	beq.n	8004d1e <__swsetup_r+0x9a>
 8004d16:	4621      	mov	r1, r4
 8004d18:	4630      	mov	r0, r6
 8004d1a:	f000 f9bf 	bl	800509c <__smakebuf_r>
 8004d1e:	89a2      	ldrh	r2, [r4, #12]
 8004d20:	f012 0301 	ands.w	r3, r2, #1
 8004d24:	d00c      	beq.n	8004d40 <__swsetup_r+0xbc>
 8004d26:	2300      	movs	r3, #0
 8004d28:	60a3      	str	r3, [r4, #8]
 8004d2a:	6963      	ldr	r3, [r4, #20]
 8004d2c:	425b      	negs	r3, r3
 8004d2e:	61a3      	str	r3, [r4, #24]
 8004d30:	6923      	ldr	r3, [r4, #16]
 8004d32:	b953      	cbnz	r3, 8004d4a <__swsetup_r+0xc6>
 8004d34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d38:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004d3c:	d1ba      	bne.n	8004cb4 <__swsetup_r+0x30>
 8004d3e:	bd70      	pop	{r4, r5, r6, pc}
 8004d40:	0792      	lsls	r2, r2, #30
 8004d42:	bf58      	it	pl
 8004d44:	6963      	ldrpl	r3, [r4, #20]
 8004d46:	60a3      	str	r3, [r4, #8]
 8004d48:	e7f2      	b.n	8004d30 <__swsetup_r+0xac>
 8004d4a:	2000      	movs	r0, #0
 8004d4c:	e7f7      	b.n	8004d3e <__swsetup_r+0xba>
 8004d4e:	bf00      	nop
 8004d50:	20000010 	.word	0x20000010
 8004d54:	08005b3c 	.word	0x08005b3c
 8004d58:	08005b5c 	.word	0x08005b5c
 8004d5c:	08005b1c 	.word	0x08005b1c

08004d60 <__sflush_r>:
 8004d60:	898a      	ldrh	r2, [r1, #12]
 8004d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d66:	4605      	mov	r5, r0
 8004d68:	0710      	lsls	r0, r2, #28
 8004d6a:	460c      	mov	r4, r1
 8004d6c:	d458      	bmi.n	8004e20 <__sflush_r+0xc0>
 8004d6e:	684b      	ldr	r3, [r1, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	dc05      	bgt.n	8004d80 <__sflush_r+0x20>
 8004d74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	dc02      	bgt.n	8004d80 <__sflush_r+0x20>
 8004d7a:	2000      	movs	r0, #0
 8004d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d82:	2e00      	cmp	r6, #0
 8004d84:	d0f9      	beq.n	8004d7a <__sflush_r+0x1a>
 8004d86:	2300      	movs	r3, #0
 8004d88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d8c:	682f      	ldr	r7, [r5, #0]
 8004d8e:	6a21      	ldr	r1, [r4, #32]
 8004d90:	602b      	str	r3, [r5, #0]
 8004d92:	d032      	beq.n	8004dfa <__sflush_r+0x9a>
 8004d94:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d96:	89a3      	ldrh	r3, [r4, #12]
 8004d98:	075a      	lsls	r2, r3, #29
 8004d9a:	d505      	bpl.n	8004da8 <__sflush_r+0x48>
 8004d9c:	6863      	ldr	r3, [r4, #4]
 8004d9e:	1ac0      	subs	r0, r0, r3
 8004da0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004da2:	b10b      	cbz	r3, 8004da8 <__sflush_r+0x48>
 8004da4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004da6:	1ac0      	subs	r0, r0, r3
 8004da8:	2300      	movs	r3, #0
 8004daa:	4602      	mov	r2, r0
 8004dac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004dae:	6a21      	ldr	r1, [r4, #32]
 8004db0:	4628      	mov	r0, r5
 8004db2:	47b0      	blx	r6
 8004db4:	1c43      	adds	r3, r0, #1
 8004db6:	89a3      	ldrh	r3, [r4, #12]
 8004db8:	d106      	bne.n	8004dc8 <__sflush_r+0x68>
 8004dba:	6829      	ldr	r1, [r5, #0]
 8004dbc:	291d      	cmp	r1, #29
 8004dbe:	d848      	bhi.n	8004e52 <__sflush_r+0xf2>
 8004dc0:	4a29      	ldr	r2, [pc, #164]	; (8004e68 <__sflush_r+0x108>)
 8004dc2:	40ca      	lsrs	r2, r1
 8004dc4:	07d6      	lsls	r6, r2, #31
 8004dc6:	d544      	bpl.n	8004e52 <__sflush_r+0xf2>
 8004dc8:	2200      	movs	r2, #0
 8004dca:	6062      	str	r2, [r4, #4]
 8004dcc:	04d9      	lsls	r1, r3, #19
 8004dce:	6922      	ldr	r2, [r4, #16]
 8004dd0:	6022      	str	r2, [r4, #0]
 8004dd2:	d504      	bpl.n	8004dde <__sflush_r+0x7e>
 8004dd4:	1c42      	adds	r2, r0, #1
 8004dd6:	d101      	bne.n	8004ddc <__sflush_r+0x7c>
 8004dd8:	682b      	ldr	r3, [r5, #0]
 8004dda:	b903      	cbnz	r3, 8004dde <__sflush_r+0x7e>
 8004ddc:	6560      	str	r0, [r4, #84]	; 0x54
 8004dde:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004de0:	602f      	str	r7, [r5, #0]
 8004de2:	2900      	cmp	r1, #0
 8004de4:	d0c9      	beq.n	8004d7a <__sflush_r+0x1a>
 8004de6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004dea:	4299      	cmp	r1, r3
 8004dec:	d002      	beq.n	8004df4 <__sflush_r+0x94>
 8004dee:	4628      	mov	r0, r5
 8004df0:	f000 f994 	bl	800511c <_free_r>
 8004df4:	2000      	movs	r0, #0
 8004df6:	6360      	str	r0, [r4, #52]	; 0x34
 8004df8:	e7c0      	b.n	8004d7c <__sflush_r+0x1c>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	47b0      	blx	r6
 8004e00:	1c41      	adds	r1, r0, #1
 8004e02:	d1c8      	bne.n	8004d96 <__sflush_r+0x36>
 8004e04:	682b      	ldr	r3, [r5, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d0c5      	beq.n	8004d96 <__sflush_r+0x36>
 8004e0a:	2b1d      	cmp	r3, #29
 8004e0c:	d001      	beq.n	8004e12 <__sflush_r+0xb2>
 8004e0e:	2b16      	cmp	r3, #22
 8004e10:	d101      	bne.n	8004e16 <__sflush_r+0xb6>
 8004e12:	602f      	str	r7, [r5, #0]
 8004e14:	e7b1      	b.n	8004d7a <__sflush_r+0x1a>
 8004e16:	89a3      	ldrh	r3, [r4, #12]
 8004e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e1c:	81a3      	strh	r3, [r4, #12]
 8004e1e:	e7ad      	b.n	8004d7c <__sflush_r+0x1c>
 8004e20:	690f      	ldr	r7, [r1, #16]
 8004e22:	2f00      	cmp	r7, #0
 8004e24:	d0a9      	beq.n	8004d7a <__sflush_r+0x1a>
 8004e26:	0793      	lsls	r3, r2, #30
 8004e28:	680e      	ldr	r6, [r1, #0]
 8004e2a:	bf08      	it	eq
 8004e2c:	694b      	ldreq	r3, [r1, #20]
 8004e2e:	600f      	str	r7, [r1, #0]
 8004e30:	bf18      	it	ne
 8004e32:	2300      	movne	r3, #0
 8004e34:	eba6 0807 	sub.w	r8, r6, r7
 8004e38:	608b      	str	r3, [r1, #8]
 8004e3a:	f1b8 0f00 	cmp.w	r8, #0
 8004e3e:	dd9c      	ble.n	8004d7a <__sflush_r+0x1a>
 8004e40:	4643      	mov	r3, r8
 8004e42:	463a      	mov	r2, r7
 8004e44:	6a21      	ldr	r1, [r4, #32]
 8004e46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004e48:	4628      	mov	r0, r5
 8004e4a:	47b0      	blx	r6
 8004e4c:	2800      	cmp	r0, #0
 8004e4e:	dc06      	bgt.n	8004e5e <__sflush_r+0xfe>
 8004e50:	89a3      	ldrh	r3, [r4, #12]
 8004e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e56:	81a3      	strh	r3, [r4, #12]
 8004e58:	f04f 30ff 	mov.w	r0, #4294967295
 8004e5c:	e78e      	b.n	8004d7c <__sflush_r+0x1c>
 8004e5e:	4407      	add	r7, r0
 8004e60:	eba8 0800 	sub.w	r8, r8, r0
 8004e64:	e7e9      	b.n	8004e3a <__sflush_r+0xda>
 8004e66:	bf00      	nop
 8004e68:	20400001 	.word	0x20400001

08004e6c <_fflush_r>:
 8004e6c:	b538      	push	{r3, r4, r5, lr}
 8004e6e:	690b      	ldr	r3, [r1, #16]
 8004e70:	4605      	mov	r5, r0
 8004e72:	460c      	mov	r4, r1
 8004e74:	b1db      	cbz	r3, 8004eae <_fflush_r+0x42>
 8004e76:	b118      	cbz	r0, 8004e80 <_fflush_r+0x14>
 8004e78:	6983      	ldr	r3, [r0, #24]
 8004e7a:	b90b      	cbnz	r3, 8004e80 <_fflush_r+0x14>
 8004e7c:	f000 f860 	bl	8004f40 <__sinit>
 8004e80:	4b0c      	ldr	r3, [pc, #48]	; (8004eb4 <_fflush_r+0x48>)
 8004e82:	429c      	cmp	r4, r3
 8004e84:	d109      	bne.n	8004e9a <_fflush_r+0x2e>
 8004e86:	686c      	ldr	r4, [r5, #4]
 8004e88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e8c:	b17b      	cbz	r3, 8004eae <_fflush_r+0x42>
 8004e8e:	4621      	mov	r1, r4
 8004e90:	4628      	mov	r0, r5
 8004e92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e96:	f7ff bf63 	b.w	8004d60 <__sflush_r>
 8004e9a:	4b07      	ldr	r3, [pc, #28]	; (8004eb8 <_fflush_r+0x4c>)
 8004e9c:	429c      	cmp	r4, r3
 8004e9e:	d101      	bne.n	8004ea4 <_fflush_r+0x38>
 8004ea0:	68ac      	ldr	r4, [r5, #8]
 8004ea2:	e7f1      	b.n	8004e88 <_fflush_r+0x1c>
 8004ea4:	4b05      	ldr	r3, [pc, #20]	; (8004ebc <_fflush_r+0x50>)
 8004ea6:	429c      	cmp	r4, r3
 8004ea8:	bf08      	it	eq
 8004eaa:	68ec      	ldreq	r4, [r5, #12]
 8004eac:	e7ec      	b.n	8004e88 <_fflush_r+0x1c>
 8004eae:	2000      	movs	r0, #0
 8004eb0:	bd38      	pop	{r3, r4, r5, pc}
 8004eb2:	bf00      	nop
 8004eb4:	08005b3c 	.word	0x08005b3c
 8004eb8:	08005b5c 	.word	0x08005b5c
 8004ebc:	08005b1c 	.word	0x08005b1c

08004ec0 <std>:
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	b510      	push	{r4, lr}
 8004ec4:	4604      	mov	r4, r0
 8004ec6:	e9c0 3300 	strd	r3, r3, [r0]
 8004eca:	6083      	str	r3, [r0, #8]
 8004ecc:	8181      	strh	r1, [r0, #12]
 8004ece:	6643      	str	r3, [r0, #100]	; 0x64
 8004ed0:	81c2      	strh	r2, [r0, #14]
 8004ed2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ed6:	6183      	str	r3, [r0, #24]
 8004ed8:	4619      	mov	r1, r3
 8004eda:	2208      	movs	r2, #8
 8004edc:	305c      	adds	r0, #92	; 0x5c
 8004ede:	f7ff fdfa 	bl	8004ad6 <memset>
 8004ee2:	4b05      	ldr	r3, [pc, #20]	; (8004ef8 <std+0x38>)
 8004ee4:	6263      	str	r3, [r4, #36]	; 0x24
 8004ee6:	4b05      	ldr	r3, [pc, #20]	; (8004efc <std+0x3c>)
 8004ee8:	62a3      	str	r3, [r4, #40]	; 0x28
 8004eea:	4b05      	ldr	r3, [pc, #20]	; (8004f00 <std+0x40>)
 8004eec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004eee:	4b05      	ldr	r3, [pc, #20]	; (8004f04 <std+0x44>)
 8004ef0:	6224      	str	r4, [r4, #32]
 8004ef2:	6323      	str	r3, [r4, #48]	; 0x30
 8004ef4:	bd10      	pop	{r4, pc}
 8004ef6:	bf00      	nop
 8004ef8:	0800581d 	.word	0x0800581d
 8004efc:	0800583f 	.word	0x0800583f
 8004f00:	08005877 	.word	0x08005877
 8004f04:	0800589b 	.word	0x0800589b

08004f08 <_cleanup_r>:
 8004f08:	4901      	ldr	r1, [pc, #4]	; (8004f10 <_cleanup_r+0x8>)
 8004f0a:	f000 b885 	b.w	8005018 <_fwalk_reent>
 8004f0e:	bf00      	nop
 8004f10:	08004e6d 	.word	0x08004e6d

08004f14 <__sfmoreglue>:
 8004f14:	b570      	push	{r4, r5, r6, lr}
 8004f16:	1e4a      	subs	r2, r1, #1
 8004f18:	2568      	movs	r5, #104	; 0x68
 8004f1a:	4355      	muls	r5, r2
 8004f1c:	460e      	mov	r6, r1
 8004f1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004f22:	f000 f949 	bl	80051b8 <_malloc_r>
 8004f26:	4604      	mov	r4, r0
 8004f28:	b140      	cbz	r0, 8004f3c <__sfmoreglue+0x28>
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	e9c0 1600 	strd	r1, r6, [r0]
 8004f30:	300c      	adds	r0, #12
 8004f32:	60a0      	str	r0, [r4, #8]
 8004f34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004f38:	f7ff fdcd 	bl	8004ad6 <memset>
 8004f3c:	4620      	mov	r0, r4
 8004f3e:	bd70      	pop	{r4, r5, r6, pc}

08004f40 <__sinit>:
 8004f40:	6983      	ldr	r3, [r0, #24]
 8004f42:	b510      	push	{r4, lr}
 8004f44:	4604      	mov	r4, r0
 8004f46:	bb33      	cbnz	r3, 8004f96 <__sinit+0x56>
 8004f48:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004f4c:	6503      	str	r3, [r0, #80]	; 0x50
 8004f4e:	4b12      	ldr	r3, [pc, #72]	; (8004f98 <__sinit+0x58>)
 8004f50:	4a12      	ldr	r2, [pc, #72]	; (8004f9c <__sinit+0x5c>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6282      	str	r2, [r0, #40]	; 0x28
 8004f56:	4298      	cmp	r0, r3
 8004f58:	bf04      	itt	eq
 8004f5a:	2301      	moveq	r3, #1
 8004f5c:	6183      	streq	r3, [r0, #24]
 8004f5e:	f000 f81f 	bl	8004fa0 <__sfp>
 8004f62:	6060      	str	r0, [r4, #4]
 8004f64:	4620      	mov	r0, r4
 8004f66:	f000 f81b 	bl	8004fa0 <__sfp>
 8004f6a:	60a0      	str	r0, [r4, #8]
 8004f6c:	4620      	mov	r0, r4
 8004f6e:	f000 f817 	bl	8004fa0 <__sfp>
 8004f72:	2200      	movs	r2, #0
 8004f74:	60e0      	str	r0, [r4, #12]
 8004f76:	2104      	movs	r1, #4
 8004f78:	6860      	ldr	r0, [r4, #4]
 8004f7a:	f7ff ffa1 	bl	8004ec0 <std>
 8004f7e:	2201      	movs	r2, #1
 8004f80:	2109      	movs	r1, #9
 8004f82:	68a0      	ldr	r0, [r4, #8]
 8004f84:	f7ff ff9c 	bl	8004ec0 <std>
 8004f88:	2202      	movs	r2, #2
 8004f8a:	2112      	movs	r1, #18
 8004f8c:	68e0      	ldr	r0, [r4, #12]
 8004f8e:	f7ff ff97 	bl	8004ec0 <std>
 8004f92:	2301      	movs	r3, #1
 8004f94:	61a3      	str	r3, [r4, #24]
 8004f96:	bd10      	pop	{r4, pc}
 8004f98:	08005b18 	.word	0x08005b18
 8004f9c:	08004f09 	.word	0x08004f09

08004fa0 <__sfp>:
 8004fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa2:	4b1b      	ldr	r3, [pc, #108]	; (8005010 <__sfp+0x70>)
 8004fa4:	681e      	ldr	r6, [r3, #0]
 8004fa6:	69b3      	ldr	r3, [r6, #24]
 8004fa8:	4607      	mov	r7, r0
 8004faa:	b913      	cbnz	r3, 8004fb2 <__sfp+0x12>
 8004fac:	4630      	mov	r0, r6
 8004fae:	f7ff ffc7 	bl	8004f40 <__sinit>
 8004fb2:	3648      	adds	r6, #72	; 0x48
 8004fb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	d503      	bpl.n	8004fc4 <__sfp+0x24>
 8004fbc:	6833      	ldr	r3, [r6, #0]
 8004fbe:	b133      	cbz	r3, 8004fce <__sfp+0x2e>
 8004fc0:	6836      	ldr	r6, [r6, #0]
 8004fc2:	e7f7      	b.n	8004fb4 <__sfp+0x14>
 8004fc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004fc8:	b16d      	cbz	r5, 8004fe6 <__sfp+0x46>
 8004fca:	3468      	adds	r4, #104	; 0x68
 8004fcc:	e7f4      	b.n	8004fb8 <__sfp+0x18>
 8004fce:	2104      	movs	r1, #4
 8004fd0:	4638      	mov	r0, r7
 8004fd2:	f7ff ff9f 	bl	8004f14 <__sfmoreglue>
 8004fd6:	6030      	str	r0, [r6, #0]
 8004fd8:	2800      	cmp	r0, #0
 8004fda:	d1f1      	bne.n	8004fc0 <__sfp+0x20>
 8004fdc:	230c      	movs	r3, #12
 8004fde:	603b      	str	r3, [r7, #0]
 8004fe0:	4604      	mov	r4, r0
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fe6:	4b0b      	ldr	r3, [pc, #44]	; (8005014 <__sfp+0x74>)
 8004fe8:	6665      	str	r5, [r4, #100]	; 0x64
 8004fea:	e9c4 5500 	strd	r5, r5, [r4]
 8004fee:	60a5      	str	r5, [r4, #8]
 8004ff0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004ff4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004ff8:	2208      	movs	r2, #8
 8004ffa:	4629      	mov	r1, r5
 8004ffc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005000:	f7ff fd69 	bl	8004ad6 <memset>
 8005004:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005008:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800500c:	e7e9      	b.n	8004fe2 <__sfp+0x42>
 800500e:	bf00      	nop
 8005010:	08005b18 	.word	0x08005b18
 8005014:	ffff0001 	.word	0xffff0001

08005018 <_fwalk_reent>:
 8005018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800501c:	4680      	mov	r8, r0
 800501e:	4689      	mov	r9, r1
 8005020:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005024:	2600      	movs	r6, #0
 8005026:	b914      	cbnz	r4, 800502e <_fwalk_reent+0x16>
 8005028:	4630      	mov	r0, r6
 800502a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800502e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005032:	3f01      	subs	r7, #1
 8005034:	d501      	bpl.n	800503a <_fwalk_reent+0x22>
 8005036:	6824      	ldr	r4, [r4, #0]
 8005038:	e7f5      	b.n	8005026 <_fwalk_reent+0xe>
 800503a:	89ab      	ldrh	r3, [r5, #12]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d907      	bls.n	8005050 <_fwalk_reent+0x38>
 8005040:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005044:	3301      	adds	r3, #1
 8005046:	d003      	beq.n	8005050 <_fwalk_reent+0x38>
 8005048:	4629      	mov	r1, r5
 800504a:	4640      	mov	r0, r8
 800504c:	47c8      	blx	r9
 800504e:	4306      	orrs	r6, r0
 8005050:	3568      	adds	r5, #104	; 0x68
 8005052:	e7ee      	b.n	8005032 <_fwalk_reent+0x1a>

08005054 <__swhatbuf_r>:
 8005054:	b570      	push	{r4, r5, r6, lr}
 8005056:	460e      	mov	r6, r1
 8005058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800505c:	2900      	cmp	r1, #0
 800505e:	b096      	sub	sp, #88	; 0x58
 8005060:	4614      	mov	r4, r2
 8005062:	461d      	mov	r5, r3
 8005064:	da07      	bge.n	8005076 <__swhatbuf_r+0x22>
 8005066:	2300      	movs	r3, #0
 8005068:	602b      	str	r3, [r5, #0]
 800506a:	89b3      	ldrh	r3, [r6, #12]
 800506c:	061a      	lsls	r2, r3, #24
 800506e:	d410      	bmi.n	8005092 <__swhatbuf_r+0x3e>
 8005070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005074:	e00e      	b.n	8005094 <__swhatbuf_r+0x40>
 8005076:	466a      	mov	r2, sp
 8005078:	f000 fc36 	bl	80058e8 <_fstat_r>
 800507c:	2800      	cmp	r0, #0
 800507e:	dbf2      	blt.n	8005066 <__swhatbuf_r+0x12>
 8005080:	9a01      	ldr	r2, [sp, #4]
 8005082:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005086:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800508a:	425a      	negs	r2, r3
 800508c:	415a      	adcs	r2, r3
 800508e:	602a      	str	r2, [r5, #0]
 8005090:	e7ee      	b.n	8005070 <__swhatbuf_r+0x1c>
 8005092:	2340      	movs	r3, #64	; 0x40
 8005094:	2000      	movs	r0, #0
 8005096:	6023      	str	r3, [r4, #0]
 8005098:	b016      	add	sp, #88	; 0x58
 800509a:	bd70      	pop	{r4, r5, r6, pc}

0800509c <__smakebuf_r>:
 800509c:	898b      	ldrh	r3, [r1, #12]
 800509e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80050a0:	079d      	lsls	r5, r3, #30
 80050a2:	4606      	mov	r6, r0
 80050a4:	460c      	mov	r4, r1
 80050a6:	d507      	bpl.n	80050b8 <__smakebuf_r+0x1c>
 80050a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80050ac:	6023      	str	r3, [r4, #0]
 80050ae:	6123      	str	r3, [r4, #16]
 80050b0:	2301      	movs	r3, #1
 80050b2:	6163      	str	r3, [r4, #20]
 80050b4:	b002      	add	sp, #8
 80050b6:	bd70      	pop	{r4, r5, r6, pc}
 80050b8:	ab01      	add	r3, sp, #4
 80050ba:	466a      	mov	r2, sp
 80050bc:	f7ff ffca 	bl	8005054 <__swhatbuf_r>
 80050c0:	9900      	ldr	r1, [sp, #0]
 80050c2:	4605      	mov	r5, r0
 80050c4:	4630      	mov	r0, r6
 80050c6:	f000 f877 	bl	80051b8 <_malloc_r>
 80050ca:	b948      	cbnz	r0, 80050e0 <__smakebuf_r+0x44>
 80050cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050d0:	059a      	lsls	r2, r3, #22
 80050d2:	d4ef      	bmi.n	80050b4 <__smakebuf_r+0x18>
 80050d4:	f023 0303 	bic.w	r3, r3, #3
 80050d8:	f043 0302 	orr.w	r3, r3, #2
 80050dc:	81a3      	strh	r3, [r4, #12]
 80050de:	e7e3      	b.n	80050a8 <__smakebuf_r+0xc>
 80050e0:	4b0d      	ldr	r3, [pc, #52]	; (8005118 <__smakebuf_r+0x7c>)
 80050e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80050e4:	89a3      	ldrh	r3, [r4, #12]
 80050e6:	6020      	str	r0, [r4, #0]
 80050e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ec:	81a3      	strh	r3, [r4, #12]
 80050ee:	9b00      	ldr	r3, [sp, #0]
 80050f0:	6163      	str	r3, [r4, #20]
 80050f2:	9b01      	ldr	r3, [sp, #4]
 80050f4:	6120      	str	r0, [r4, #16]
 80050f6:	b15b      	cbz	r3, 8005110 <__smakebuf_r+0x74>
 80050f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050fc:	4630      	mov	r0, r6
 80050fe:	f000 fc05 	bl	800590c <_isatty_r>
 8005102:	b128      	cbz	r0, 8005110 <__smakebuf_r+0x74>
 8005104:	89a3      	ldrh	r3, [r4, #12]
 8005106:	f023 0303 	bic.w	r3, r3, #3
 800510a:	f043 0301 	orr.w	r3, r3, #1
 800510e:	81a3      	strh	r3, [r4, #12]
 8005110:	89a3      	ldrh	r3, [r4, #12]
 8005112:	431d      	orrs	r5, r3
 8005114:	81a5      	strh	r5, [r4, #12]
 8005116:	e7cd      	b.n	80050b4 <__smakebuf_r+0x18>
 8005118:	08004f09 	.word	0x08004f09

0800511c <_free_r>:
 800511c:	b538      	push	{r3, r4, r5, lr}
 800511e:	4605      	mov	r5, r0
 8005120:	2900      	cmp	r1, #0
 8005122:	d045      	beq.n	80051b0 <_free_r+0x94>
 8005124:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005128:	1f0c      	subs	r4, r1, #4
 800512a:	2b00      	cmp	r3, #0
 800512c:	bfb8      	it	lt
 800512e:	18e4      	addlt	r4, r4, r3
 8005130:	f000 fc0e 	bl	8005950 <__malloc_lock>
 8005134:	4a1f      	ldr	r2, [pc, #124]	; (80051b4 <_free_r+0x98>)
 8005136:	6813      	ldr	r3, [r2, #0]
 8005138:	4610      	mov	r0, r2
 800513a:	b933      	cbnz	r3, 800514a <_free_r+0x2e>
 800513c:	6063      	str	r3, [r4, #4]
 800513e:	6014      	str	r4, [r2, #0]
 8005140:	4628      	mov	r0, r5
 8005142:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005146:	f000 bc04 	b.w	8005952 <__malloc_unlock>
 800514a:	42a3      	cmp	r3, r4
 800514c:	d90c      	bls.n	8005168 <_free_r+0x4c>
 800514e:	6821      	ldr	r1, [r4, #0]
 8005150:	1862      	adds	r2, r4, r1
 8005152:	4293      	cmp	r3, r2
 8005154:	bf04      	itt	eq
 8005156:	681a      	ldreq	r2, [r3, #0]
 8005158:	685b      	ldreq	r3, [r3, #4]
 800515a:	6063      	str	r3, [r4, #4]
 800515c:	bf04      	itt	eq
 800515e:	1852      	addeq	r2, r2, r1
 8005160:	6022      	streq	r2, [r4, #0]
 8005162:	6004      	str	r4, [r0, #0]
 8005164:	e7ec      	b.n	8005140 <_free_r+0x24>
 8005166:	4613      	mov	r3, r2
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	b10a      	cbz	r2, 8005170 <_free_r+0x54>
 800516c:	42a2      	cmp	r2, r4
 800516e:	d9fa      	bls.n	8005166 <_free_r+0x4a>
 8005170:	6819      	ldr	r1, [r3, #0]
 8005172:	1858      	adds	r0, r3, r1
 8005174:	42a0      	cmp	r0, r4
 8005176:	d10b      	bne.n	8005190 <_free_r+0x74>
 8005178:	6820      	ldr	r0, [r4, #0]
 800517a:	4401      	add	r1, r0
 800517c:	1858      	adds	r0, r3, r1
 800517e:	4282      	cmp	r2, r0
 8005180:	6019      	str	r1, [r3, #0]
 8005182:	d1dd      	bne.n	8005140 <_free_r+0x24>
 8005184:	6810      	ldr	r0, [r2, #0]
 8005186:	6852      	ldr	r2, [r2, #4]
 8005188:	605a      	str	r2, [r3, #4]
 800518a:	4401      	add	r1, r0
 800518c:	6019      	str	r1, [r3, #0]
 800518e:	e7d7      	b.n	8005140 <_free_r+0x24>
 8005190:	d902      	bls.n	8005198 <_free_r+0x7c>
 8005192:	230c      	movs	r3, #12
 8005194:	602b      	str	r3, [r5, #0]
 8005196:	e7d3      	b.n	8005140 <_free_r+0x24>
 8005198:	6820      	ldr	r0, [r4, #0]
 800519a:	1821      	adds	r1, r4, r0
 800519c:	428a      	cmp	r2, r1
 800519e:	bf04      	itt	eq
 80051a0:	6811      	ldreq	r1, [r2, #0]
 80051a2:	6852      	ldreq	r2, [r2, #4]
 80051a4:	6062      	str	r2, [r4, #4]
 80051a6:	bf04      	itt	eq
 80051a8:	1809      	addeq	r1, r1, r0
 80051aa:	6021      	streq	r1, [r4, #0]
 80051ac:	605c      	str	r4, [r3, #4]
 80051ae:	e7c7      	b.n	8005140 <_free_r+0x24>
 80051b0:	bd38      	pop	{r3, r4, r5, pc}
 80051b2:	bf00      	nop
 80051b4:	200049a0 	.word	0x200049a0

080051b8 <_malloc_r>:
 80051b8:	b570      	push	{r4, r5, r6, lr}
 80051ba:	1ccd      	adds	r5, r1, #3
 80051bc:	f025 0503 	bic.w	r5, r5, #3
 80051c0:	3508      	adds	r5, #8
 80051c2:	2d0c      	cmp	r5, #12
 80051c4:	bf38      	it	cc
 80051c6:	250c      	movcc	r5, #12
 80051c8:	2d00      	cmp	r5, #0
 80051ca:	4606      	mov	r6, r0
 80051cc:	db01      	blt.n	80051d2 <_malloc_r+0x1a>
 80051ce:	42a9      	cmp	r1, r5
 80051d0:	d903      	bls.n	80051da <_malloc_r+0x22>
 80051d2:	230c      	movs	r3, #12
 80051d4:	6033      	str	r3, [r6, #0]
 80051d6:	2000      	movs	r0, #0
 80051d8:	bd70      	pop	{r4, r5, r6, pc}
 80051da:	f000 fbb9 	bl	8005950 <__malloc_lock>
 80051de:	4a21      	ldr	r2, [pc, #132]	; (8005264 <_malloc_r+0xac>)
 80051e0:	6814      	ldr	r4, [r2, #0]
 80051e2:	4621      	mov	r1, r4
 80051e4:	b991      	cbnz	r1, 800520c <_malloc_r+0x54>
 80051e6:	4c20      	ldr	r4, [pc, #128]	; (8005268 <_malloc_r+0xb0>)
 80051e8:	6823      	ldr	r3, [r4, #0]
 80051ea:	b91b      	cbnz	r3, 80051f4 <_malloc_r+0x3c>
 80051ec:	4630      	mov	r0, r6
 80051ee:	f000 fb05 	bl	80057fc <_sbrk_r>
 80051f2:	6020      	str	r0, [r4, #0]
 80051f4:	4629      	mov	r1, r5
 80051f6:	4630      	mov	r0, r6
 80051f8:	f000 fb00 	bl	80057fc <_sbrk_r>
 80051fc:	1c43      	adds	r3, r0, #1
 80051fe:	d124      	bne.n	800524a <_malloc_r+0x92>
 8005200:	230c      	movs	r3, #12
 8005202:	6033      	str	r3, [r6, #0]
 8005204:	4630      	mov	r0, r6
 8005206:	f000 fba4 	bl	8005952 <__malloc_unlock>
 800520a:	e7e4      	b.n	80051d6 <_malloc_r+0x1e>
 800520c:	680b      	ldr	r3, [r1, #0]
 800520e:	1b5b      	subs	r3, r3, r5
 8005210:	d418      	bmi.n	8005244 <_malloc_r+0x8c>
 8005212:	2b0b      	cmp	r3, #11
 8005214:	d90f      	bls.n	8005236 <_malloc_r+0x7e>
 8005216:	600b      	str	r3, [r1, #0]
 8005218:	50cd      	str	r5, [r1, r3]
 800521a:	18cc      	adds	r4, r1, r3
 800521c:	4630      	mov	r0, r6
 800521e:	f000 fb98 	bl	8005952 <__malloc_unlock>
 8005222:	f104 000b 	add.w	r0, r4, #11
 8005226:	1d23      	adds	r3, r4, #4
 8005228:	f020 0007 	bic.w	r0, r0, #7
 800522c:	1ac3      	subs	r3, r0, r3
 800522e:	d0d3      	beq.n	80051d8 <_malloc_r+0x20>
 8005230:	425a      	negs	r2, r3
 8005232:	50e2      	str	r2, [r4, r3]
 8005234:	e7d0      	b.n	80051d8 <_malloc_r+0x20>
 8005236:	428c      	cmp	r4, r1
 8005238:	684b      	ldr	r3, [r1, #4]
 800523a:	bf16      	itet	ne
 800523c:	6063      	strne	r3, [r4, #4]
 800523e:	6013      	streq	r3, [r2, #0]
 8005240:	460c      	movne	r4, r1
 8005242:	e7eb      	b.n	800521c <_malloc_r+0x64>
 8005244:	460c      	mov	r4, r1
 8005246:	6849      	ldr	r1, [r1, #4]
 8005248:	e7cc      	b.n	80051e4 <_malloc_r+0x2c>
 800524a:	1cc4      	adds	r4, r0, #3
 800524c:	f024 0403 	bic.w	r4, r4, #3
 8005250:	42a0      	cmp	r0, r4
 8005252:	d005      	beq.n	8005260 <_malloc_r+0xa8>
 8005254:	1a21      	subs	r1, r4, r0
 8005256:	4630      	mov	r0, r6
 8005258:	f000 fad0 	bl	80057fc <_sbrk_r>
 800525c:	3001      	adds	r0, #1
 800525e:	d0cf      	beq.n	8005200 <_malloc_r+0x48>
 8005260:	6025      	str	r5, [r4, #0]
 8005262:	e7db      	b.n	800521c <_malloc_r+0x64>
 8005264:	200049a0 	.word	0x200049a0
 8005268:	200049a4 	.word	0x200049a4

0800526c <__sfputc_r>:
 800526c:	6893      	ldr	r3, [r2, #8]
 800526e:	3b01      	subs	r3, #1
 8005270:	2b00      	cmp	r3, #0
 8005272:	b410      	push	{r4}
 8005274:	6093      	str	r3, [r2, #8]
 8005276:	da08      	bge.n	800528a <__sfputc_r+0x1e>
 8005278:	6994      	ldr	r4, [r2, #24]
 800527a:	42a3      	cmp	r3, r4
 800527c:	db01      	blt.n	8005282 <__sfputc_r+0x16>
 800527e:	290a      	cmp	r1, #10
 8005280:	d103      	bne.n	800528a <__sfputc_r+0x1e>
 8005282:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005286:	f7ff bcab 	b.w	8004be0 <__swbuf_r>
 800528a:	6813      	ldr	r3, [r2, #0]
 800528c:	1c58      	adds	r0, r3, #1
 800528e:	6010      	str	r0, [r2, #0]
 8005290:	7019      	strb	r1, [r3, #0]
 8005292:	4608      	mov	r0, r1
 8005294:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005298:	4770      	bx	lr

0800529a <__sfputs_r>:
 800529a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529c:	4606      	mov	r6, r0
 800529e:	460f      	mov	r7, r1
 80052a0:	4614      	mov	r4, r2
 80052a2:	18d5      	adds	r5, r2, r3
 80052a4:	42ac      	cmp	r4, r5
 80052a6:	d101      	bne.n	80052ac <__sfputs_r+0x12>
 80052a8:	2000      	movs	r0, #0
 80052aa:	e007      	b.n	80052bc <__sfputs_r+0x22>
 80052ac:	463a      	mov	r2, r7
 80052ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052b2:	4630      	mov	r0, r6
 80052b4:	f7ff ffda 	bl	800526c <__sfputc_r>
 80052b8:	1c43      	adds	r3, r0, #1
 80052ba:	d1f3      	bne.n	80052a4 <__sfputs_r+0xa>
 80052bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080052c0 <_vfiprintf_r>:
 80052c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052c4:	460c      	mov	r4, r1
 80052c6:	b09d      	sub	sp, #116	; 0x74
 80052c8:	4617      	mov	r7, r2
 80052ca:	461d      	mov	r5, r3
 80052cc:	4606      	mov	r6, r0
 80052ce:	b118      	cbz	r0, 80052d8 <_vfiprintf_r+0x18>
 80052d0:	6983      	ldr	r3, [r0, #24]
 80052d2:	b90b      	cbnz	r3, 80052d8 <_vfiprintf_r+0x18>
 80052d4:	f7ff fe34 	bl	8004f40 <__sinit>
 80052d8:	4b7c      	ldr	r3, [pc, #496]	; (80054cc <_vfiprintf_r+0x20c>)
 80052da:	429c      	cmp	r4, r3
 80052dc:	d158      	bne.n	8005390 <_vfiprintf_r+0xd0>
 80052de:	6874      	ldr	r4, [r6, #4]
 80052e0:	89a3      	ldrh	r3, [r4, #12]
 80052e2:	0718      	lsls	r0, r3, #28
 80052e4:	d55e      	bpl.n	80053a4 <_vfiprintf_r+0xe4>
 80052e6:	6923      	ldr	r3, [r4, #16]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d05b      	beq.n	80053a4 <_vfiprintf_r+0xe4>
 80052ec:	2300      	movs	r3, #0
 80052ee:	9309      	str	r3, [sp, #36]	; 0x24
 80052f0:	2320      	movs	r3, #32
 80052f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052f6:	2330      	movs	r3, #48	; 0x30
 80052f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80052fc:	9503      	str	r5, [sp, #12]
 80052fe:	f04f 0b01 	mov.w	fp, #1
 8005302:	46b8      	mov	r8, r7
 8005304:	4645      	mov	r5, r8
 8005306:	f815 3b01 	ldrb.w	r3, [r5], #1
 800530a:	b10b      	cbz	r3, 8005310 <_vfiprintf_r+0x50>
 800530c:	2b25      	cmp	r3, #37	; 0x25
 800530e:	d154      	bne.n	80053ba <_vfiprintf_r+0xfa>
 8005310:	ebb8 0a07 	subs.w	sl, r8, r7
 8005314:	d00b      	beq.n	800532e <_vfiprintf_r+0x6e>
 8005316:	4653      	mov	r3, sl
 8005318:	463a      	mov	r2, r7
 800531a:	4621      	mov	r1, r4
 800531c:	4630      	mov	r0, r6
 800531e:	f7ff ffbc 	bl	800529a <__sfputs_r>
 8005322:	3001      	adds	r0, #1
 8005324:	f000 80c2 	beq.w	80054ac <_vfiprintf_r+0x1ec>
 8005328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800532a:	4453      	add	r3, sl
 800532c:	9309      	str	r3, [sp, #36]	; 0x24
 800532e:	f898 3000 	ldrb.w	r3, [r8]
 8005332:	2b00      	cmp	r3, #0
 8005334:	f000 80ba 	beq.w	80054ac <_vfiprintf_r+0x1ec>
 8005338:	2300      	movs	r3, #0
 800533a:	f04f 32ff 	mov.w	r2, #4294967295
 800533e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005342:	9304      	str	r3, [sp, #16]
 8005344:	9307      	str	r3, [sp, #28]
 8005346:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800534a:	931a      	str	r3, [sp, #104]	; 0x68
 800534c:	46a8      	mov	r8, r5
 800534e:	2205      	movs	r2, #5
 8005350:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005354:	485e      	ldr	r0, [pc, #376]	; (80054d0 <_vfiprintf_r+0x210>)
 8005356:	f7fa ff4b 	bl	80001f0 <memchr>
 800535a:	9b04      	ldr	r3, [sp, #16]
 800535c:	bb78      	cbnz	r0, 80053be <_vfiprintf_r+0xfe>
 800535e:	06d9      	lsls	r1, r3, #27
 8005360:	bf44      	itt	mi
 8005362:	2220      	movmi	r2, #32
 8005364:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005368:	071a      	lsls	r2, r3, #28
 800536a:	bf44      	itt	mi
 800536c:	222b      	movmi	r2, #43	; 0x2b
 800536e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005372:	782a      	ldrb	r2, [r5, #0]
 8005374:	2a2a      	cmp	r2, #42	; 0x2a
 8005376:	d02a      	beq.n	80053ce <_vfiprintf_r+0x10e>
 8005378:	9a07      	ldr	r2, [sp, #28]
 800537a:	46a8      	mov	r8, r5
 800537c:	2000      	movs	r0, #0
 800537e:	250a      	movs	r5, #10
 8005380:	4641      	mov	r1, r8
 8005382:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005386:	3b30      	subs	r3, #48	; 0x30
 8005388:	2b09      	cmp	r3, #9
 800538a:	d969      	bls.n	8005460 <_vfiprintf_r+0x1a0>
 800538c:	b360      	cbz	r0, 80053e8 <_vfiprintf_r+0x128>
 800538e:	e024      	b.n	80053da <_vfiprintf_r+0x11a>
 8005390:	4b50      	ldr	r3, [pc, #320]	; (80054d4 <_vfiprintf_r+0x214>)
 8005392:	429c      	cmp	r4, r3
 8005394:	d101      	bne.n	800539a <_vfiprintf_r+0xda>
 8005396:	68b4      	ldr	r4, [r6, #8]
 8005398:	e7a2      	b.n	80052e0 <_vfiprintf_r+0x20>
 800539a:	4b4f      	ldr	r3, [pc, #316]	; (80054d8 <_vfiprintf_r+0x218>)
 800539c:	429c      	cmp	r4, r3
 800539e:	bf08      	it	eq
 80053a0:	68f4      	ldreq	r4, [r6, #12]
 80053a2:	e79d      	b.n	80052e0 <_vfiprintf_r+0x20>
 80053a4:	4621      	mov	r1, r4
 80053a6:	4630      	mov	r0, r6
 80053a8:	f7ff fc6c 	bl	8004c84 <__swsetup_r>
 80053ac:	2800      	cmp	r0, #0
 80053ae:	d09d      	beq.n	80052ec <_vfiprintf_r+0x2c>
 80053b0:	f04f 30ff 	mov.w	r0, #4294967295
 80053b4:	b01d      	add	sp, #116	; 0x74
 80053b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ba:	46a8      	mov	r8, r5
 80053bc:	e7a2      	b.n	8005304 <_vfiprintf_r+0x44>
 80053be:	4a44      	ldr	r2, [pc, #272]	; (80054d0 <_vfiprintf_r+0x210>)
 80053c0:	1a80      	subs	r0, r0, r2
 80053c2:	fa0b f000 	lsl.w	r0, fp, r0
 80053c6:	4318      	orrs	r0, r3
 80053c8:	9004      	str	r0, [sp, #16]
 80053ca:	4645      	mov	r5, r8
 80053cc:	e7be      	b.n	800534c <_vfiprintf_r+0x8c>
 80053ce:	9a03      	ldr	r2, [sp, #12]
 80053d0:	1d11      	adds	r1, r2, #4
 80053d2:	6812      	ldr	r2, [r2, #0]
 80053d4:	9103      	str	r1, [sp, #12]
 80053d6:	2a00      	cmp	r2, #0
 80053d8:	db01      	blt.n	80053de <_vfiprintf_r+0x11e>
 80053da:	9207      	str	r2, [sp, #28]
 80053dc:	e004      	b.n	80053e8 <_vfiprintf_r+0x128>
 80053de:	4252      	negs	r2, r2
 80053e0:	f043 0302 	orr.w	r3, r3, #2
 80053e4:	9207      	str	r2, [sp, #28]
 80053e6:	9304      	str	r3, [sp, #16]
 80053e8:	f898 3000 	ldrb.w	r3, [r8]
 80053ec:	2b2e      	cmp	r3, #46	; 0x2e
 80053ee:	d10e      	bne.n	800540e <_vfiprintf_r+0x14e>
 80053f0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80053f4:	2b2a      	cmp	r3, #42	; 0x2a
 80053f6:	d138      	bne.n	800546a <_vfiprintf_r+0x1aa>
 80053f8:	9b03      	ldr	r3, [sp, #12]
 80053fa:	1d1a      	adds	r2, r3, #4
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	9203      	str	r2, [sp, #12]
 8005400:	2b00      	cmp	r3, #0
 8005402:	bfb8      	it	lt
 8005404:	f04f 33ff 	movlt.w	r3, #4294967295
 8005408:	f108 0802 	add.w	r8, r8, #2
 800540c:	9305      	str	r3, [sp, #20]
 800540e:	4d33      	ldr	r5, [pc, #204]	; (80054dc <_vfiprintf_r+0x21c>)
 8005410:	f898 1000 	ldrb.w	r1, [r8]
 8005414:	2203      	movs	r2, #3
 8005416:	4628      	mov	r0, r5
 8005418:	f7fa feea 	bl	80001f0 <memchr>
 800541c:	b140      	cbz	r0, 8005430 <_vfiprintf_r+0x170>
 800541e:	2340      	movs	r3, #64	; 0x40
 8005420:	1b40      	subs	r0, r0, r5
 8005422:	fa03 f000 	lsl.w	r0, r3, r0
 8005426:	9b04      	ldr	r3, [sp, #16]
 8005428:	4303      	orrs	r3, r0
 800542a:	f108 0801 	add.w	r8, r8, #1
 800542e:	9304      	str	r3, [sp, #16]
 8005430:	f898 1000 	ldrb.w	r1, [r8]
 8005434:	482a      	ldr	r0, [pc, #168]	; (80054e0 <_vfiprintf_r+0x220>)
 8005436:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800543a:	2206      	movs	r2, #6
 800543c:	f108 0701 	add.w	r7, r8, #1
 8005440:	f7fa fed6 	bl	80001f0 <memchr>
 8005444:	2800      	cmp	r0, #0
 8005446:	d037      	beq.n	80054b8 <_vfiprintf_r+0x1f8>
 8005448:	4b26      	ldr	r3, [pc, #152]	; (80054e4 <_vfiprintf_r+0x224>)
 800544a:	bb1b      	cbnz	r3, 8005494 <_vfiprintf_r+0x1d4>
 800544c:	9b03      	ldr	r3, [sp, #12]
 800544e:	3307      	adds	r3, #7
 8005450:	f023 0307 	bic.w	r3, r3, #7
 8005454:	3308      	adds	r3, #8
 8005456:	9303      	str	r3, [sp, #12]
 8005458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800545a:	444b      	add	r3, r9
 800545c:	9309      	str	r3, [sp, #36]	; 0x24
 800545e:	e750      	b.n	8005302 <_vfiprintf_r+0x42>
 8005460:	fb05 3202 	mla	r2, r5, r2, r3
 8005464:	2001      	movs	r0, #1
 8005466:	4688      	mov	r8, r1
 8005468:	e78a      	b.n	8005380 <_vfiprintf_r+0xc0>
 800546a:	2300      	movs	r3, #0
 800546c:	f108 0801 	add.w	r8, r8, #1
 8005470:	9305      	str	r3, [sp, #20]
 8005472:	4619      	mov	r1, r3
 8005474:	250a      	movs	r5, #10
 8005476:	4640      	mov	r0, r8
 8005478:	f810 2b01 	ldrb.w	r2, [r0], #1
 800547c:	3a30      	subs	r2, #48	; 0x30
 800547e:	2a09      	cmp	r2, #9
 8005480:	d903      	bls.n	800548a <_vfiprintf_r+0x1ca>
 8005482:	2b00      	cmp	r3, #0
 8005484:	d0c3      	beq.n	800540e <_vfiprintf_r+0x14e>
 8005486:	9105      	str	r1, [sp, #20]
 8005488:	e7c1      	b.n	800540e <_vfiprintf_r+0x14e>
 800548a:	fb05 2101 	mla	r1, r5, r1, r2
 800548e:	2301      	movs	r3, #1
 8005490:	4680      	mov	r8, r0
 8005492:	e7f0      	b.n	8005476 <_vfiprintf_r+0x1b6>
 8005494:	ab03      	add	r3, sp, #12
 8005496:	9300      	str	r3, [sp, #0]
 8005498:	4622      	mov	r2, r4
 800549a:	4b13      	ldr	r3, [pc, #76]	; (80054e8 <_vfiprintf_r+0x228>)
 800549c:	a904      	add	r1, sp, #16
 800549e:	4630      	mov	r0, r6
 80054a0:	f3af 8000 	nop.w
 80054a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80054a8:	4681      	mov	r9, r0
 80054aa:	d1d5      	bne.n	8005458 <_vfiprintf_r+0x198>
 80054ac:	89a3      	ldrh	r3, [r4, #12]
 80054ae:	065b      	lsls	r3, r3, #25
 80054b0:	f53f af7e 	bmi.w	80053b0 <_vfiprintf_r+0xf0>
 80054b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054b6:	e77d      	b.n	80053b4 <_vfiprintf_r+0xf4>
 80054b8:	ab03      	add	r3, sp, #12
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	4622      	mov	r2, r4
 80054be:	4b0a      	ldr	r3, [pc, #40]	; (80054e8 <_vfiprintf_r+0x228>)
 80054c0:	a904      	add	r1, sp, #16
 80054c2:	4630      	mov	r0, r6
 80054c4:	f000 f888 	bl	80055d8 <_printf_i>
 80054c8:	e7ec      	b.n	80054a4 <_vfiprintf_r+0x1e4>
 80054ca:	bf00      	nop
 80054cc:	08005b3c 	.word	0x08005b3c
 80054d0:	08005b7c 	.word	0x08005b7c
 80054d4:	08005b5c 	.word	0x08005b5c
 80054d8:	08005b1c 	.word	0x08005b1c
 80054dc:	08005b82 	.word	0x08005b82
 80054e0:	08005b86 	.word	0x08005b86
 80054e4:	00000000 	.word	0x00000000
 80054e8:	0800529b 	.word	0x0800529b

080054ec <_printf_common>:
 80054ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054f0:	4691      	mov	r9, r2
 80054f2:	461f      	mov	r7, r3
 80054f4:	688a      	ldr	r2, [r1, #8]
 80054f6:	690b      	ldr	r3, [r1, #16]
 80054f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054fc:	4293      	cmp	r3, r2
 80054fe:	bfb8      	it	lt
 8005500:	4613      	movlt	r3, r2
 8005502:	f8c9 3000 	str.w	r3, [r9]
 8005506:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800550a:	4606      	mov	r6, r0
 800550c:	460c      	mov	r4, r1
 800550e:	b112      	cbz	r2, 8005516 <_printf_common+0x2a>
 8005510:	3301      	adds	r3, #1
 8005512:	f8c9 3000 	str.w	r3, [r9]
 8005516:	6823      	ldr	r3, [r4, #0]
 8005518:	0699      	lsls	r1, r3, #26
 800551a:	bf42      	ittt	mi
 800551c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005520:	3302      	addmi	r3, #2
 8005522:	f8c9 3000 	strmi.w	r3, [r9]
 8005526:	6825      	ldr	r5, [r4, #0]
 8005528:	f015 0506 	ands.w	r5, r5, #6
 800552c:	d107      	bne.n	800553e <_printf_common+0x52>
 800552e:	f104 0a19 	add.w	sl, r4, #25
 8005532:	68e3      	ldr	r3, [r4, #12]
 8005534:	f8d9 2000 	ldr.w	r2, [r9]
 8005538:	1a9b      	subs	r3, r3, r2
 800553a:	42ab      	cmp	r3, r5
 800553c:	dc28      	bgt.n	8005590 <_printf_common+0xa4>
 800553e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005542:	6822      	ldr	r2, [r4, #0]
 8005544:	3300      	adds	r3, #0
 8005546:	bf18      	it	ne
 8005548:	2301      	movne	r3, #1
 800554a:	0692      	lsls	r2, r2, #26
 800554c:	d42d      	bmi.n	80055aa <_printf_common+0xbe>
 800554e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005552:	4639      	mov	r1, r7
 8005554:	4630      	mov	r0, r6
 8005556:	47c0      	blx	r8
 8005558:	3001      	adds	r0, #1
 800555a:	d020      	beq.n	800559e <_printf_common+0xb2>
 800555c:	6823      	ldr	r3, [r4, #0]
 800555e:	68e5      	ldr	r5, [r4, #12]
 8005560:	f8d9 2000 	ldr.w	r2, [r9]
 8005564:	f003 0306 	and.w	r3, r3, #6
 8005568:	2b04      	cmp	r3, #4
 800556a:	bf08      	it	eq
 800556c:	1aad      	subeq	r5, r5, r2
 800556e:	68a3      	ldr	r3, [r4, #8]
 8005570:	6922      	ldr	r2, [r4, #16]
 8005572:	bf0c      	ite	eq
 8005574:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005578:	2500      	movne	r5, #0
 800557a:	4293      	cmp	r3, r2
 800557c:	bfc4      	itt	gt
 800557e:	1a9b      	subgt	r3, r3, r2
 8005580:	18ed      	addgt	r5, r5, r3
 8005582:	f04f 0900 	mov.w	r9, #0
 8005586:	341a      	adds	r4, #26
 8005588:	454d      	cmp	r5, r9
 800558a:	d11a      	bne.n	80055c2 <_printf_common+0xd6>
 800558c:	2000      	movs	r0, #0
 800558e:	e008      	b.n	80055a2 <_printf_common+0xb6>
 8005590:	2301      	movs	r3, #1
 8005592:	4652      	mov	r2, sl
 8005594:	4639      	mov	r1, r7
 8005596:	4630      	mov	r0, r6
 8005598:	47c0      	blx	r8
 800559a:	3001      	adds	r0, #1
 800559c:	d103      	bne.n	80055a6 <_printf_common+0xba>
 800559e:	f04f 30ff 	mov.w	r0, #4294967295
 80055a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055a6:	3501      	adds	r5, #1
 80055a8:	e7c3      	b.n	8005532 <_printf_common+0x46>
 80055aa:	18e1      	adds	r1, r4, r3
 80055ac:	1c5a      	adds	r2, r3, #1
 80055ae:	2030      	movs	r0, #48	; 0x30
 80055b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055b4:	4422      	add	r2, r4
 80055b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055be:	3302      	adds	r3, #2
 80055c0:	e7c5      	b.n	800554e <_printf_common+0x62>
 80055c2:	2301      	movs	r3, #1
 80055c4:	4622      	mov	r2, r4
 80055c6:	4639      	mov	r1, r7
 80055c8:	4630      	mov	r0, r6
 80055ca:	47c0      	blx	r8
 80055cc:	3001      	adds	r0, #1
 80055ce:	d0e6      	beq.n	800559e <_printf_common+0xb2>
 80055d0:	f109 0901 	add.w	r9, r9, #1
 80055d4:	e7d8      	b.n	8005588 <_printf_common+0x9c>
	...

080055d8 <_printf_i>:
 80055d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80055dc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80055e0:	460c      	mov	r4, r1
 80055e2:	7e09      	ldrb	r1, [r1, #24]
 80055e4:	b085      	sub	sp, #20
 80055e6:	296e      	cmp	r1, #110	; 0x6e
 80055e8:	4617      	mov	r7, r2
 80055ea:	4606      	mov	r6, r0
 80055ec:	4698      	mov	r8, r3
 80055ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80055f0:	f000 80b3 	beq.w	800575a <_printf_i+0x182>
 80055f4:	d822      	bhi.n	800563c <_printf_i+0x64>
 80055f6:	2963      	cmp	r1, #99	; 0x63
 80055f8:	d036      	beq.n	8005668 <_printf_i+0x90>
 80055fa:	d80a      	bhi.n	8005612 <_printf_i+0x3a>
 80055fc:	2900      	cmp	r1, #0
 80055fe:	f000 80b9 	beq.w	8005774 <_printf_i+0x19c>
 8005602:	2958      	cmp	r1, #88	; 0x58
 8005604:	f000 8083 	beq.w	800570e <_printf_i+0x136>
 8005608:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800560c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005610:	e032      	b.n	8005678 <_printf_i+0xa0>
 8005612:	2964      	cmp	r1, #100	; 0x64
 8005614:	d001      	beq.n	800561a <_printf_i+0x42>
 8005616:	2969      	cmp	r1, #105	; 0x69
 8005618:	d1f6      	bne.n	8005608 <_printf_i+0x30>
 800561a:	6820      	ldr	r0, [r4, #0]
 800561c:	6813      	ldr	r3, [r2, #0]
 800561e:	0605      	lsls	r5, r0, #24
 8005620:	f103 0104 	add.w	r1, r3, #4
 8005624:	d52a      	bpl.n	800567c <_printf_i+0xa4>
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6011      	str	r1, [r2, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	da03      	bge.n	8005636 <_printf_i+0x5e>
 800562e:	222d      	movs	r2, #45	; 0x2d
 8005630:	425b      	negs	r3, r3
 8005632:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005636:	486f      	ldr	r0, [pc, #444]	; (80057f4 <_printf_i+0x21c>)
 8005638:	220a      	movs	r2, #10
 800563a:	e039      	b.n	80056b0 <_printf_i+0xd8>
 800563c:	2973      	cmp	r1, #115	; 0x73
 800563e:	f000 809d 	beq.w	800577c <_printf_i+0x1a4>
 8005642:	d808      	bhi.n	8005656 <_printf_i+0x7e>
 8005644:	296f      	cmp	r1, #111	; 0x6f
 8005646:	d020      	beq.n	800568a <_printf_i+0xb2>
 8005648:	2970      	cmp	r1, #112	; 0x70
 800564a:	d1dd      	bne.n	8005608 <_printf_i+0x30>
 800564c:	6823      	ldr	r3, [r4, #0]
 800564e:	f043 0320 	orr.w	r3, r3, #32
 8005652:	6023      	str	r3, [r4, #0]
 8005654:	e003      	b.n	800565e <_printf_i+0x86>
 8005656:	2975      	cmp	r1, #117	; 0x75
 8005658:	d017      	beq.n	800568a <_printf_i+0xb2>
 800565a:	2978      	cmp	r1, #120	; 0x78
 800565c:	d1d4      	bne.n	8005608 <_printf_i+0x30>
 800565e:	2378      	movs	r3, #120	; 0x78
 8005660:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005664:	4864      	ldr	r0, [pc, #400]	; (80057f8 <_printf_i+0x220>)
 8005666:	e055      	b.n	8005714 <_printf_i+0x13c>
 8005668:	6813      	ldr	r3, [r2, #0]
 800566a:	1d19      	adds	r1, r3, #4
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	6011      	str	r1, [r2, #0]
 8005670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005674:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005678:	2301      	movs	r3, #1
 800567a:	e08c      	b.n	8005796 <_printf_i+0x1be>
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	6011      	str	r1, [r2, #0]
 8005680:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005684:	bf18      	it	ne
 8005686:	b21b      	sxthne	r3, r3
 8005688:	e7cf      	b.n	800562a <_printf_i+0x52>
 800568a:	6813      	ldr	r3, [r2, #0]
 800568c:	6825      	ldr	r5, [r4, #0]
 800568e:	1d18      	adds	r0, r3, #4
 8005690:	6010      	str	r0, [r2, #0]
 8005692:	0628      	lsls	r0, r5, #24
 8005694:	d501      	bpl.n	800569a <_printf_i+0xc2>
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	e002      	b.n	80056a0 <_printf_i+0xc8>
 800569a:	0668      	lsls	r0, r5, #25
 800569c:	d5fb      	bpl.n	8005696 <_printf_i+0xbe>
 800569e:	881b      	ldrh	r3, [r3, #0]
 80056a0:	4854      	ldr	r0, [pc, #336]	; (80057f4 <_printf_i+0x21c>)
 80056a2:	296f      	cmp	r1, #111	; 0x6f
 80056a4:	bf14      	ite	ne
 80056a6:	220a      	movne	r2, #10
 80056a8:	2208      	moveq	r2, #8
 80056aa:	2100      	movs	r1, #0
 80056ac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80056b0:	6865      	ldr	r5, [r4, #4]
 80056b2:	60a5      	str	r5, [r4, #8]
 80056b4:	2d00      	cmp	r5, #0
 80056b6:	f2c0 8095 	blt.w	80057e4 <_printf_i+0x20c>
 80056ba:	6821      	ldr	r1, [r4, #0]
 80056bc:	f021 0104 	bic.w	r1, r1, #4
 80056c0:	6021      	str	r1, [r4, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d13d      	bne.n	8005742 <_printf_i+0x16a>
 80056c6:	2d00      	cmp	r5, #0
 80056c8:	f040 808e 	bne.w	80057e8 <_printf_i+0x210>
 80056cc:	4665      	mov	r5, ip
 80056ce:	2a08      	cmp	r2, #8
 80056d0:	d10b      	bne.n	80056ea <_printf_i+0x112>
 80056d2:	6823      	ldr	r3, [r4, #0]
 80056d4:	07db      	lsls	r3, r3, #31
 80056d6:	d508      	bpl.n	80056ea <_printf_i+0x112>
 80056d8:	6923      	ldr	r3, [r4, #16]
 80056da:	6862      	ldr	r2, [r4, #4]
 80056dc:	429a      	cmp	r2, r3
 80056de:	bfde      	ittt	le
 80056e0:	2330      	movle	r3, #48	; 0x30
 80056e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80056e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80056ea:	ebac 0305 	sub.w	r3, ip, r5
 80056ee:	6123      	str	r3, [r4, #16]
 80056f0:	f8cd 8000 	str.w	r8, [sp]
 80056f4:	463b      	mov	r3, r7
 80056f6:	aa03      	add	r2, sp, #12
 80056f8:	4621      	mov	r1, r4
 80056fa:	4630      	mov	r0, r6
 80056fc:	f7ff fef6 	bl	80054ec <_printf_common>
 8005700:	3001      	adds	r0, #1
 8005702:	d14d      	bne.n	80057a0 <_printf_i+0x1c8>
 8005704:	f04f 30ff 	mov.w	r0, #4294967295
 8005708:	b005      	add	sp, #20
 800570a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800570e:	4839      	ldr	r0, [pc, #228]	; (80057f4 <_printf_i+0x21c>)
 8005710:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005714:	6813      	ldr	r3, [r2, #0]
 8005716:	6821      	ldr	r1, [r4, #0]
 8005718:	1d1d      	adds	r5, r3, #4
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6015      	str	r5, [r2, #0]
 800571e:	060a      	lsls	r2, r1, #24
 8005720:	d50b      	bpl.n	800573a <_printf_i+0x162>
 8005722:	07ca      	lsls	r2, r1, #31
 8005724:	bf44      	itt	mi
 8005726:	f041 0120 	orrmi.w	r1, r1, #32
 800572a:	6021      	strmi	r1, [r4, #0]
 800572c:	b91b      	cbnz	r3, 8005736 <_printf_i+0x15e>
 800572e:	6822      	ldr	r2, [r4, #0]
 8005730:	f022 0220 	bic.w	r2, r2, #32
 8005734:	6022      	str	r2, [r4, #0]
 8005736:	2210      	movs	r2, #16
 8005738:	e7b7      	b.n	80056aa <_printf_i+0xd2>
 800573a:	064d      	lsls	r5, r1, #25
 800573c:	bf48      	it	mi
 800573e:	b29b      	uxthmi	r3, r3
 8005740:	e7ef      	b.n	8005722 <_printf_i+0x14a>
 8005742:	4665      	mov	r5, ip
 8005744:	fbb3 f1f2 	udiv	r1, r3, r2
 8005748:	fb02 3311 	mls	r3, r2, r1, r3
 800574c:	5cc3      	ldrb	r3, [r0, r3]
 800574e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005752:	460b      	mov	r3, r1
 8005754:	2900      	cmp	r1, #0
 8005756:	d1f5      	bne.n	8005744 <_printf_i+0x16c>
 8005758:	e7b9      	b.n	80056ce <_printf_i+0xf6>
 800575a:	6813      	ldr	r3, [r2, #0]
 800575c:	6825      	ldr	r5, [r4, #0]
 800575e:	6961      	ldr	r1, [r4, #20]
 8005760:	1d18      	adds	r0, r3, #4
 8005762:	6010      	str	r0, [r2, #0]
 8005764:	0628      	lsls	r0, r5, #24
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	d501      	bpl.n	800576e <_printf_i+0x196>
 800576a:	6019      	str	r1, [r3, #0]
 800576c:	e002      	b.n	8005774 <_printf_i+0x19c>
 800576e:	066a      	lsls	r2, r5, #25
 8005770:	d5fb      	bpl.n	800576a <_printf_i+0x192>
 8005772:	8019      	strh	r1, [r3, #0]
 8005774:	2300      	movs	r3, #0
 8005776:	6123      	str	r3, [r4, #16]
 8005778:	4665      	mov	r5, ip
 800577a:	e7b9      	b.n	80056f0 <_printf_i+0x118>
 800577c:	6813      	ldr	r3, [r2, #0]
 800577e:	1d19      	adds	r1, r3, #4
 8005780:	6011      	str	r1, [r2, #0]
 8005782:	681d      	ldr	r5, [r3, #0]
 8005784:	6862      	ldr	r2, [r4, #4]
 8005786:	2100      	movs	r1, #0
 8005788:	4628      	mov	r0, r5
 800578a:	f7fa fd31 	bl	80001f0 <memchr>
 800578e:	b108      	cbz	r0, 8005794 <_printf_i+0x1bc>
 8005790:	1b40      	subs	r0, r0, r5
 8005792:	6060      	str	r0, [r4, #4]
 8005794:	6863      	ldr	r3, [r4, #4]
 8005796:	6123      	str	r3, [r4, #16]
 8005798:	2300      	movs	r3, #0
 800579a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800579e:	e7a7      	b.n	80056f0 <_printf_i+0x118>
 80057a0:	6923      	ldr	r3, [r4, #16]
 80057a2:	462a      	mov	r2, r5
 80057a4:	4639      	mov	r1, r7
 80057a6:	4630      	mov	r0, r6
 80057a8:	47c0      	blx	r8
 80057aa:	3001      	adds	r0, #1
 80057ac:	d0aa      	beq.n	8005704 <_printf_i+0x12c>
 80057ae:	6823      	ldr	r3, [r4, #0]
 80057b0:	079b      	lsls	r3, r3, #30
 80057b2:	d413      	bmi.n	80057dc <_printf_i+0x204>
 80057b4:	68e0      	ldr	r0, [r4, #12]
 80057b6:	9b03      	ldr	r3, [sp, #12]
 80057b8:	4298      	cmp	r0, r3
 80057ba:	bfb8      	it	lt
 80057bc:	4618      	movlt	r0, r3
 80057be:	e7a3      	b.n	8005708 <_printf_i+0x130>
 80057c0:	2301      	movs	r3, #1
 80057c2:	464a      	mov	r2, r9
 80057c4:	4639      	mov	r1, r7
 80057c6:	4630      	mov	r0, r6
 80057c8:	47c0      	blx	r8
 80057ca:	3001      	adds	r0, #1
 80057cc:	d09a      	beq.n	8005704 <_printf_i+0x12c>
 80057ce:	3501      	adds	r5, #1
 80057d0:	68e3      	ldr	r3, [r4, #12]
 80057d2:	9a03      	ldr	r2, [sp, #12]
 80057d4:	1a9b      	subs	r3, r3, r2
 80057d6:	42ab      	cmp	r3, r5
 80057d8:	dcf2      	bgt.n	80057c0 <_printf_i+0x1e8>
 80057da:	e7eb      	b.n	80057b4 <_printf_i+0x1dc>
 80057dc:	2500      	movs	r5, #0
 80057de:	f104 0919 	add.w	r9, r4, #25
 80057e2:	e7f5      	b.n	80057d0 <_printf_i+0x1f8>
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1ac      	bne.n	8005742 <_printf_i+0x16a>
 80057e8:	7803      	ldrb	r3, [r0, #0]
 80057ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057f2:	e76c      	b.n	80056ce <_printf_i+0xf6>
 80057f4:	08005b8d 	.word	0x08005b8d
 80057f8:	08005b9e 	.word	0x08005b9e

080057fc <_sbrk_r>:
 80057fc:	b538      	push	{r3, r4, r5, lr}
 80057fe:	4c06      	ldr	r4, [pc, #24]	; (8005818 <_sbrk_r+0x1c>)
 8005800:	2300      	movs	r3, #0
 8005802:	4605      	mov	r5, r0
 8005804:	4608      	mov	r0, r1
 8005806:	6023      	str	r3, [r4, #0]
 8005808:	f7fb f998 	bl	8000b3c <_sbrk>
 800580c:	1c43      	adds	r3, r0, #1
 800580e:	d102      	bne.n	8005816 <_sbrk_r+0x1a>
 8005810:	6823      	ldr	r3, [r4, #0]
 8005812:	b103      	cbz	r3, 8005816 <_sbrk_r+0x1a>
 8005814:	602b      	str	r3, [r5, #0]
 8005816:	bd38      	pop	{r3, r4, r5, pc}
 8005818:	20004a00 	.word	0x20004a00

0800581c <__sread>:
 800581c:	b510      	push	{r4, lr}
 800581e:	460c      	mov	r4, r1
 8005820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005824:	f000 f896 	bl	8005954 <_read_r>
 8005828:	2800      	cmp	r0, #0
 800582a:	bfab      	itete	ge
 800582c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800582e:	89a3      	ldrhlt	r3, [r4, #12]
 8005830:	181b      	addge	r3, r3, r0
 8005832:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005836:	bfac      	ite	ge
 8005838:	6563      	strge	r3, [r4, #84]	; 0x54
 800583a:	81a3      	strhlt	r3, [r4, #12]
 800583c:	bd10      	pop	{r4, pc}

0800583e <__swrite>:
 800583e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005842:	461f      	mov	r7, r3
 8005844:	898b      	ldrh	r3, [r1, #12]
 8005846:	05db      	lsls	r3, r3, #23
 8005848:	4605      	mov	r5, r0
 800584a:	460c      	mov	r4, r1
 800584c:	4616      	mov	r6, r2
 800584e:	d505      	bpl.n	800585c <__swrite+0x1e>
 8005850:	2302      	movs	r3, #2
 8005852:	2200      	movs	r2, #0
 8005854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005858:	f000 f868 	bl	800592c <_lseek_r>
 800585c:	89a3      	ldrh	r3, [r4, #12]
 800585e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005862:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005866:	81a3      	strh	r3, [r4, #12]
 8005868:	4632      	mov	r2, r6
 800586a:	463b      	mov	r3, r7
 800586c:	4628      	mov	r0, r5
 800586e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005872:	f000 b817 	b.w	80058a4 <_write_r>

08005876 <__sseek>:
 8005876:	b510      	push	{r4, lr}
 8005878:	460c      	mov	r4, r1
 800587a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800587e:	f000 f855 	bl	800592c <_lseek_r>
 8005882:	1c43      	adds	r3, r0, #1
 8005884:	89a3      	ldrh	r3, [r4, #12]
 8005886:	bf15      	itete	ne
 8005888:	6560      	strne	r0, [r4, #84]	; 0x54
 800588a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800588e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005892:	81a3      	strheq	r3, [r4, #12]
 8005894:	bf18      	it	ne
 8005896:	81a3      	strhne	r3, [r4, #12]
 8005898:	bd10      	pop	{r4, pc}

0800589a <__sclose>:
 800589a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800589e:	f000 b813 	b.w	80058c8 <_close_r>
	...

080058a4 <_write_r>:
 80058a4:	b538      	push	{r3, r4, r5, lr}
 80058a6:	4c07      	ldr	r4, [pc, #28]	; (80058c4 <_write_r+0x20>)
 80058a8:	4605      	mov	r5, r0
 80058aa:	4608      	mov	r0, r1
 80058ac:	4611      	mov	r1, r2
 80058ae:	2200      	movs	r2, #0
 80058b0:	6022      	str	r2, [r4, #0]
 80058b2:	461a      	mov	r2, r3
 80058b4:	f7fb f8f2 	bl	8000a9c <_write>
 80058b8:	1c43      	adds	r3, r0, #1
 80058ba:	d102      	bne.n	80058c2 <_write_r+0x1e>
 80058bc:	6823      	ldr	r3, [r4, #0]
 80058be:	b103      	cbz	r3, 80058c2 <_write_r+0x1e>
 80058c0:	602b      	str	r3, [r5, #0]
 80058c2:	bd38      	pop	{r3, r4, r5, pc}
 80058c4:	20004a00 	.word	0x20004a00

080058c8 <_close_r>:
 80058c8:	b538      	push	{r3, r4, r5, lr}
 80058ca:	4c06      	ldr	r4, [pc, #24]	; (80058e4 <_close_r+0x1c>)
 80058cc:	2300      	movs	r3, #0
 80058ce:	4605      	mov	r5, r0
 80058d0:	4608      	mov	r0, r1
 80058d2:	6023      	str	r3, [r4, #0]
 80058d4:	f7fb f8fe 	bl	8000ad4 <_close>
 80058d8:	1c43      	adds	r3, r0, #1
 80058da:	d102      	bne.n	80058e2 <_close_r+0x1a>
 80058dc:	6823      	ldr	r3, [r4, #0]
 80058de:	b103      	cbz	r3, 80058e2 <_close_r+0x1a>
 80058e0:	602b      	str	r3, [r5, #0]
 80058e2:	bd38      	pop	{r3, r4, r5, pc}
 80058e4:	20004a00 	.word	0x20004a00

080058e8 <_fstat_r>:
 80058e8:	b538      	push	{r3, r4, r5, lr}
 80058ea:	4c07      	ldr	r4, [pc, #28]	; (8005908 <_fstat_r+0x20>)
 80058ec:	2300      	movs	r3, #0
 80058ee:	4605      	mov	r5, r0
 80058f0:	4608      	mov	r0, r1
 80058f2:	4611      	mov	r1, r2
 80058f4:	6023      	str	r3, [r4, #0]
 80058f6:	f7fb f8f9 	bl	8000aec <_fstat>
 80058fa:	1c43      	adds	r3, r0, #1
 80058fc:	d102      	bne.n	8005904 <_fstat_r+0x1c>
 80058fe:	6823      	ldr	r3, [r4, #0]
 8005900:	b103      	cbz	r3, 8005904 <_fstat_r+0x1c>
 8005902:	602b      	str	r3, [r5, #0]
 8005904:	bd38      	pop	{r3, r4, r5, pc}
 8005906:	bf00      	nop
 8005908:	20004a00 	.word	0x20004a00

0800590c <_isatty_r>:
 800590c:	b538      	push	{r3, r4, r5, lr}
 800590e:	4c06      	ldr	r4, [pc, #24]	; (8005928 <_isatty_r+0x1c>)
 8005910:	2300      	movs	r3, #0
 8005912:	4605      	mov	r5, r0
 8005914:	4608      	mov	r0, r1
 8005916:	6023      	str	r3, [r4, #0]
 8005918:	f7fb f8f8 	bl	8000b0c <_isatty>
 800591c:	1c43      	adds	r3, r0, #1
 800591e:	d102      	bne.n	8005926 <_isatty_r+0x1a>
 8005920:	6823      	ldr	r3, [r4, #0]
 8005922:	b103      	cbz	r3, 8005926 <_isatty_r+0x1a>
 8005924:	602b      	str	r3, [r5, #0]
 8005926:	bd38      	pop	{r3, r4, r5, pc}
 8005928:	20004a00 	.word	0x20004a00

0800592c <_lseek_r>:
 800592c:	b538      	push	{r3, r4, r5, lr}
 800592e:	4c07      	ldr	r4, [pc, #28]	; (800594c <_lseek_r+0x20>)
 8005930:	4605      	mov	r5, r0
 8005932:	4608      	mov	r0, r1
 8005934:	4611      	mov	r1, r2
 8005936:	2200      	movs	r2, #0
 8005938:	6022      	str	r2, [r4, #0]
 800593a:	461a      	mov	r2, r3
 800593c:	f7fb f8f1 	bl	8000b22 <_lseek>
 8005940:	1c43      	adds	r3, r0, #1
 8005942:	d102      	bne.n	800594a <_lseek_r+0x1e>
 8005944:	6823      	ldr	r3, [r4, #0]
 8005946:	b103      	cbz	r3, 800594a <_lseek_r+0x1e>
 8005948:	602b      	str	r3, [r5, #0]
 800594a:	bd38      	pop	{r3, r4, r5, pc}
 800594c:	20004a00 	.word	0x20004a00

08005950 <__malloc_lock>:
 8005950:	4770      	bx	lr

08005952 <__malloc_unlock>:
 8005952:	4770      	bx	lr

08005954 <_read_r>:
 8005954:	b538      	push	{r3, r4, r5, lr}
 8005956:	4c07      	ldr	r4, [pc, #28]	; (8005974 <_read_r+0x20>)
 8005958:	4605      	mov	r5, r0
 800595a:	4608      	mov	r0, r1
 800595c:	4611      	mov	r1, r2
 800595e:	2200      	movs	r2, #0
 8005960:	6022      	str	r2, [r4, #0]
 8005962:	461a      	mov	r2, r3
 8005964:	f7fb f87d 	bl	8000a62 <_read>
 8005968:	1c43      	adds	r3, r0, #1
 800596a:	d102      	bne.n	8005972 <_read_r+0x1e>
 800596c:	6823      	ldr	r3, [r4, #0]
 800596e:	b103      	cbz	r3, 8005972 <_read_r+0x1e>
 8005970:	602b      	str	r3, [r5, #0]
 8005972:	bd38      	pop	{r3, r4, r5, pc}
 8005974:	20004a00 	.word	0x20004a00

08005978 <_init>:
 8005978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800597a:	bf00      	nop
 800597c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800597e:	bc08      	pop	{r3}
 8005980:	469e      	mov	lr, r3
 8005982:	4770      	bx	lr

08005984 <_fini>:
 8005984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005986:	bf00      	nop
 8005988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800598a:	bc08      	pop	{r3}
 800598c:	469e      	mov	lr, r3
 800598e:	4770      	bx	lr
